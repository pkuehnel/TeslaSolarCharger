@using TeslaSolarCharger.Shared.Resources.Contracts
@using TeslaSolarCharger.Shared.Helper.Contracts
@using TeslaSolarCharger.Client.Wrapper
@using TeslaSolarCharger.Shared.Dtos.ModbusConfiguration
@using Newtonsoft.Json
@using TeslaSolarCharger.Shared.Dtos
@using TeslaSolarCharger.Shared.Enums
@using TeslaSolarCharger.SharedModel.Enums
@using MudExtensions

@inject HttpClient HttpClient
@inject IConstants Constants
@inject IStringHelper StringHelper
@inject ISnackbar Snackbar

@if (EditableValueConfiguration == null)
{
    <LoadingSpinnerComponent />
}
else
{
    <EditFormComponent T="DtoModbusConfiguration"
                       WrappedElement="EditableValueConfiguration"
                       HideSubmitButton="true"
                       @ref=ValueConfigurationForm>
        <ChildContent>
            <MudDialog>
                <DialogContent>
                    <GenericInput For="() => EditableValueConfiguration.Item.UnitIdentifier"></GenericInput>
                    <GenericInput For="() => EditableValueConfiguration.Item.Host"></GenericInput>
                    <GenericInput For="() => EditableValueConfiguration.Item.Port"></GenericInput>
                    <div class="px-2 pt-2">
                        <MudSelect T="ModbusEndianess"
                                   Class="@Constants.DefaultMargin"
                                   Variant="Variant.Outlined"
                                   Value="@EditableValueConfiguration.Item.Endianess"
                                   ValueChanged="(newItem) => UpdateEndianess(EditableValueConfiguration.Item, newItem)"
                                   Label="Endianess"
                                   Margin="Constants.InputMargin">
                            @foreach (ModbusEndianess item in Enum.GetValues(typeof(ModbusEndianess)))
                            {
                                <MudSelectItem T="ModbusEndianess" Value="@item">@StringHelper.GenerateFriendlyStringFromPascalString(item.ToString())</MudSelectItem>
                            }
                        </MudSelect>
                    </div>
                    <GenericInput For="() => EditableValueConfiguration.Item.ConnectDelayMilliseconds"></GenericInput>
                    <GenericInput For="() => EditableValueConfiguration.Item.ReadTimeoutMilliseconds"></GenericInput>
                    @foreach (var editableResultConfig in EditableResultConfigurations)
                    {
                        <EditFormComponent T="DtoModbusValueResultConfiguration"
                                           WrappedElement="editableResultConfig"
                                           HideSubmitButton="true"
                                           @ref="ResultConfigEditFormSetter">
                            <ChildContent>
                                <div class="d-flex align-items-center">
                                    <div class="p-2 flex-grow-1">
                                        @if (editableResultConfig.Item.Id != default)
                                        {
                                            <GenericInput For="() => editableResultConfig.Item.Id" IsDisabledParameter="true"></GenericInput>
                                        }
                                        <div class="p-2">
                                            <MudSelectExtended T="ValueUsage"
                                                               Variant="Variant.Outlined"
                                                               AnchorOrigin="Origin.BottomCenter"
                                                               @bind-Value="@editableResultConfig.Item.UsedFor"
                                                               Label="Used for"
                                                               Margin="Constants.InputMargin">
                                                <MudSelectItemGroupExtended T="ValueUsage" Text="Solar" Nested="true" InitiallyExpanded="false">
                                                    @foreach (ValueUsage item in Enum.GetValues(typeof(ValueUsage)))
                                                    {
                                                        <MudSelectItemExtended T="ValueUsage" Value="@item">@StringHelper.GenerateFriendlyStringFromPascalString(item.ToString())</MudSelectItemExtended>
                                                    }
                                                </MudSelectItemGroupExtended>
                                            </MudSelectExtended>
                                        </div>
                                        <div class="px-2 pt-2">
                                            <MudSelect T="ModbusRegisterType"
                                                       Class="@Constants.DefaultMargin"
                                                       Variant="Variant.Outlined"
                                                       Value="@editableResultConfig.Item.RegisterType"
                                                       ValueChanged="(newItem) => UpdateRegisterType(editableResultConfig.Item, newItem)"
                                                       Label="Register Type"
                                                       Margin="Constants.InputMargin">
                                                @foreach (ModbusRegisterType item in Enum.GetValues(typeof(ModbusRegisterType)))
                                                {
                                                    <MudSelectItem T="ModbusRegisterType" Value="@item">@StringHelper.GenerateFriendlyStringFromPascalString(item.ToString())</MudSelectItem>
                                                }
                                            </MudSelect>
                                        </div>
                                        <div class="px-2 pt-2">
                                            <MudSelect T="ModbusValueType"
                                                       Class="@Constants.DefaultMargin"
                                                       Variant="Variant.Outlined"
                                                       Value="@editableResultConfig.Item.ValueType"
                                                       ValueChanged="(newItem) => UpdateValueType(editableResultConfig.Item, newItem)"
                                                       Label="Value Type"
                                                       Margin="Constants.InputMargin">
                                                @foreach (ModbusValueType item in Enum.GetValues(typeof(ModbusValueType)))
                                                {
                                                    <MudSelectItem T="ModbusValueType" Value="@item">@StringHelper.GenerateFriendlyStringFromPascalString(item.ToString())</MudSelectItem>
                                                }
                                            </MudSelect>
                                        </div>
                                        <GenericInput For="() => editableResultConfig.Item.Address"></GenericInput>
                                        <GenericInput For="() => editableResultConfig.Item.Length"></GenericInput>
                                        @if (editableResultConfig.Item.ValueType == ModbusValueType.Bool)
                                        {
                                            <GenericInput For="() => editableResultConfig.Item.BitStartIndex"></GenericInput>
                                        }
                                        else
                                        {
                                            <GenericInput T="int?" For="() => editableResultConfig.Item.InvertedByModbusResultConfigurationId" OnValueChanged="StateHasChanged"></GenericInput>
                                        }
                                        <div class="row">
                                            <div class="col">
                                                <div class="px-2 pt-2">
                                                    <MudSelect T="ValueOperator"
                                                               Class="@Constants.DefaultMargin"
                                                               Variant="Variant.Outlined"
                                                               Value="@editableResultConfig.Item.Operator"
                                                               ValueChanged="(newItem) => UpdateOperator(editableResultConfig.Item, newItem)"
                                                               Label="Operator"
                                                               Margin="Constants.InputMargin">
                                                        @foreach (ValueOperator item in Enum.GetValues(typeof(ValueOperator)))
                                                        {
                                                            <MudSelectItem T="ValueOperator" Value="@item">@StringHelper.GenerateFriendlyStringFromPascalString(item.ToString())</MudSelectItem>
                                                        }
                                                    </MudSelect>
                                                </div>
                                            </div>
                                            <div class="col">
                                                <GenericInput For="() => editableResultConfig.Item.CorrectionFactor"></GenericInput>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col">
                                            <MudFab Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete" OnClick="_ => InvokeDeleteClicked(editableResultConfig.Item, editableResultConfig.Guid)" Size="Size.Medium" ButtonType="ButtonType.Button"></MudFab>
                                        </div>
                                    </div>
                                </div>
                            </ChildContent>
                        </EditFormComponent>
                    }
                    <div class="p-2">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" StartIcon="@Icons.Material.Filled.Add"
                                   OnClick="_ => EditableResultConfigurations.Add(new EditableItem<DtoModbusValueResultConfiguration>(new()))">Add Result</MudButton>
                    </div>
                </DialogContent>
                <DialogActions>
                    <MudButton OnClick="Cancel">Cancel</MudButton>
                    <MudButton Color="Color.Primary" OnClick="SubmitAllForms">Save</MudButton>
                </DialogActions>
            </MudDialog>
        </ChildContent>

    </EditFormComponent>
}


@code {
    [CascadingParameter]
    IMudDialogInstance MudDialog { get; set; } = null!;

    [Parameter]
    public int? ValueConfigurationId { get; set; }

    void Cancel() => MudDialog.Cancel();

    private DtoModbusConfiguration? ValueConfiguration { get; set; }
    private EditableItem<DtoModbusConfiguration>? EditableValueConfiguration => ValueConfiguration == null ? null : new EditableItem<DtoModbusConfiguration>(ValueConfiguration);

    private List<EditableItem<DtoModbusValueResultConfiguration>> EditableResultConfigurations { get; set; } = new();
    private Dictionary<string, EditFormComponent<DtoModbusValueResultConfiguration>> ResultConfigEditForms { get; set; } = new();
    public EditFormComponent<DtoModbusValueResultConfiguration> ResultConfigEditFormSetter
    {
        set => ResultConfigEditForms[value.WrappedElement.Guid] = value;
    }

    public EditFormComponent<DtoModbusConfiguration>? ValueConfigurationForm { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (ValueConfigurationId == null)
        {
            ValueConfiguration = new DtoModbusConfiguration();
        }
        else
        {
            await LoadValueConfigurations();
            await LoadResultConfigurations();
        }
    }

    private async Task SubmitAllForms()
    {
        if (ValueConfigurationForm == default)
        {
            Snackbar.Add("Config form is null, can not save values", Severity.Error);
            return;
        }

        if (ValueConfiguration == default)
        {
            Snackbar.Add("Modbus value configuration is null", Severity.Error);
            return;
        }

        if (!ValueConfigurationForm.WrappedElement.EditContext.Validate())
        {
            Snackbar.Add("Modbus configuration is not valid", Severity.Error);
            return;
        }

        if (ResultConfigEditForms.Count < 1)
        {
            Snackbar.Add("At least one result configuration is required", Severity.Error);
            return;
        }

        if (ResultConfigEditForms.Any(r => r.Value.WrappedElement.EditContext.Validate() != true))
        {
            StateHasChanged();
            Snackbar.Add("At least one result configuration is not valid");
            return;
        }

        var result = await HttpClient.PostAsJsonAsync("/api/ModbusValueConfiguration/UpdateModbusValueConfiguration", ValueConfiguration);
        if (!result.IsSuccessStatusCode)
        {
            Snackbar.Add("Failed to update Modbus value configuration", Severity.Error);
            return;
        }
        var resultContent = await result.Content.ReadFromJsonAsync<DtoValue<int>>();
        if (resultContent == default)
        {
            Snackbar.Add("Failed to update Modbus value configuration", Severity.Error);
            return;
        }

        ValueConfiguration.Id = resultContent.Value;
        var parentId = ValueConfiguration?.Id ?? ValueConfigurationId;

        foreach (var editForm in ResultConfigEditForms)
        {
            var resultConfig = editForm.Value.WrappedElement.Item;
            var resultConfigResult = await HttpClient.PostAsJsonAsync($"/api/ModbusValueConfiguration/SaveResultConfiguration?parentId={parentId}", resultConfig);
            if (!result.IsSuccessStatusCode)
            {
                Snackbar.Add("Failed to update Modbus value configuration", Severity.Error);
                return;
            }
            var resultConfigResultContent = await resultConfigResult.Content.ReadFromJsonAsync<DtoValue<int>>();
            if (resultConfigResultContent == default)
            {
                Snackbar.Add("Failed to update Modbus value configuration", Severity.Error);
                return;
            }
            resultConfig.Id = resultContent.Value;
        }
        Snackbar.Add("Modbus value configuration saved.", Severity.Success);
        MudDialog.Close(DialogResult.Ok(parentId));
    }

    private async Task LoadValueConfigurations()
    {
        var resultString = await HttpClient.GetStringAsync($"/api/ModbusValueConfiguration/GetValueConfigurationById?id={ValueConfigurationId}");
        var result = JsonConvert.DeserializeObject<DtoModbusConfiguration>(resultString);
        ValueConfiguration = result;
    }

    private async Task LoadResultConfigurations()
    {
        var parentId = ValueConfiguration?.Id ?? ValueConfigurationId;
        if (parentId == null)
        {
            return;
        }
        var elements = await HttpClient.GetFromJsonAsync<List<DtoModbusValueResultConfiguration>>($"api/ModbusValueConfiguration/GetResultConfigurationsByValueConfigurationId?parentId={parentId}");
        elements ??= new List<DtoModbusValueResultConfiguration>();
        foreach (var element in elements)
        {
            EditableResultConfigurations.Add(new(element));
        }
        if (elements.Count == 0)
        {
            EditableResultConfigurations.Add(new(new()));
        }


    }

    private void UpdateEndianess(DtoModbusConfiguration item, ModbusEndianess newItem)
    {
        item.Endianess = newItem;
    }

    private void UpdateOperator(DtoModbusValueResultConfiguration editableItemItem, ValueOperator newItem)
    {
        editableItemItem.Operator = newItem;
    }

    private void UpdateRegisterType(DtoModbusValueResultConfiguration item, ModbusRegisterType newItem)
    {
        item.RegisterType = newItem;
    }

    private void UpdateValueType(DtoModbusValueResultConfiguration item, ModbusValueType newItem)
    {
        item.ValueType = newItem;
        StateHasChanged();
    }

    private async Task InvokeDeleteClicked(DtoModbusValueResultConfiguration item, string guid)
    {
        if (item.Id != default)
        {
            var result = await HttpClient.DeleteAsync($"/api/ModbusValueConfiguration/DeleteResultConfiguration?id={item.Id}");
            if (!result.IsSuccessStatusCode)
            {
                Snackbar.Add("Failed to delete result configuration", Severity.Error);
                return;
            }

        }
        EditableResultConfigurations.RemoveAll(r => r.Guid == guid);
        ResultConfigEditForms.Remove(guid);
        Snackbar.Add("Result configuration deleted", Severity.Success);
    }

}
