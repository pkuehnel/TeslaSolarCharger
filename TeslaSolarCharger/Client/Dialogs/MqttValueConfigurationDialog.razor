@using TeslaSolarCharger.Shared.Helper.Contracts
@using TeslaSolarCharger.Shared.Resources.Contracts
@using TeslaSolarCharger.SharedModel.Enums
@using TeslaSolarCharger.Client.Wrapper
@using TeslaSolarCharger.Shared.Dtos
@using Newtonsoft.Json
@using MudExtensions
@using TeslaSolarCharger.Shared.Dtos.MqttConfiguration

@inject HttpClient HttpClient
@inject IConstants Constants
@inject IStringHelper StringHelper
@inject ISnackbar Snackbar

@if (EditableMqttConfiguration == null)
{
    <div class="spinner"></div>
}
else
{

    <EditFormComponent T="DtoMqttConfiguration"
                       WrappedElement="EditableMqttConfiguration"
                       HideSubmitButton="true"
                       @ref=fullConfigForm>
        <ChildContent>
            <MudDialog>
                <DialogContent>
                    <div class="row">
                        <div class="col">
                            <GenericInput T="string" For="() => EditableMqttConfiguration.Item.Host"></GenericInput>
                        </div>
                        <div class="col">
                            <GenericInput For="() => EditableMqttConfiguration.Item.Port"></GenericInput>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <GenericInput T="string" For="() => EditableMqttConfiguration.Item.Username"></GenericInput>
                        </div>
                        <div class="col">
                            <GenericInput For="() => EditableMqttConfiguration.Item.Password" IsPassword="true"></GenericInput>
                        </div>
                    </div>
                    

                    @foreach (var editableResultConfig in EditableMqttResultConfigurations)
                    {
                        <EditFormComponent T="DtoMqttResultConfiguration"
                                           WrappedElement="editableResultConfig"
                                           HideSubmitButton="true"
                                           @ref="ResultConfigEditFormSetter">
                            <ChildContent>
                                <div class="d-flex align-items-center">
                                    <div class="p-2 flex-grow-1">
                                        <GenericInput For="() => editableResultConfig.Item.Topic"></GenericInput>
                                        <div class="px-2 pt-2">
                                            <MudSelect T="NodePatternType"
                                                       Class="@Constants.DefaultMargin"
                                                       Variant="Variant.Outlined"
                                                       Value="@editableResultConfig.Item.NodePatternType"
                                                       ValueChanged="@((newValue) => UpdateNodePatternType(editableResultConfig.Item, newValue))"
                                                       Label="Node Pattern Type"
                                                       Margin="Constants.InputMargin">
                                                @foreach (NodePatternType item in Enum.GetValues(typeof(NodePatternType)))
                                                {
                                                    <MudSelectItem T="NodePatternType" Value="@item">@StringHelper.GenerateFriendlyStringFromPascalString(item.ToString())</MudSelectItem>
                                                }
                                            </MudSelect>
                                        </div>
                                        <div class="p-2">
                                            <MudSelectExtended T="ValueUsage"
                                                               Variant="Variant.Outlined"
                                                               AnchorOrigin="Origin.BottomCenter"
                                                               @bind-Value="@editableResultConfig.Item.UsedFor"
                                                               Label="Used for"
                                                               Margin="Constants.InputMargin">
                                                <MudSelectItemGroupExtended T="ValueUsage" Text="Solar" Nested="true" InitiallyExpanded="false">
                                                    @foreach (ValueUsage item in Enum.GetValues(typeof(ValueUsage)))
                                                    {
                                                        <MudSelectItemExtended T="ValueUsage" Value="@item">@StringHelper.GenerateFriendlyStringFromPascalString(item.ToString())</MudSelectItemExtended>
                                                    }
                                                </MudSelectItemGroupExtended>
                                            </MudSelectExtended>
                                        </div>
                                        <div class="row">
                                            @if (editableResultConfig.Item.NodePatternType != NodePatternType.Direct)
                                            {
                                                <div class="col">
                                                    <GenericInput For="() => editableResultConfig.Item.NodePattern"></GenericInput>
                                                </div>
                                            }
                                            @if (editableResultConfig.Item.NodePatternType == NodePatternType.Xml)
                                            {
                                                <div>
                                                    <GenericInput For="() => editableResultConfig.Item.XmlAttributeHeaderName"></GenericInput>
                                                </div>
                                            }
                                        </div>
                                        @if (editableResultConfig.Item.NodePatternType == NodePatternType.Xml)
                                        {
                                            <div class="col">
                                                <div>
                                                    <GenericInput For="() => editableResultConfig.Item.XmlAttributeHeaderValue"></GenericInput>
                                                </div>
                                                <div>
                                                    <GenericInput For="() => editableResultConfig.Item.XmlAttributeValueName"></GenericInput>
                                                </div>
                                            </div>

                                        }
                                        <div class="row">
                                            <div class="col">
                                                <div class="p-2">
                                                    <MudSelect T="ValueOperator"
                                                               Class="@Constants.DefaultMargin"
                                                               Variant="Variant.Outlined"
                                                               Value="@editableResultConfig.Item.Operator"
                                                               ValueChanged="(newItem) => UpdateOperator(editableResultConfig.Item, newItem)"
                                                               Label="Operator"
                                                               Margin="Constants.InputMargin">
                                                        @foreach (ValueOperator item in Enum.GetValues(typeof(ValueOperator)))
                                                        {
                                                            <MudSelectItem T="ValueOperator" Value="@item">@StringHelper.GenerateFriendlyStringFromPascalString(item.ToString())</MudSelectItem>
                                                        }
                                                    </MudSelect>
                                                </div>
                                            </div>
                                            <div class="col">
                                                <GenericInput For="() => editableResultConfig.Item.CorrectionFactor"></GenericInput>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col">
                                            <MudFab Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete" OnClick="_ => InvokeDeleteClicked(editableResultConfig.Item, editableResultConfig.Guid)" Size="Size.Medium" ButtonType="ButtonType.Button"></MudFab>
                                        </div>
                                    </div>
                                </div>
                            </ChildContent>
                        </EditFormComponent>
                    }
                    <div class="p-2">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" StartIcon="@Icons.Material.Filled.Add"
                                   OnClick="_ => EditableMqttResultConfigurations.Add(new EditableItem<DtoMqttResultConfiguration>(new()))">Add Result</MudButton>
                    </div>
                </DialogContent>
                <DialogActions>
                    <MudButton OnClick="Cancel">Cancel</MudButton>
                    <MudButton Color="Color.Primary" OnClick="SubmitAllForms">Save</MudButton>
                </DialogActions>
            </MudDialog>

        </ChildContent>
    </EditFormComponent>

}

@code {
    [CascadingParameter]
    IMudDialogInstance MudDialog { get; set; } = null!;

    [Parameter]
    public int? MqttConfigurationId { get; set; }

    EditFormComponent<DtoMqttConfiguration>? fullConfigForm;

    void Cancel() => MudDialog.Cancel();

    private DtoMqttConfiguration? MqttConfiguration { get; set; }

    private EditableItem<DtoMqttConfiguration>? EditableMqttConfiguration => MqttConfiguration == null ? null : new EditableItem<DtoMqttConfiguration>(MqttConfiguration);

    private List<EditableItem<DtoMqttResultConfiguration>> EditableMqttResultConfigurations { get; set; } = new();

    private Dictionary<string, EditFormComponent<DtoMqttResultConfiguration>> ResultConfigEditForms { get; set; } = new();
    public EditFormComponent<DtoMqttResultConfiguration> ResultConfigEditFormSetter
    {
        set => ResultConfigEditForms[value.WrappedElement.Guid] = value;
    }


    protected override async Task OnInitializedAsync()
    {
        if (MqttConfigurationId == null)
        {
            MqttConfiguration = new DtoMqttConfiguration();
        }
        else
        {
            await LoadMqttConfiguration();
            await LoadResultConfigurations();

        }
    }

    private async Task SubmitAllForms()
    {
        if (fullConfigForm == default)
        {
            Snackbar.Add("Config form is null, can not save values", Severity.Error);
            return;
        }

        if (MqttConfiguration == default)
        {
            Snackbar.Add("MQTT configuration is null", Severity.Error);
            return;
        }

        if (!fullConfigForm.WrappedElement.EditContext.Validate())
        {
            Snackbar.Add("MQTT configuration is not valid", Severity.Error);
            return;
        }

        if (ResultConfigEditForms.Count < 1)
        {
            Snackbar.Add("At least one result configuration is required", Severity.Error);
            return;
        }

        if (ResultConfigEditForms.Any(r => r.Value.WrappedElement.EditContext.Validate() != true))
        {
            Snackbar.Add("At least one result configuration is not valid");
            return;
        }
        var result = await HttpClient.PostAsJsonAsync("/api/MqttConfiguration/SaveConfiguration", MqttConfiguration);
        if (!result.IsSuccessStatusCode)
        {
            Snackbar.Add("Failed to update MQTT configuration", Severity.Error);
            return;
        }
        var resultContent = await result.Content.ReadFromJsonAsync<DtoValue<int>>();
        if (resultContent == default)
        {
            Snackbar.Add("Failed to update MQTT configuration", Severity.Error);
            return;
        }
        MqttConfiguration.Id = resultContent.Value;
        var parentId = MqttConfiguration?.Id ?? MqttConfigurationId;
        foreach (var editForm in ResultConfigEditForms)
        {
            var resultConfig = editForm.Value.WrappedElement.Item;
            var resultConfigResult = await HttpClient.PostAsJsonAsync($"/api/MqttConfiguration/SaveResultConfiguration?parentId={parentId}", resultConfig);
            if (!result.IsSuccessStatusCode)
            {
                Snackbar.Add("Failed to update MQTT configuration", Severity.Error);
                return;
            }
            var resultConfigResultContent = await resultConfigResult.Content.ReadFromJsonAsync<DtoValue<int>>();
            if (resultConfigResultContent == default)
            {
                Snackbar.Add("Failed to update MQTT configuration", Severity.Error);
                return;
            }
            resultConfig.Id = resultContent.Value;
        }
        Snackbar.Add("MQTT configuration saved.", Severity.Success);
        MudDialog.Close(DialogResult.Ok(parentId));
    }

    private async Task LoadMqttConfiguration()
    {
        var resultString = await HttpClient.GetStringAsync($"/api/MqttConfiguration/GetConfigurationById?id={MqttConfigurationId}");
        var result = JsonConvert.DeserializeObject<DtoMqttConfiguration>(resultString);
        MqttConfiguration = result;
    }

    private async Task LoadResultConfigurations()
    {
        var parentId = MqttConfiguration?.Id ?? MqttConfigurationId;
        if (parentId == null)
        {
            return;
        }
        var resultString = await HttpClient.GetStringAsync($"/api/MqttConfiguration/GetResultConfigurationsByParentId?parentId={parentId}");
        var elements = JsonConvert.DeserializeObject<List<DtoMqttResultConfiguration>>(resultString);
        elements ??= new List<DtoMqttResultConfiguration>();
        foreach (var element in elements)
        {
            EditableMqttResultConfigurations.Add(new(element));
        }
    }

    private void UpdateNodePatternType(DtoMqttResultConfiguration mqttConfiguration, NodePatternType newItem)
    {
        mqttConfiguration.NodePatternType = newItem;
        StateHasChanged();
    }

    private void UpdateOperator(DtoMqttResultConfiguration editableItemItem, ValueOperator newItem)
    {
        editableItemItem.Operator = newItem;
    }

    private async Task InvokeDeleteClicked(DtoMqttResultConfiguration editableItemItem, string guid)
    {
        if (editableItemItem.Id != default)
        {
            var result = await HttpClient.DeleteAsync($"/api/MqttConfiguration/DeleteResultConfiguration?id={editableItemItem.Id}");
            if (!result.IsSuccessStatusCode)
            {
                Snackbar.Add("Failed to delete result configuration", Severity.Error);
                return;
            }

        }
        EditableMqttResultConfigurations.RemoveAll(r => r.Guid == guid);
        ResultConfigEditForms.Remove(guid);
        Snackbar.Add("Result configuration deleted", Severity.Success);
    }
}
