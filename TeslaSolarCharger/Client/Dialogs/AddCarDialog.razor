@using TeslaSolarCharger.Shared.Dtos
@using TeslaSolarCharger.Shared.Enums
@using TeslaSolarCharger.Shared.Localization.Contracts
@using TeslaSolarCharger.Shared.Localization.Registries
@using TeslaSolarCharger.Shared.Localization.Registries.Pages

@inject HttpClient HttpClient
@inject ITextLocalizationService TextLocalizer

<h3>@T("Add car")</h3>

@if (_fleetApiTokenState == default)
{
    <PlaceholderComponent Count="10"></PlaceholderComponent>
}
else if (_fleetApiTokenState != TokenState.UpToDate)
{
    <MudAlert Severity="Severity.Error"
              NoIcon="true"
              ContentAlignment="HorizontalAlignment.Left">
        <h4>@T("Tesla Fleet API Token is not valid.")</h4>
        @T("Go to ")<MudLink Href="/cloudconnection">@T("Cloud Connection")</MudLink>@T(" and generate a Tesla Fleet API Token.")
    </MudAlert>
}
else
{

}

@code {


    private TokenState? _fleetApiTokenState;

    private string T(string key) =>
        TextLocalizer.Get<CarSettingsPageLocalizationRegistry>(key, typeof(SharedComponentLocalizationRegistry))
        ?? key;

    protected override async Task OnInitializedAsync()
    {
        await RefreshFleetApiTokenState();
    }

    public async Task RefreshFleetApiTokenState()
    {
        var value = await HttpClient.GetFromJsonAsync<DtoValue<TokenState>>("api/FleetApi/FleetApiTokenState").ConfigureAwait(false);
        if (value != null)
        {
            _fleetApiTokenState = value.Value;
        }
    }
}
