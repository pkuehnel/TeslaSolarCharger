@using System.Linq.Expressions
@using System.Reflection
@using System.ComponentModel.DataAnnotations
@using System.ComponentModel
@using MudExtensions
@using TeslaSolarCharger.Shared.Attributes
@using TeslaSolarCharger.Shared.Helper.Contracts
@using TeslaSolarCharger.Shared.Resources.Contracts

@inject IConstants Constants
@inject IStringHelper StringHelper

@typeparam T

@if (!EqualityComparer<T>.Default.Equals(Value, default(T)) || !IsReadOnly)
{
    <div class="d-flex align-items-center">
        <div class="@($"p-{Padding} flex-grow-1")">
            <div>
                @if (typeof(T) == typeof(DateTime?))
                {
                    <MudDatePicker id="@InputId"
                                   @bind-Date="DateValue"
                                   For="@(ForDateTime)"
                                   Required="@IsRequired"
                                   Label="@LabelName"
                                   Disabled="IsDisabled"
                                   ReadOnly="IsReadOnly"
                                   Variant="Variant.Outlined"
                                   Margin="InputMargin"
                                   Clearable="@(Clearable && !IsReadOnly && !IsDisabled)"
                                   @attributes="@(ShouldBeInErrorState.HasValue ? new Dictionary<string, object>
                                                {
                                                    { "Error", ShouldBeInErrorState.Value },
                                                    { "ErrorText", ErrorMessage ?? string.Empty },
                                                } :new())" />
                }
                else if (typeof(T) == typeof(TimeSpan?))
                {
                    <MudTimePicker id="@InputId"
                                   @bind-Time="TimeSpanValue"
                                   For="@(ForTimeSpan)"
                                   Required="@IsRequired"
                                   Label="@LabelName"
                                   Disabled="IsDisabled"
                                   ReadOnly="IsReadOnly"
                                   Variant="Variant.Outlined"
                                   Margin="InputMargin"
                                   Clearable="@(Clearable && !IsReadOnly && !IsDisabled)"
                                   @attributes="@(ShouldBeInErrorState.HasValue ? new Dictionary<string, object>
                                                {
                                                    { "Error", ShouldBeInErrorState.Value },
                                                    { "ErrorText", ErrorMessage ?? string.Empty },
                                                } :new())" />
                }
                else if (typeof(T).IsEnum)
                {
                    <MudSelectExtended id="@InputId"
                                       T="T"
                                       @bind-Value="Value"
                                       For="@(For)"
                                       SearchBox="@DropDownSearchBox"
                                       Required="@IsRequired"
                                       Label="@LabelName"
                                       Disabled="IsDisabled"
                                       ReadOnly="IsReadOnly"
                                       Variant="Variant.Outlined"
                                       Margin="InputMargin"
                                       SearchBoxAutoFocus="@DropDownSearchBox"
                                       ToStringFunc="@(new Func<T, string>(GetEnumDisplayName))"
                                       ItemCollection="Enum.GetValues(typeof(T)).Cast<T>().ToList()"
                                       Immediate="@ImmediateValueUpdate"
                                       Virtualize="true"
                                       Clearable="@(Clearable && !IsReadOnly && !IsDisabled)"
                                       @attributes="@(ShouldBeInErrorState.HasValue ? new Dictionary<string, object>
                                                    {
                                                        { "Error", ShouldBeInErrorState.Value },
                                                        { "ErrorText", ErrorMessage ?? string.Empty },
                                                    } : new())">
                    </MudSelectExtended>
                }
                else if (DropDownOptions != default && typeof(T) == typeof(int?))
                {
                    <MudSelectExtended id="@InputId"
                                       T="int?"
                                       @bind-Value="@NullableIntValue"
                                       SearchBox="@DropDownSearchBox"
                                       For="@(ForNullableInt)"
                                       Required="@IsRequired"
                                       Label="@LabelName"
                                       Disabled="IsDisabled"
                                       ReadOnly="IsReadOnly"
                                       Variant="Variant.Outlined"
                                       Margin="InputMargin"
                                       SearchBoxAutoFocus="@DropDownSearchBox"
                                       ToStringFunc="@(new Func<int?, string>(x => DropDownOptions.TryGetValue(x ?? 0, out var value) ? value : string.Empty))"
                                       ItemCollection="@DropDownOptions.Keys.Select(k => (int?)k).ToList()"
                                       Immediate="@ImmediateValueUpdate"
                                       Virtualize="true"
                                       Clearable="@(Clearable && !IsReadOnly && !IsDisabled)"
                                       @attributes="@(ShouldBeInErrorState.HasValue ? new Dictionary<string, object>
                                                    {
                                                        { "Error", ShouldBeInErrorState.Value },
                                                        { "ErrorText", ErrorMessage ?? string.Empty },
                                                    } :new())">
                    </MudSelectExtended>
                }
                else if (DropDownOptions != default && typeof(T) == typeof(HashSet<int>))
                {
                    <MudSelectExtended id="@InputId"
                                       T="int"
                                       MultiSelection="true"
                                       @bind-Value="@MultiSelectValue"
                                       @bind-SelectedValues="SelectedMultiSelectValues"
                                       SearchBox="@DropDownSearchBox"
                                       Required="@IsRequired"
                                       Label="@LabelName"
                                       Disabled="IsDisabled"
                                       ReadOnly="IsReadOnly"
                                       Variant="Variant.Outlined"
                                       Margin="InputMargin"
                                       SearchBoxAutoFocus="@DropDownSearchBox"
                                       MultiSelectionTextFunc="@GetIntMultiSelectionText"
                                       ToStringFunc="@(new Func<int, string>(x => DropDownOptions.TryGetValue(x, out var value) ? value : string.Empty))"
                                       ItemCollection="@DropDownOptions.Keys.ToList()"
                                       Immediate="@ImmediateValueUpdate"
                                       Virtualize="true"
                                       Clearable="@(Clearable && !IsReadOnly && !IsDisabled)"
                                       @attributes="@(ShouldBeInErrorState.HasValue ? new Dictionary<string, object>
                                                    {
                                                        { "Error", ShouldBeInErrorState.Value },
                                                        { "ErrorText", ErrorMessage ?? string.Empty },
                                                    } :new())">
                    </MudSelectExtended>

                }
                else if (LongIdDropDownOptions != default && typeof(T) == typeof(long?))
                {
                    <MudSelectExtended id="@InputId"
                                       T="long?"
                                       @bind-Value="@NullableLongValue"
                                       SearchBox="@DropDownSearchBox"
                                       For="@(ForNullableLong)"
                                       Required="@IsRequired"
                                       Label="@LabelName"
                                       Disabled="IsDisabled"
                                       ReadOnly="IsReadOnly"
                                       Variant="Variant.Outlined"
                                       Margin="InputMargin"
                                       SearchBoxAutoFocus="@DropDownSearchBox"
                                       ToStringFunc="@(new Func<long?, string>(x => LongIdDropDownOptions.TryGetValue(x ?? 0, out var value) ? value : string.Empty))"
                                       ItemCollection="@LongIdDropDownOptions.Keys.Select(k => (long?)k).ToList()"
                                       Immediate="@ImmediateValueUpdate"
                                       Virtualize="true"
                                       Clearable="@(Clearable && !IsReadOnly && !IsDisabled)"
                                       @attributes="@(ShouldBeInErrorState.HasValue ? new Dictionary<string, object>
                                                    {
                                                        { "Error", ShouldBeInErrorState.Value },
                                                        { "ErrorText", ErrorMessage ?? string.Empty },
                                                    } :new())">
                    </MudSelectExtended>
                }
                else if (LongIdDropDownOptions != default && typeof(T) == typeof(HashSet<long>))
                {
                    <MudSelectExtended id="@InputId"
                                       T="long"
                                       MultiSelection="true"
                                       @bind-Value="@MultiSelectLongValue"
                                       @bind-SelectedValues="SelectedMultiSelectLongValues"
                                       SearchBox="@DropDownSearchBox"
                                       Required="@IsRequired"
                                       Label="@LabelName"
                                       Disabled="IsDisabled"
                                       ReadOnly="IsReadOnly"
                                       Variant="Variant.Outlined"
                                       Margin="InputMargin"
                                       SearchBoxAutoFocus="@DropDownSearchBox"
                                       MultiSelectionTextFunc="@GetLongMultiSelectionText"
                                       ToStringFunc="@(new Func<long, string>(x => LongIdDropDownOptions.TryGetValue(x, out var value) ? value : string.Empty))"
                                       ItemCollection="@LongIdDropDownOptions.Keys.ToList()"
                                       Immediate="@ImmediateValueUpdate"
                                       Virtualize="true"
                                       Clearable="@(Clearable && !IsReadOnly && !IsDisabled)"
                                       @attributes="@(ShouldBeInErrorState.HasValue ? new Dictionary<string, object>
                                                    {
                                                        { "Error", ShouldBeInErrorState.Value },
                                                        { "ErrorText", ErrorMessage ?? string.Empty },
                                                    } :new())">
                    </MudSelectExtended>

                }
                else if (StringIdDropDownOptions != default && typeof(T) == typeof(string))
                {
                    @* Even though compiler says ?? string.Empty is not needed in ToStringFunc, it is needed. *@
                    <MudSelectExtended id="@InputId"
                                       T="string"
                                       @bind-Value="@NullableStringValue"
                                       For="@(ForNullableString)"
                                       SearchBox="@DropDownSearchBox"
                                       Required="@IsRequired"
                                       Label="@LabelName"
                                       Disabled="IsDisabled"
                                       ReadOnly="IsReadOnly"
                                       Variant="Variant.Outlined"
                                       Margin="InputMargin"
                                       SearchBoxAutoFocus="@DropDownSearchBox"
                                       ToStringFunc="@(new Func<string, string>(x => StringIdDropDownOptions.TryGetValue(x ?? string.Empty, out var value) ? value : string.Empty))"
                                       ItemCollection="@StringIdDropDownOptions.Keys.ToList()"
                                       Immediate="@ImmediateValueUpdate"
                                       Virtualize="true"
                                       Clearable="@(Clearable && !IsReadOnly && !IsDisabled)"
                                       @attributes="@(ShouldBeInErrorState.HasValue ? new Dictionary<string, object>
                                                    {
                                                        { "Error", ShouldBeInErrorState.Value },
                                                        { "ErrorText", ErrorMessage ?? string.Empty },
                                                    } :new())">
                    </MudSelectExtended>
                }
                else if (StringIdDropDownOptions != default && typeof(T) == typeof(HashSet<string>))
                {
                    //ToDo: For label is missing
                    @* Even though compiler says ?? string.Empty is not needed in ToStringFunc, it is needed. *@
                    <MudSelectExtended id="@InputId"
                                       T="string"
                                       MultiSelection="true"
                                       @bind-Value="@MultiSelectStringValue"
                                       @bind-SelectedValues="SelectedMultiSelectStringValues"
                                       SearchBox="@DropDownSearchBox"
                                       Required="@IsRequired"
                                       Label="@LabelName"
                                       Disabled="IsDisabled"
                                       ReadOnly="IsReadOnly"
                                       Variant="Variant.Outlined"
                                       Margin="InputMargin"
                                       SearchBoxAutoFocus="@DropDownSearchBox"
                                       MultiSelectionTextFunc="@(GetMultiSelectionText)"
                                       ToStringFunc="@(new Func<string, string>(x => StringIdDropDownOptions.TryGetValue(x ?? string.Empty, out var value) ? value : string.Empty))"
                                       ItemCollection="@StringIdDropDownOptions.Keys.ToList()"
                                       Immediate="@ImmediateValueUpdate"
                                       Virtualize="true"
                                       Clearable="@(Clearable && !IsReadOnly && !IsDisabled)"
                                       @attributes="@(ShouldBeInErrorState.HasValue ? new Dictionary<string, object>
                                                    {
                                                        { "Error", ShouldBeInErrorState.Value },
                                                        { "ErrorText", ErrorMessage ?? string.Empty },
                                                    } :new())">
                    </MudSelectExtended>
                }
                else if (typeof(T) == typeof(short)
                || typeof(T) == typeof(short?)
                || typeof(T) == typeof(ushort)
                || typeof(T) == typeof(ushort?)
                || typeof(T) == typeof(int)
                || typeof(T) == typeof(int?)
                || typeof(T) == typeof(uint)
                || typeof(T) == typeof(uint?)
                || typeof(T) == typeof(long)
                || typeof(T) == typeof(long?)
                || typeof(T) == typeof(ulong)
                || typeof(T) == typeof(ulong?)
                || typeof(T) == typeof(float)
                || typeof(T) == typeof(float?)
                || typeof(T) == typeof(double)
                || typeof(T) == typeof(double?)
                || typeof(T) == typeof(decimal)
                || typeof(T) == typeof(decimal?))
                {
                    <MudNumericField id="@InputId"
                                     @bind-Value="Value"
                                     For="@(For)"
                                     Required="@IsRequired"
                                     Label="@LabelName"
                                     Disabled="IsDisabled"
                                     ReadOnly="IsReadOnly"
                                     Variant="Variant.Outlined"
                                     Adornment="@Adornment"
                                     AdornmentText="@AdornmentText"
                                     Margin="InputMargin"
                                     Immediate="@ImmediateValueUpdate"
                                     Clearable="@(Clearable && !IsReadOnly && !IsDisabled)"
                                     @attributes="@(NumericFieldAttributes())" />
                }
                else if (IsNormalText())
                {
                    if (IsPassword)
                    {
                        <MudTextField id="@InputId"
                                      @bind-Value="Value"
                                      For="@(For)"
                                      Required="@IsRequired"
                                      InputType="InputType.Password"
                                      Label="@LabelName"
                                      Disabled="IsDisabled"
                                      ReadOnly="IsReadOnly"
                                      Variant="Variant.Outlined"
                                      Margin="InputMargin"
                                      Immediate="@ImmediateValueUpdate"
                                      Clearable="@(Clearable && !IsReadOnly && !IsDisabled)"
                                      @attributes="@(ShouldBeInErrorState.HasValue ? new Dictionary<string, object>
                                                   {
                                                       { "Error", ShouldBeInErrorState.Value },
                                                       { "ErrorText", ErrorMessage ?? string.Empty },
                                                   } :new())" />
                    }
                    else
                    {
                        <MudTextField id="@InputId"
                                      AutoGrow="@Autogrow"
                                      @bind-Value="Value" For="@(For)"
                                      Required="@IsRequired"
                                      Label="@LabelName"
                                      Disabled="IsDisabled"
                                      ReadOnly="IsReadOnly"
                                      Variant="Variant.Outlined"
                                      Margin="InputMargin"
                                      Immediate="@ImmediateValueUpdate"
                                      Clearable="@(Clearable && !IsReadOnly && !IsDisabled)"
                                      @attributes="@(ShouldBeInErrorState.HasValue ? new Dictionary<string, object>
                                                   {
                                                       { "Error", ShouldBeInErrorState.Value },
                                                       { "ErrorText", ErrorMessage ?? string.Empty },
                                                   } :new())" />
                    }
                }
                else if (typeof(T) == typeof(bool)
                || typeof(T) == typeof(bool?))
                {
                    <MudCheckBox id="@InputId"
                                 @bind-Value="@Value"
                                 For="@(For)"
                                 Required="@IsRequired"
                                 Disabled="IsDisabled"
                                 ReadOnly="IsReadOnly"
                                 Label="@LabelName"
                                 Dense="InputMargin == Margin.Dense"
                                 @attributes="@(ShouldBeInErrorState.HasValue ? new Dictionary<string, object>
                                              {
                                                  { "Error", ShouldBeInErrorState.Value },
                                                  { "ErrorText", ErrorMessage ?? string.Empty },
                                              } :new())">
                    </MudCheckBox>
                }
                else
                {
                    throw new ArgumentOutOfRangeException();
                }
            </div>
            @if (!string.IsNullOrEmpty(HelperText))
            {
                <div>
                    <small class="form-text text-muted">@HelperText</small>
                </div>
            }
        </div>
        @if (!string.IsNullOrEmpty(PostfixButtonStartIcon))
        {
            <div class="@($"p-{Padding}")">
                <MudFab Disabled="@ButtonDisplayedAsDisabled"
                        StartIcon="@PostfixButtonStartIcon"
                        ButtonType="ButtonType.Button"
                        Color="Color.Primary"
                        @onclick="InvokeOnButtonClicked"
                        Size="@(InputMargin == Margin.Dense ? Size.Small : Size.Medium)">
                </MudFab>
            </div>
        }
    </div>
}


@code {

    [Parameter]
    public Expression<Func<T?>>? For { get; set; }

    [Parameter]
    public bool? ShouldBeInErrorState { get; set; }

    [Parameter]
    public string? ErrorMessage { get; set; }

    [Parameter]
    public int Padding { get; set; } = 2;

    [Parameter]
    public string InputId { get; set; } = Guid.NewGuid().ToString();

    [Parameter]
    public bool Autogrow { get; set; } = true;

    private string MarginClass => Constants.DefaultMargin;
    private Margin InputMargin => Constants.InputMargin;

    private int InputWidth => string.IsNullOrEmpty(PostfixButtonStartIcon) ? 12 : 10;
    private int ButtonWidth => 12 - InputWidth;
    private bool ButtonDisplayedAsDisabled
    {
        get
        {
            if (IsButtonDisabled != default)
            {
                return IsButtonDisabled == true;
            }
            return IsDisabled;
        }
    }


    private bool? _isReadOnlyParameter;

    private IDictionary<string, object> NumericFieldAttributes()
    {
        var attributes = new Dictionary<string, object>();

        if (ShouldBeInErrorState.HasValue)
        {
            attributes["Error"] = ShouldBeInErrorState.Value;
            attributes["ErrorText"] = ErrorMessage ?? string.Empty;
        }

        return attributes;
    }

    private Expression<Func<DateTime?>>? ForDateTime
    {
        get
        {
            if (typeof(T) == typeof(DateTime?) && For != null)
            {
                return (Expression<Func<DateTime?>>)(object)For;
            }
            return null;
        }
        set => throw new NotImplementedException($"{nameof(ForDateTime)} can not be set.");
    }

    private Expression<Func<TimeSpan?>>? ForTimeSpan
    {
        get
        {
            if (typeof(T) == typeof(TimeSpan?) && For != null)
            {
                return (Expression<Func<TimeSpan?>>)(object)For;
            }
            return null;
        }
        set => throw new NotImplementedException($"{nameof(ForTimeSpan)} can not be set.");
    }

    private int MultiSelectValue { get; set; } = 0;

    private long MultiSelectLongValue { get; set; } = 0;

    private string MultiSelectStringValue { get; set; } = string.Empty;

    private Expression<Func<HashSet<int>>> ForMultiSelectValues
    {
        get
        {
            if (typeof(T) == typeof(HashSet<int>) && For != null)
            {
                return (Expression<Func<HashSet<int>>>)(object)For;
            }
            throw new InvalidCastException();
        }
        set => throw new NotImplementedException($"{nameof(ForMultiSelectValues)} can not be set.");
    }

    private Expression<Func<string?>> ForNullableString
    {
        get
        {
            if (typeof(T) == typeof(string) && For != null)
            {
                return (Expression<Func<string?>>)(object)For;
            }
            throw new InvalidCastException();
        }
        set => throw new NotImplementedException($"{nameof(ForNullableString)} can not be set.");
    }

    private Expression<Func<int?>> ForNullableInt
    {
        get
        {
            if (typeof(T) == typeof(int?) && For != null)
            {
                return (Expression<Func<int?>>)(object)For;
            }
            throw new InvalidCastException();
        }
        set => throw new NotImplementedException($"{nameof(ForNullableInt)} can not be set.");
    }

    private Expression<Func<long?>> ForNullableLong
    {
        get
        {
            if (typeof(T) == typeof(long?) && For != null)
            {
                return (Expression<Func<long?>>)(object)For;
            }
            throw new InvalidCastException();
        }
        set => throw new NotImplementedException($"{nameof(ForNullableLong)} can not be set.");
    }

    private string GetEnumDisplayName(T enumValue)
    {
        if (enumValue == null)
        {
            return string.Empty;
        }

        var enumType = enumValue.GetType();
        var enumMemberName = enumValue.ToString() ?? string.Empty;
        var memberInfo = enumType.GetMember(enumMemberName).FirstOrDefault();
        if (memberInfo != null)
        {
            var displayAttribute = memberInfo.GetCustomAttribute<DisplayAttribute>();
            if (displayAttribute != null && !string.IsNullOrEmpty(displayAttribute.Name))
            {
                return displayAttribute.Name;
            }

            var descriptionAttribute = memberInfo.GetCustomAttribute<DescriptionAttribute>();
            if (descriptionAttribute != null && !string.IsNullOrEmpty(descriptionAttribute.Description))
            {
                return descriptionAttribute.Description;
            }
        }
        var friendlyName = StringHelper.GenerateFriendlyStringWithOutIdSuffix(enumMemberName);
        return friendlyName;
    }

    [Parameter]
    public Dictionary<int, string>? DropDownOptions { get; set; }

    [Parameter]
    public Dictionary<long, string>? LongIdDropDownOptions { get; set; }

    [Parameter]
    public Dictionary<string, string>? StringIdDropDownOptions { get; set; }

    [Parameter]
    public string? PrefixText { get; set; }

    [Parameter]
    public string? PostfixText { get; set; }

    [Parameter]
    public string? PostfixButtonStartIcon { get; set; }

    [Parameter]
    public bool? IsButtonDisabled { get; set; }

    [Parameter]
    public bool IsPassword { get; set; }

    [Parameter]
    public bool DisplayMultiSelectValues { get; set; }

    [Parameter]
    public EventCallback OnButtonClicked { get; set; }

    [Parameter]
    public EventCallback<T> OnValueChanged { get; set; }

    [Parameter]
    public string? LabelName { get; set; }

    [Parameter]
    public bool? IsDisabledParameter { get; set; }

    [Parameter]
    public bool? IsRequiredParameter { get; set; }

    [Parameter]
    public bool? IsReadOnlyParameter
    {
        get => _isReadOnlyParameter;
        set
        {
            if (_isReadOnlyParameter != value && _componentRenderedCounter > 0)
            {
                _isReadOnlyParameter = value;
                OnAfterRender(true);
            }
            else
            {
                _isReadOnlyParameter = value;
            }
        }
    }

    [Parameter]
    public string? HelperText { get; set; }

    [Parameter]
    public bool ImmediateValueUpdate { get; set; }

    [Parameter]
    public bool Clearable { get; set; }

    [Parameter]
    public bool DropDownSearchBox { get; set; }

    private string? AdornmentText { get; set; }
    private bool IsRequired { get; set; }
    private bool IsDisabled { get; set; }
    private bool IsReadOnly { get; set; }
    private Adornment Adornment { get; set; }

    private int _componentRenderedCounter = 0;

    private IEnumerable<int> SelectedMultiSelectValues
    {
        get
        {
            if (Value is HashSet<int> selectedValues)
            {
                return selectedValues;
            }
            else
            {
                throw new NotImplementedException();
            }
        }
        set => Value = (T)value;
    }

    private IEnumerable<long> SelectedMultiSelectLongValues
    {
        get
        {
            if (Value is HashSet<long> selectedValues)
            {
                return selectedValues;
            }
            else
            {
                throw new NotImplementedException();
            }
        }
        set => Value = (T)value;
    }

    private IEnumerable<string> SelectedMultiSelectStringValues
    {
        get
        {
            if (Value is HashSet<string> selectedValues)
            {
                return selectedValues;
            }
            else
            {
                throw new NotImplementedException();
            }
        }
        set => Value = (T)value;
    }

    private string? NullableStringValue
    {
        get
        {
            if (typeof(T) == typeof(string) && Value != null)
            {
                return (string?)(object)Value;
            }
            if (Value == null)
            {
                return null;
            }
            throw new NotImplementedException();
        }
        set
        {
            if (value != default)
            {
                Value = (T)(object)value;
            }
            else
            {
                Value = default;
            }
        }
    }

    private int? NullableIntValue
    {
        get
        {
            if (typeof(T) == typeof(int?) && Value != null)
            {
                return (int?)(object)Value;
            }
            if (Value == null)
            {
                return null;
            }
            throw new NotImplementedException();
        }
        set
        {
            if (value != default)
            {
                Value = (T)(object)value;
            }
            else
            {
                Value = default;
            }
        }
    }

    private long? NullableLongValue
    {
        get
        {
            if (typeof(T) == typeof(long?) && Value != null)
            {
                return (long?)(object)Value;
            }
            if (Value == null)
            {
                return null;
            }
            throw new NotImplementedException();
        }
        set
        {
            if (value != default)
            {
                Value = (T)(object)value;
            }
            else
            {
                Value = default;
            }
        }
    }

    private DateTime? DateValue
    {
        get
        {
            if (Value is DateTime dateTime)
            {
                return dateTime;
            }
            return default;
        }
        set
        {
            if (value != default)
            {
                Value = (T)(object)value;
            }
            else
            {
                Value = default;
            }
        }
    }

    private TimeSpan? TimeSpanValue
    {
        get
        {
            if (Value is TimeSpan timeSpan)
            {
                return timeSpan;
            }
            return default;
        }
        set
        {
            if (value != default)
            {
                Value = (T)(object)value;
            }
            else
            {
                Value = default;
            }
        }
    }

    private T? Value
    {
        get => For == default ? default : For.Compile().Invoke();
        set
        {
            if (For == default)
            {
                return;
            }
            // Ensure the body of the expression is a MemberAccess
            if (!(For.Body is MemberExpression memberExpression))
            {
                throw new InvalidOperationException("The expression does not represent member access.");
            }

            // Extract the property
            var property = memberExpression.Member as PropertyInfo;
            if (property == null)
            {
                throw new InvalidOperationException("The member in the expression is not a property.");
            }

            // Extract the target object
#pragma warning disable CS8604
            var lambda = Expression.Lambda(memberExpression.Expression, For.Parameters);
#pragma warning restore CS8604
            var target = lambda.Compile().DynamicInvoke();

            // Set the value
            property.SetValue(target, value);

            OnValueChanged.InvokeAsync(Value);
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        _componentRenderedCounter++;
    }

    protected override void OnParametersSet()
    {
        if (For == default)
        {
            throw new ArgumentException("Expression body is null");
        }
        if (For.Body is not MemberExpression member)
        {
            throw new ArgumentException($"Expression '{For}' refers to a method, not a property.");
        }

        if (member.Member is not PropertyInfo propertyInfo)
        {
            throw new ArgumentException($"Expression '{For}' refers to a field, not a property.");
        }

        //Only set label name based on property name / display name attribute if not already set via parameter
        LabelName ??= StringHelper.GetDisplayNameFor(For!);

        IsRequired = IsRequiredParameter ?? propertyInfo.GetCustomAttributes(true).OfType<RequiredAttribute>().Any();
        if (IsReadOnlyParameter == true)
        {
            IsReadOnly = true;
        }
        else
        {
            IsReadOnly = false;
            IsDisabled = IsDisabledParameter ?? propertyInfo.GetCustomAttributes(true).OfType<DisabledAttribute>().Any();
        }

        var helperText = StringHelper.GetHelperTextFor(For!);
        if (!string.IsNullOrWhiteSpace(helperText))
        {
            HelperText = helperText;
        }


        var postfixAttribute = propertyInfo.GetCustomAttributes<PostfixAttribute>(false).SingleOrDefault();
        var prefixAttribute = propertyInfo.GetCustomAttributes<PrefixAttribute>(false).SingleOrDefault();


        if (postfixAttribute != default)
        {
            AdornmentText = postfixAttribute.Postfix;
            Adornment = Adornment.End;
        }
        else if (prefixAttribute != default)
        {
            AdornmentText = prefixAttribute.Prefix;
            Adornment = Adornment.Start;
        }
        else if (PostfixText != default)
        {
            AdornmentText = PostfixText;
            Adornment = Adornment.End;
        }
        else if (PrefixText != default)
        {
            AdornmentText = PrefixText;
            Adornment = Adornment.Start;
        }
        else
        {
            Adornment = Adornment.None;
        }
        StateHasChanged();
    }

    private string GetIntMultiSelectionText(List<int> selectedValues)
    {
        if (DisplayMultiSelectValues && selectedValues.Count > 0)
        {
            if (DropDownOptions != null)
            {
                try
                {
                    return string.Join("; ", selectedValues.Select(x => DropDownOptions[Convert.ToInt32(x)]));
                }
                catch (Exception)
                {
                    // ignored
                }
            }
        }

        return GetMultiSelectionTextWithoutValues(selectedValues.Count, DropDownOptions?.Count);
    }

    private string GetLongMultiSelectionText(List<long> selectedValues)
    {
        if (DisplayMultiSelectValues && selectedValues.Count > 0)
        {
            if (LongIdDropDownOptions != null)
            {
                try
                {
                    return string.Join("; ", selectedValues.Select(x => LongIdDropDownOptions[Convert.ToInt64(x)]));
                }
                catch (Exception)
                {
                    // ignored
                }
            }
        }

        return GetMultiSelectionTextWithoutValues(selectedValues.Count, LongIdDropDownOptions?.Count);
    }

    private string GetMultiSelectionText(List<string> selectedValues)
    {
        if (DisplayMultiSelectValues && selectedValues.Count > 0)
        {
            if (StringIdDropDownOptions != null)
            {
                try
                {
                    return string.Join("; ", selectedValues.Select(x => StringIdDropDownOptions[x]));
                }
                catch (Exception)
                {
                    // ignored
                }
            }
        }
        return GetMultiSelectionTextWithoutValues(selectedValues.Count, StringIdDropDownOptions?.Count);
    }

    private string GetMultiSelectionTextWithoutValues(int selectedValues, int? availableOptions)
    {
        var ofText = availableOptions == null ? string.Empty : $"/{availableOptions}";
        return $"{selectedValues}{ofText} item{(selectedValues == 1 ? " has" : "s have")} been selected";
    }

    private void InvokeOnButtonClicked()
    {
        OnButtonClicked.InvokeAsync();
    }

    private bool IsNormalText()
    {
        return ((StringIdDropDownOptions == default)
                && (typeof(T) == typeof(string)
                    || typeof(T) == typeof(char)
                    || typeof(T) == typeof(char?)));
    }

    public void RefreshComponent()
    {
        this.StateHasChanged();
    }

}