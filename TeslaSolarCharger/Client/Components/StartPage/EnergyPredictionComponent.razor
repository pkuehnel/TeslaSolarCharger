@page "/Prediction"

@using TeslaSolarCharger.Client.Services.Contracts
@using ApexCharts
@using TeslaSolarCharger.Client.Dtos
@using TeslaSolarCharger.Client.Helper.Contracts
@using TeslaSolarCharger.Shared.Contracts
@using TeslaSolarCharger.Shared.Resources.Contracts
@using Color = MudBlazor.Color
@using Size = MudBlazor.Size

@inject IEnergyDataService EnergyDataService
@inject TimeProvider TimeProvider
@inject ISnackbar Snackbar
@inject IChartWidthCalculator ChartWidthCalculator
@inject IApexChartHelper ApexChartHelper
@inject IConstants Constants
@inject IDateTimeProvider DateTimeProvider

@implements IDisposable

<MudExpansionPanels>
    <MudExpansionPanel ExpandedChanged="isExpanded => ExpandedChanged(isExpanded)">
        <TitleContent>
            @{
                // Set labels and values based on the SelectedDate.
                string leftLabel;
                string rightLabel;
                RenderFragment leftValue;
                RenderFragment rightValue;

                if (SelectedDate == TimeProvider.GetLocalNow().Date)
                {
                    leftLabel = "Prediction from now:";
                    rightLabel = "Produced today:";

                    leftValue = SolarPredictionData != null
                    ? @<span class="d-block text-md-start">@($"{SolarPredictionData.Where(v => v.Key > TimeProvider.GetLocalNow().Hour).Sum(v => v.Value ?? 0):F1} kWh")</span>
                        : @<div class="d-flex justify-content-start w-100">
                        <MudSkeleton Width="100px" Height="24px" />
                    </div>;

                    rightValue = SolarActualData != null
                    ? @<span class="d-block text-md-end">@($"{SolarActualData.Sum(v => v.Value ?? 0):F1} kWh")</span>
                        : @<div class="d-flex justify-content-end w-100">
                        <MudSkeleton Width="100px" Height="24px" />
                    </div>;
                }
                else if (SelectedDate < TimeProvider.GetLocalNow().Date)
                {
                    leftLabel = "Estimated Production:";
                    rightLabel = "Actual Production:";

                    leftValue = SolarPredictionData != null
                    ? @<span class="d-block text-md-start">@($"{SolarPredictionData.Sum(v => v.Value ?? 0):F1} kWh")</span>
                        : @<div class="d-flex justify-content-start w-100">
                        <MudSkeleton Width="100px" Height="24px" />
                    </div>;

                    rightValue = SolarActualData != null
                    ? @<span class="d-block text-md-end">@($"{SolarActualData.Sum(v => v.Value ?? 0):F1} kWh")</span>
                        : @<div class="d-flex justify-content-end w-100">
                        <MudSkeleton Width="100px" Height="24px" />
                    </div>;
                }
                else
                {
                    leftLabel = "Solar Prediction:";
                    rightLabel = "House Prediction:";

                    leftValue = SolarPredictionData != null
                    ? @<span class="d-block text-md-start">@($"{SolarPredictionData.Sum(v => v.Value ?? 0):F1} kWh")</span>
                        : @<div class="d-flex justify-content-start w-100">
                        <MudSkeleton Width="100px" Height="24px" />
                    </div>;

                    rightValue = HousePredictionData != null
                    ? @<span class="d-block text-md-end">@($"{HousePredictionData.Sum(v => v.Value ?? 0):F1} kWh")</span>
                        : @<div class="d-flex justify-content-end w-100">
                        <MudSkeleton Width="100px" Height="24px" />
                    </div>;
                }
            }
            <!-- Outer container that stacks on small screens and arranges items in a row on md+ screens -->
            <div class="d-flex flex-column flex-md-row align-items-center justify-content-between">
                <!-- Left Section -->
                @if (_isSolarPredictionEnabled)
                {
                    <div class="flex-fill text-md-start text-center mb-3 mb-md-0">
                        <span class="fw-bold">@leftLabel</span>
                        <div>@leftValue</div>
                    </div>
                }


                <!-- Center Section: Date input with navigation buttons -->
                <div class="flex-fill text-center mb-3 mb-md-0">
                    <div class="d-flex justify-content-center align-items-center">
                        <MudFab StartIcon="@Icons.Material.Filled.ArrowLeft"
                                Color="Color.Primary"
                                Size="Size.Small"
                                OnClick="PreviousDay"
                                Disabled="IsPreviousDisabled" />
                        <GenericInput T="DateTime?"
                                      For="() => SelectedDate"
                                      LabelName="Date"
                                      OnValueChanged="newDate => SelectedDateChanged(newDate)" />
                        <MudFab StartIcon="@Icons.Material.Filled.ArrowRight"
                                Color="Color.Primary"
                                Size="Size.Small"
                                OnClick="NextDay"
                                Disabled="IsNextDisabled" />
                    </div>
                </div>

                <!-- Right Section -->
                <div class="flex-fill text-md-end text-center">
                    <span class="fw-bold">@rightLabel</span>
                    <div>@rightValue</div>
                </div>
            </div>
        </TitleContent>
        <ChildContent>
            @if (HousePredictionData == default
                        || SolarActualData == default
                        || HouseActualData == default
                        || BatteryDischargingData == default
                        || PowerFromGridData == default
                        || BatteryChargingData == default
                        || PowerToGridData == default
                        || BatterySoc == default
                        || (SolarPredictionData == default && _isSolarPredictionEnabled)
                        || !_dataLoaded)
            {
                <div class="align-items-center justify-content-center mb-3">
                    <PlaceholderComponent Height="@($"{ChartHeightValue + 20}px")"></PlaceholderComponent>
                </div>
                <div class="align-items-center justify-content-center mb-3">
                    <PlaceholderComponent Height="@($"{ChartHeightValue + 20}px")"></PlaceholderComponent>
                </div>
            }
            else
            {
                <!-- Consumption Chart -->
                <div class="d-flex align-items-center justify-content-center mb-2">
                    <ApexChart TItem="DtoChartValue<int, decimal?>"
                               Title="Consumption"
                               Options="_consumptionOptions"
                               Width="@ChartWidthCalculator.ChartWidth"
                               Height="@ChartHeight"
                               XAxisType="XAxisType.Numeric"
                               FormatXAxisLabel="@(arg => arg.ToString("N0"))"
                               FormatYAxisLabel="@(arg => arg.ToString("F1"))"
                               @ref="_consumptionChart">

                        <!-- House Prediction Line -->
                        <ApexPointSeries TItem="DtoChartValue<int, decimal?>"
                                         Items="HousePredictionData"
                                         Name="@($"House Prediction ({(HousePredictionData.Sum(v => v.Value ?? 0)).ToString("F1")} kWh)")"
                                         SeriesType="SeriesType.Line"
                                         XValue="@(e => e.Key)"
                                         YValue="@(e => e.Value)"
                                         Color="@Constants.HomeConsumptionColor" />

                        <ApexPointSeries TItem="DtoChartValue<int, decimal?>"
                                         Items="BatterySoc"
                                         Name="@("Home Battery SoC %")"
                                         SeriesType="SeriesType.Line"
                                         XValue="@(e => e.Key)"
                                         YValue="@(e => e.Value)"
                                         Color="@Constants.BatteryColor" />

                        <ApexPointSeries TItem="DtoChartValue<int, decimal?>"
                                         Items="HouseActualData"
                                         Name="@($"House Actual ({(HouseActualData.Sum(v => v.Value ?? 0)).ToString("F1")} kWh)")"
                                         SeriesType="SeriesType.Line"
                                         XValue="@(e => e.Key)"
                                         YValue="@(e => e.Value)"
                                         Color="@Constants.HomeConsumptionColor"
                                         Group="consumption-stack" />

                        <ApexPointSeries TItem="DtoChartValue<int, decimal?>"
                                         Items="BatteryDischargingData"
                                         Name="@($"Battery Discharge ({(BatteryDischargingData.Sum(v => v.Value ?? 0)).ToString("F1")} kWh)")"
                                         SeriesType="SeriesType.Line"
                                         XValue="@(e => e.Key)"
                                         YValue="@(e => e.Value)"
                                         Color="@Constants.BatteryColor"
                                         Group="consumption-stack" />

                        <ApexPointSeries TItem="DtoChartValue<int, decimal?>"
                                         Items="PowerFromGridData"
                                         Name="@($"Grid Import ({(PowerFromGridData.Sum(v => v.Value ?? 0)).ToString("F1")} kWh)")"
                                         SeriesType="SeriesType.Line"
                                         XValue="@(e => e.Key)"
                                         YValue="@(e => e.Value)"
                                         Color="@Constants.GridColor"
                                         Group="consumption-stack" />

                    </ApexChart>
                </div>

                <!-- Production Chart -->
                <div class="d-flex align-items-center justify-content-center mb-3">
                    <ApexChart TItem="DtoChartValue<int, decimal?>"
                               Title="Production"
                               Options="_productionOptions"
                               Width="@ChartWidthCalculator.ChartWidth"
                               Height="@ChartHeight"
                               XAxisType="XAxisType.Numeric"
                               FormatXAxisLabel="@(arg => arg.ToString("N0"))"
                               FormatYAxisLabel="@(arg => arg.ToString("F1"))"
                               @ref="_productionChart">

                        <!-- Solar Prediction Line -->
                        @if (SolarPredictionData != default)
                        {
                            <ApexPointSeries TItem="DtoChartValue<int, decimal?>"
                                             Items="SolarPredictionData"
                                             Name="@($"Solar Prediction ({(SolarPredictionData.Sum(v => v.Value ?? 0)).ToString("F1")} kWh)")"
                                             SeriesType="SeriesType.Line"
                                             XValue="@(e => e.Key)"
                                             YValue="@(e => e.Value)"
                                             Color="@Constants.SolarPowerColor" />
                        }

                        <ApexPointSeries TItem="DtoChartValue<int, decimal?>"
                                         Items="BatterySoc"
                                         Name="@("Home Battery SoC %")"
                                         SeriesType="SeriesType.Line"
                                         XValue="@(e => e.Key)"
                                         YValue="@(e => e.Value)"
                                         Color="@Constants.BatteryColor" />

                        <ApexPointSeries TItem="DtoChartValue<int, decimal?>"
                                         Items="SolarActualData"
                                         Name="@($"Solar Actual ({(SolarActualData.Sum(v => v.Value ?? 0)).ToString("F1")} kWh)")"
                                         SeriesType="SeriesType.Line"
                                         XValue="@(e => e.Key)"
                                         YValue="@(e => e.Value)"
                                         Color="@Constants.SolarPowerColor"
                                         Group="production-stack"/>

                        <ApexPointSeries TItem="DtoChartValue<int, decimal?>"
                                         Items="BatteryChargingData"
                                         Name="@($"Battery Charging ({(BatteryChargingData.Sum(v => v.Value ?? 0)).ToString("F1")} kWh)")"
                                         SeriesType="SeriesType.Line"
                                         XValue="@(e => e.Key)"
                                         YValue="@(e => e.Value)"
                                         Color="@Constants.BatteryColor"
                                         Group="production-stack" />

                        <ApexPointSeries TItem="DtoChartValue<int, decimal?>"
                                         Items="PowerToGridData"
                                         Name="@($"Grid Export ({(PowerToGridData.Sum(v => v.Value ?? 0)).ToString("F1")} kWh)")"
                                         SeriesType="SeriesType.Line"
                                         XValue="@(e => e.Key)"
                                         YValue="@(e => e.Value)"
                                         Color="@Constants.GridColor"
                                         Group="production-stack" />
                    </ApexChart>
                </div>
            }
        </ChildContent>
    </MudExpansionPanel>
</MudExpansionPanels>

@code {
    private List<DtoChartValue<int, decimal?>>? SolarPredictionData { get; set; }
    private List<DtoChartValue<int, decimal?>>? HousePredictionData { get; set; }
    private List<DtoChartValue<int, decimal?>>? SolarActualData { get; set; }
    private List<DtoChartValue<int, decimal?>>? HouseActualData { get; set; }

    private List<DtoChartValue<int, decimal?>>? BatteryDischargingData { get; set; }
    private List<DtoChartValue<int, decimal?>>? PowerFromGridData { get; set; }
    private List<DtoChartValue<int, decimal?>>? PowerToGridData { get; set; }
    private List<DtoChartValue<int, decimal?>>? BatteryChargingData { get; set; }
    private List<DtoChartValue<int, decimal?>>? BatterySoc { get; set; }

    private DateTime? SelectedDate { get; set; }
    private DateTime MaxAllowedDate => TimeProvider.GetLocalNow().Date.AddDays(7);
    private ApexChartOptions<DtoChartValue<int, decimal?>>? _consumptionOptions;
    private ApexChartOptions<DtoChartValue<int, decimal?>>? _productionOptions;
    private bool _isSolarPredictionEnabled;
    private bool _dataLoaded;
    private ApexChart<DtoChartValue<int, decimal?>>? _consumptionChart;
    private ApexChart<DtoChartValue<int, decimal?>>? _productionChart;

    private int ChartHeightValue { get; set; } = 400;
    private string ChartHeight => $"{ChartHeightValue}px";
    private CancellationTokenSource _refreshCancellationTokenSource = new CancellationTokenSource();

    private enum ChartType
    {
        Consumption,
        Production,
    }

    protected override async Task OnInitializedAsync()
    {
        var currentTime = TimeProvider.GetLocalNow();
        SelectedDate = currentTime.Date;
        await base.OnInitializedAsync();
        _isSolarPredictionEnabled = await EnergyDataService.SolarPowerPredictionEnabled();
        await InvokeAsync(() => StateHasChanged());

        // Configure consumption chart options
        _consumptionOptions = GetChartOptions(ChartType.Consumption);

        // Configure production chart options
        _productionOptions = GetChartOptions(ChartType.Production);

        await RefreshData(DateOnly.FromDateTime(SelectedDate.Value));
    }

    private ApexChartOptions<DtoChartValue<int, decimal?>> GetChartOptions(ChartType chartType)
    {
        var options = ApexChartHelper.GetDefaultChartOptions<DtoChartValue<int, decimal?>>();
        options.Chart.Stacked = false;
        // options.Chart.StackType = StackType.Normal;
        options.Chart.Height = ChartHeightValue;
        options.Yaxis = new List<YAxis>
        {
            new YAxis
            {
                Min = 0,
                Title = new AxisTitle { Text = "kWh" },
            },
            new YAxis
            {
                Opposite = true,
                Min = 0,
                Max = 100,
                Title = new AxisTitle { Text = "%" },
                DecimalsInFloat = 0,
                SeriesName = new SeriesName()
                {
                    "Home Battery SoC %",
                },
            },
        };
        var markerSizes = new List<double>();
        var fillTypes = new List<FillType>();
        var opacities = new List<double>();
        var strokeWidths = new List<double>();

        var numberOfLineCharts = 4;
        if (chartType == ChartType.Consumption)
        {
            numberOfLineCharts++;
        }
        else if (chartType == ChartType.Production)
        {
            if (_isSolarPredictionEnabled)
            {
                numberOfLineCharts++;
            }
        }

        for (var i = 0; i < numberOfLineCharts; i++)
        {
            markerSizes.Add(2);
            fillTypes.Add(FillType.Solid);
            opacities.Add(0.2);
            strokeWidths.Add(1);
        }

        options.Markers = new Markers
        {
            Size = markerSizes,
            Hover = new()
            {
                SizeOffset = 5,
            },
        };
        options.Fill = new Fill
        {
            Type = fillTypes,
            Opacity = opacities,
        };
        options.Stroke = new Stroke
        {
            Width = strokeWidths, // Only line has stroke
            Curve = Curve.Smooth,
        };
        options.Tooltip = new Tooltip
        {
            Shared = true,
        };

        return options;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ChartWidthCalculator.ChartWidthChanged += OnChartWidthChangedAsync;
            await ChartWidthCalculator.InitAsync();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task RefreshData(DateOnly date)
    {
        // Cancel any ongoing refresh tasks.
        _refreshCancellationTokenSource.Cancel();
        _refreshCancellationTokenSource.Dispose();
        _refreshCancellationTokenSource = new CancellationTokenSource();
        CancellationToken token = _refreshCancellationTokenSource.Token;

        _dataLoaded = false;
        HousePredictionData = default;
        SolarPredictionData = default;
        HouseActualData = default;
        SolarActualData = default;
        BatteryDischargingData = default;
        PowerFromGridData = default;
        PowerToGridData = default;
        BatteryChargingData = default;

        try
        {
            // Start all tasks
            var housePredictionTask = EnergyDataService.GetPredictedHouseConsumptionByLocalHour(date, token);
            var solarActualTask = EnergyDataService.GetActualSolarProductionByLocalHour(date, token);
            var houseActualTask = EnergyDataService.GetActualHouseConsumptionByLocalHour(date, token);
            var gridFromTask = EnergyDataService.GetActualPowerFromGridByLocalHour(date, token);
            var gridToTask = EnergyDataService.GetActualPowerToGridByLocalHour(date, token);
            var batteryChargingTask = EnergyDataService.GetActualHomeBatteryChargingPowerByLocalHour(date, token);
            var batteryDischargingTask = EnergyDataService.GetActualHomeBatteryDischargingPowerByLocalHour(date, token);
            var batterySocTask = EnergyDataService.GetActualHomeBatterySocByLocalHour(date, token);

            if (_isSolarPredictionEnabled)
            {
                var solarPredictionTask = EnergyDataService.GetPredictedSolarProductionByLocalHour(date, token);
                var solarPredictionData = await solarPredictionTask;
                token.ThrowIfCancellationRequested();
                SolarPredictionData = solarPredictionData
                    .Select(e => new DtoChartValue<int, decimal?>(e.Key, new(e.Value / 1000.0)))
                    .ToList();
            }

            // Wait for all tasks
            var housePredictionData = await housePredictionTask;
            token.ThrowIfCancellationRequested();
            var solarActualData = await solarActualTask;
            token.ThrowIfCancellationRequested();
            var houseActualData = await houseActualTask;
            token.ThrowIfCancellationRequested();
            var gridFromData = await gridFromTask;
            token.ThrowIfCancellationRequested();
            var gridToData = await gridToTask;
            token.ThrowIfCancellationRequested();
            var batteryChargingDataRaw = await batteryChargingTask;
            token.ThrowIfCancellationRequested();
            var batteryDischargingDataRaw = await batteryDischargingTask;
            token.ThrowIfCancellationRequested();
            var batterySocData = await batterySocTask;
            token.ThrowIfCancellationRequested();

            // Convert prediction data
            HousePredictionData = housePredictionData
                .Select(e => new DtoChartValue<int, decimal?>(e.Key, new(e.Value / 1000.0)))
                .ToList();

            // Calculate stacked area data
            var hours = Enumerable.Range(0, 24).ToList();

            BatteryDischargingData = new();
            PowerFromGridData = new();
            PowerToGridData = new ();
            BatteryChargingData = new ();
            BatterySoc = new();
            SolarActualData = new();
            HouseActualData = new();

            foreach (var hour in hours)
            {
                var gridFrom = gridFromData.ContainsKey(hour) ? gridFromData[hour] / 1000.0 : (double?)null;
                var gridTo = gridToData.ContainsKey(hour) ? gridToData[hour] / 1000.0 : (double?)null;
                var batteryCharging = batteryChargingDataRaw.ContainsKey(hour) ? batteryChargingDataRaw[hour] / 1000.0 : (double?)null;
                var batteryDischarging = batteryDischargingDataRaw.ContainsKey(hour) ? batteryDischargingDataRaw[hour] / 1000.0 : (double?)null;
                var solarActual = solarActualData.ContainsKey(hour) ? batteryDischargingDataRaw[hour] / 1000.0 : (double?)null;
                var houseActual = houseActualData.ContainsKey(hour) ? batteryDischargingDataRaw[hour] / 1000.0 : (double?)null;

                var dateTime = new DateTime(date.Year, date.Month, date.Day, hour, 0, 0);
                var currentDate = DateTimeProvider.Now();
                var batterySoc = (batterySocData.ContainsKey(hour) && (currentDate > dateTime)) ? batterySocData[hour] : (decimal?)null;

                
                if (solarActualData.Any())
                {
                    SolarActualData.Add(new(hour, (decimal?)solarActual));
                }
                if (houseActualData.Any())
                {
                    HouseActualData.Add(new(hour, (decimal?)houseActual));
                }
                if (batteryChargingDataRaw.Any())
                {
                    BatteryDischargingData.Add(new(hour, (decimal?)batteryDischarging));
                }
                if (gridFromData.Any())
                {
                    PowerFromGridData.Add(new(hour, (decimal?)gridFrom));
                }
                if (batterySocData.Any())
                {
                    BatterySoc.Add(new(hour, batterySoc));
                }

                // For production chart - show where solar production goes (as positive values)
                if (gridToData.Any())
                {
                    PowerToGridData.Add(new(hour, (decimal?)gridTo));
                }
                if (batteryChargingDataRaw.Any())
                {
                    BatteryChargingData.Add(new(hour, (decimal?)batteryCharging));
                }
            }

            _dataLoaded = true;

            if (_consumptionChart != null)
            {
                await _consumptionChart.UpdateSeriesAsync();
            }

            if (_productionChart != null)
            {
                await _productionChart.UpdateSeriesAsync();
            }

            StateHasChanged();
        }
        catch (OperationCanceledException)
        {
            // The refresh was canceled. Optionally log or handle the cancellation.
        }
    }

    private void PreviousDay()
    {
        if (SelectedDate == default)
        {
            return;
        }
        SelectedDate = SelectedDate.Value.AddDays(-1);
    }

    private void NextDay()
    {
        if (SelectedDate == default)
        {
            return;
        }
        if (SelectedDate < MaxAllowedDate)
        {
            SelectedDate = SelectedDate.Value.AddDays(1);
        }
    }

    private bool IsPreviousDisabled => false; // No limit for going back
    private bool IsNextDisabled => SelectedDate >= MaxAllowedDate;

    private async Task SelectedDateChanged(DateTime? newDate)
    {
        if (newDate == default)
        {
            return;
        }

        if (SelectedDate > MaxAllowedDate)
        {
            Snackbar.Add("Cannot select a date more than one day in the future", Severity.Error);
            return;
        }
        SelectedDate = newDate;
        await RefreshData(DateOnly.FromDateTime(newDate.Value));
    }

    private async Task ExpandedChanged(bool isExpanded)
    {
        if (!isExpanded)
        {
            return;
        }

        if (_consumptionChart != default)
        {
            await _consumptionChart.UpdateOptionsAsync(false, false, false);
        }

        if (_productionChart != default)
        {
            await _productionChart.UpdateOptionsAsync(false, false, false);
        }
    }

    private async ValueTask OnChartWidthChangedAsync()
    {
        await InvokeAsync(StateHasChanged);

        await Task.Delay(50);

        if (_consumptionChart != default)
        {
            await _consumptionChart.UpdateOptionsAsync(false, false, false);
        }

        if (_productionChart != default)
        {
            await _productionChart.UpdateOptionsAsync(false, false, false);
        }
    }

    public void Dispose()
    {
        ChartWidthCalculator.ChartWidthChanged -= OnChartWidthChangedAsync;
        _consumptionChart?.Dispose();
        _productionChart?.Dispose();
    }
}