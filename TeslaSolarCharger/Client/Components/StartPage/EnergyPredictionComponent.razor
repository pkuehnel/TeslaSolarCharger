@page "/Prediction"

@using TeslaSolarCharger.Client.Services.Contracts
@using ApexCharts
@using TeslaSolarCharger.Client.Dtos
@using TeslaSolarCharger.Client.Helper.Contracts
@using Color = MudBlazor.Color
@using Size = MudBlazor.Size

@inject IEnergyDataService EnergyDataService
@inject TimeProvider TimeProvider
@inject ISnackbar Snackbar
@inject IBrowserViewportService BrowserViewportService
@inject IChartWidthCalculator ChartWidthCalculator
@inject IApexChartHelper ApexChartHelper

@implements IDisposable

<MudExpansionPanels>
    <MudExpansionPanel ExpandedChanged="isExpanded => ExpandedChanged(isExpanded)">
        <TitleContent>
            @{
                // Set labels and values based on the SelectedDate.
                string leftLabel;
                string rightLabel;
                RenderFragment leftValue;
                RenderFragment rightValue;

                if (SelectedDate == TimeProvider.GetLocalNow().Date)
                {
                    leftLabel = "Prediction from now:";
                    rightLabel = "Produced today:";

                    leftValue = SolarPredictionData != null
                        ? @<span class="d-block text-md-start">@($"{SolarPredictionData.Where(v => v.Key > TimeProvider.GetLocalNow().Hour).Sum(v => v.Value):F1} kWh")</span>
                    : @<div class="d-flex justify-content-start w-100">
                    <MudSkeleton Width="100px" Height="24px" />
                </div>;

                    rightValue = SolarActualData != null
                        ? @<span class="d-block text-md-end">@($"{SolarActualData.Sum(v => v.Value):F1} kWh")</span>
                    : @<div class="d-flex justify-content-end w-100">
                    <MudSkeleton Width="100px" Height="24px" />
                </div>;
                }
                else if (SelectedDate < TimeProvider.GetLocalNow().Date)
                {
                    leftLabel = "Estimated Production:";
                    rightLabel = "Actual Production:";

                    leftValue = SolarPredictionData != null
                        ? @<span class="d-block text-md-start">@($"{SolarPredictionData.Sum(v => v.Value):F1} kWh")</span>
                    : @<div class="d-flex justify-content-start w-100">
                    <MudSkeleton Width="100px" Height="24px" />
                </div>;

                    rightValue = SolarActualData != null
                        ? @<span class="d-block text-md-end">@($"{SolarActualData.Sum(v => v.Value):F1} kWh")</span>
                    : @<div class="d-flex justify-content-end w-100">
                    <MudSkeleton Width="100px" Height="24px" />
                </div>;
                }
                else
                {
                    leftLabel = "Solar Prediction:";
                    rightLabel = "House Prediction:";

                    leftValue = SolarPredictionData != null
                        ? @<span class="d-block text-md-start">@($"{SolarPredictionData.Sum(v => v.Value):F1} kWh")</span>
                    : @<div class="d-flex justify-content-start w-100">
                    <MudSkeleton Width="100px" Height="24px" />
                </div>;

                    rightValue = HousePredictionData != null
                        ? @<span class="d-block text-md-end">@($"{HousePredictionData.Sum(v => v.Value):F1} kWh")</span>
                    : @<div class="d-flex justify-content-end w-100">
                    <MudSkeleton Width="100px" Height="24px" />
                </div>;
                }
            }
            <!-- Outer container that stacks on small screens and arranges items in a row on md+ screens -->
            <div class="d-flex flex-column flex-md-row align-items-center justify-content-between">
                <!-- Left Section -->
                @if (_isSolarPredictionEnabled)
                {
                    <div class="flex-fill text-md-start text-center mb-3 mb-md-0">
                        <span class="fw-bold">@leftLabel</span>
                        <div>@leftValue</div>
                    </div>
                }


                <!-- Center Section: Date input with navigation buttons -->
                <div class="flex-fill text-center mb-3 mb-md-0">
                    <div class="d-flex justify-content-center align-items-center">
                        <MudFab StartIcon="@Icons.Material.Filled.ArrowLeft"
                                Color="Color.Primary"
                                Size="Size.Small"
                                OnClick="PreviousDay"
                                Disabled="IsPreviousDisabled" />
                        <GenericInput T="DateTime?"
                                      For="() => SelectedDate"
                                      LabelName="Date"
                                      OnValueChanged="newDate => SelectedDateChanged(newDate)" />
                        <MudFab StartIcon="@Icons.Material.Filled.ArrowRight"
                                Color="Color.Primary"
                                Size="Size.Small"
                                OnClick="NextDay"
                                Disabled="IsNextDisabled" />
                    </div>
                </div>

                <!-- Right Section -->
                <div class="flex-fill text-md-end text-center">
                    <span class="fw-bold">@rightLabel</span>
                    <div>@rightValue</div>
                </div>
            </div>
        </TitleContent>
        <ChildContent>
            @if (HousePredictionData == default || SolarActualData == default || HouseActualData == default || (SolarPredictionData == default && _isSolarPredictionEnabled))
            {
                <div class="align-items-center justify-content-center mb-3">
                    <PlaceholderComponent Height="@ChartHeight"></PlaceholderComponent>
                </div>
            }
            else
            {
                <div class="d-flex align-items-center justify-content-center mb-3">
                    <ApexChart TItem="DtoChartValue<int, decimal>"
                               Title="kWh"
                               Options="_options"
                               Width="@ChartWidthCalculator.ChartWidth"
                               Height="ChartHeight"
                               XAxisType="XAxisType.Numeric"
                               FormatXAxisLabel="@(arg => arg.ToString("N0"))"
                               FormatYAxisLabel="@(arg => arg.ToString("F1"))"
                               @ref="_chart">
                        @if (SolarPredictionData != default)
                        {
                            <ApexPointSeries TItem="DtoChartValue<int, decimal>"
                                             Items="SolarPredictionData"
                                             Name="@($"Solar Prediction ({(SolarPredictionData.Sum(v => v.Value)).ToString("F1")} kWh)")"
                                             SeriesType="SeriesType.Line"
                                             XValue="@(e => e.Key)"
                                             YValue="@(e => (decimal?)e.Value)"
                                             Color="#FFD580" />
                        }
                        <ApexPointSeries TItem="DtoChartValue<int, decimal>"
                                         Items="HousePredictionData"
                                         Name="@($"House Prediction ({(HousePredictionData.Sum(v => v.Value)).ToString("F1")} kWh)")"
                                         SeriesType="SeriesType.Line"
                                         XValue="@(e => e.Key)"
                                         YValue="@(e => (decimal?)e.Value)"
                                         Color="lightpink" />
                        <ApexPointSeries TItem="DtoChartValue<int, decimal>"
                                         Items="SolarActualData"
                                         Name="@($"Solar Actual ({(SolarActualData.Sum(v => v.Value)).ToString("F1")} kWh)")"
                                         SeriesType="SeriesType.Line"
                                         XValue="@(e => e.Key)"
                                         YValue="@(e => (decimal?)e.Value)"
                                         Color="orange" />
                        <ApexPointSeries TItem="DtoChartValue<int, decimal>"
                                         Items="HouseActualData"
                                         Name="@($"House Actual ({(HouseActualData.Sum(v => v.Value)).ToString("F1")} kWh)")"
                                         SeriesType="SeriesType.Line"
                                         XValue="@(e => e.Key)"
                                         YValue="@(e => (decimal?)e.Value)"
                                         Color="deeppink" />
                    </ApexChart>
                </div>
            }
        </ChildContent>
    </MudExpansionPanel>
</MudExpansionPanels>

@code {
    private List<DtoChartValue<int, decimal>>? SolarPredictionData { get; set; }
    private List<DtoChartValue<int, decimal>>? HousePredictionData { get; set; }
    private List<DtoChartValue<int, decimal>>? SolarActualData { get; set; }
    private List<DtoChartValue<int, decimal>>? HouseActualData { get; set; }
    private DateTime? SelectedDate { get; set; }
    private DateTime MaxAllowedDate => TimeProvider.GetLocalNow().Date.AddDays(7);
    private ApexChartOptions<DtoChartValue<int, decimal>>? _options;
    private bool _isSolarPredictionEnabled;
    private ApexChart<DtoChartValue<int, decimal>>? _chart;


    private string ChartHeight { get; set; } = "400px";
    private CancellationTokenSource _refreshCancellationTokenSource = new CancellationTokenSource();

    protected override async Task OnInitializedAsync()
    {
        var currentTime = TimeProvider.GetLocalNow();
        SelectedDate = currentTime.Date;
        await base.OnInitializedAsync();
        _isSolarPredictionEnabled = await EnergyDataService.SolarPowerPredictionEnabled();
        await InvokeAsync(() => StateHasChanged());
        _options = ApexChartHelper.GetDefaultChartOptions<DtoChartValue<int, decimal>>();

        await RefreshData(DateOnly.FromDateTime(SelectedDate.Value));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ChartWidthCalculator.ChartWidthChanged += OnChartWidthChangedAsync;
            await ChartWidthCalculator.InitAsync();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task RefreshData(DateOnly date)
    {
        // Cancel any ongoing refresh tasks.
        _refreshCancellationTokenSource.Cancel();
        _refreshCancellationTokenSource.Dispose();
        _refreshCancellationTokenSource = new CancellationTokenSource();
        CancellationToken token = _refreshCancellationTokenSource.Token;

        HousePredictionData = default;
        SolarPredictionData = default;
        HouseActualData = default;
        SolarActualData = default;
        try
        {
            // Start tasks with the cancellation token.
            var housePredictionTask = EnergyDataService.GetPredictedHouseConsumptionByLocalHour(date, token);
            var solarActualTask = EnergyDataService.GetActualSolarProductionByLocalHour(date, token);
            var houseActualTask = EnergyDataService.GetActualHouseConsumptionByLocalHour(date, token);

            if (_isSolarPredictionEnabled)
            {
                var solarPredictionTask = EnergyDataService.GetPredictedSolarProductionByLocalHour(date, token);
                var solarPredictionData = await solarPredictionTask;
                token.ThrowIfCancellationRequested();
                SolarPredictionData = solarPredictionData
                    .Select(e => new DtoChartValue<int, decimal>(e.Key, new(e.Value / 1000.0)))
                    .ToList();
            }

            var housePredictionData = await housePredictionTask;
            token.ThrowIfCancellationRequested();
            var solarActualData = await solarActualTask;
            token.ThrowIfCancellationRequested();
            var houseActualData = await houseActualTask;
            token.ThrowIfCancellationRequested();

            HousePredictionData = housePredictionData
                .Select(e => new DtoChartValue<int, decimal>(e.Key, new(e.Value / 1000.0)))
                .ToList();
            SolarActualData = solarActualData
                .Select(e => new DtoChartValue<int, decimal>(e.Key, new(e.Value / 1000.0)))
                .ToList();
            HouseActualData = houseActualData
                .Select(e => new DtoChartValue<int, decimal>(e.Key, new(e.Value / 1000.0)))
                .ToList();

            if (_chart != null)
            {
                await _chart.UpdateSeriesAsync();
            }

            StateHasChanged();
        }
        catch (OperationCanceledException)
        {
            // The refresh was canceled. Optionally log or handle the cancellation.
        }
    }

    private void PreviousDay()
    {
        if (SelectedDate == default)
        {
            return;
        }
        SelectedDate = SelectedDate.Value.AddDays(-1);
    }

    private void NextDay()
    {
        if (SelectedDate == default)
        {
            return;
        }
        if (SelectedDate < MaxAllowedDate)
        {
            SelectedDate = SelectedDate.Value.AddDays(1);
        }
    }

    private bool IsPreviousDisabled => false; // No limit for going back
    private bool IsNextDisabled => SelectedDate >= MaxAllowedDate;

    private async Task SelectedDateChanged(DateTime? newDate)
    {
        if (newDate == default)
        {
            return;
        }

        if (SelectedDate > MaxAllowedDate)
        {
            Snackbar.Add("Cannot select a date more than one day in the future", Severity.Error);
            return;
        }
        SelectedDate = newDate;
        await RefreshData(DateOnly.FromDateTime(newDate.Value));
    }

    private CancellationTokenSource? _debounceTokenSource;

    private async Task ExpandedChanged(bool isExpanded)
    {
        if ((_chart == default) || (!isExpanded))
        {
            return;
        }
        await _chart.UpdateOptionsAsync(false, false, false);
    }

    private async ValueTask OnChartWidthChangedAsync()
    {
        if (_chart != default)
        {
            await _chart.UpdateOptionsAsync(false, false, false);
            await InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose()
    {
        ChartWidthCalculator.ChartWidthChanged -= OnChartWidthChangedAsync;
        _chart?.Dispose();
    }

}