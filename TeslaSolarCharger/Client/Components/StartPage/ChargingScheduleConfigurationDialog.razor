@using TeslaSolarCharger.Client.Services.Contracts
@using TeslaSolarCharger.Client.Wrapper
@using TeslaSolarCharger.Shared.Dtos.Home

@inject ISnackbar Snackbar
@inject IHomeService HomeService


@if (_chargingSchedule == default)
{
    <PlaceholderComponent Count="7"></PlaceholderComponent>
}
else
{
    <EditFormComponent T="DtoCarChargingSchedule" WrappedElement="@(_chargingSchedule)"
                       OnAfterSuccessfullSubmit="ShowSuccessMessage"
                       SubmitUrl="@($"api/Home/SaveCarChargingSchedule?carId={CarId}")">
        <GenericInput For="() => _chargingSchedule.Item.TargetSoc"></GenericInput>
        <GenericInput For="() => _chargingSchedule.Item.TargetDate"></GenericInput>
        <GenericInput For="() => _chargingSchedule.Item.TargetTime"></GenericInput>
        <GenericInput For="() => _chargingSchedule.Item.RepeatOnMondays"></GenericInput>
        <GenericInput For="() => _chargingSchedule.Item.RepeatOnTuesdays"></GenericInput>
        <GenericInput For="() => _chargingSchedule.Item.RepeatOnWednesdays"></GenericInput>
        <GenericInput For="() => _chargingSchedule.Item.RepeatOnThursdays"></GenericInput>
        <GenericInput For="() => _chargingSchedule.Item.RepeatOnFridays"></GenericInput>
        <GenericInput For="() => _chargingSchedule.Item.RepeatOnSaturdays"></GenericInput>
        <GenericInput For="() => _chargingSchedule.Item.RepeatOnSundays"></GenericInput>
    </EditFormComponent>
}


@code {
    [CascadingParameter]
    IMudDialogInstance MudDialog { get; set; } = null!;

    [Parameter]
    public int? ChargingScheduleId { get; set; }

    [Parameter]
    public int CarId { get; set; }

    private EditableItem<DtoCarChargingSchedule>? _chargingSchedule;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await RefreshChargingSchedule(ChargingScheduleId);
    }

    private async Task RefreshChargingSchedule(int? chargingScheduleId)
    {
        if (chargingScheduleId == default)
        {
            _chargingSchedule = new(new());
            return;
        }
        var chargingSchedule = await HomeService.GetChargingSchedule(chargingScheduleId.Value);
        if (chargingSchedule == default)
        {
            return;
        }
        _chargingSchedule = new(chargingSchedule);
    }

    private void ShowSuccessMessage()
    {
        Snackbar.Add("Saved.", Severity.Success);
    }
}
