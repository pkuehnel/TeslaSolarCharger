@using TeslaSolarCharger.Client.Services.Contracts
@using TeslaSolarCharger.Shared.Dtos.Home

@inject IHomeService HomeService
@inject IDialogService DialogService

<h3>Schedules</h3>
<RightAlignedButtonComponent StartIcon="@Icons.Material.Filled.Add"
                             ButtonText="Add Schedule"
                             OnButtonClicked="_ => OpenScheduleDialog(null)"></RightAlignedButtonComponent>
@if (_schedules == default)
{
    <PlaceholderComponent Count="3"></PlaceholderComponent>
}
else if (_schedules.Count < 1)
{
    <div>Nothing planned</div>
}
else
{
    foreach (var dtoCarChargingSchedule in _schedules)
    {
        @if (dtoCarChargingSchedule.RepeatOnMondays
             || dtoCarChargingSchedule.RepeatOnTuesdays
             || dtoCarChargingSchedule.RepeatOnWednesdays
             || dtoCarChargingSchedule.RepeatOnThursdays
             || dtoCarChargingSchedule.RepeatOnFridays
             || dtoCarChargingSchedule.RepeatOnSaturdays
             || dtoCarChargingSchedule.RepeatOnSundays)
        {
            <div>
                Repeat on:
                <ul>
                    @if (dtoCarChargingSchedule.RepeatOnMondays)
                    {
                        <li>Monday</li>
                    }
                    @if (dtoCarChargingSchedule.RepeatOnTuesdays)
                    {
                        <li>Tuesday</li>
                    }
                    @if (dtoCarChargingSchedule.RepeatOnWednesdays)
                    {
                        <li>Wednesday</li>
                    }
                    @if (dtoCarChargingSchedule.RepeatOnThursdays)
                    {
                        <li>Thursday</li>
                    }
                    @if (dtoCarChargingSchedule.RepeatOnFridays)
                    {
                        <li>Friday</li>
                    }
                    @if (dtoCarChargingSchedule.RepeatOnSaturdays)
                    {
                        <li>Saturday</li>
                    }
                    @if (dtoCarChargingSchedule.RepeatOnSundays)
                    {
                        <li>Sunday</li>
                    }
                </ul>
            </div>
        }
        <GenericInput For="() => dtoCarChargingSchedule.TargetDate"
                      LabelName="@(dtoCarChargingSchedule.RepeatsOnAnyDay ? "Next execution date" : null)"
                      HelperText="@(dtoCarChargingSchedule.RepeatsOnAnyDay ? "Leave empty if should always execute on repeating day" : null)"
                      ></GenericInput>
        <GenericInput For="() => dtoCarChargingSchedule.TargetTime"></GenericInput>
    }
}

@code {
    [Parameter]
    public int CarId { get; set; }

    private List<DtoCarChargingSchedule>? _schedules;


    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await RefreshChargingSchedules();

    }

    private async Task RefreshChargingSchedules()
    {
        _schedules = await HomeService.GetCarChargingSchedules(CarId);
    }

    private async Task OpenScheduleDialog(int? scheduleId)
    {
        var options = new DialogOptions()
        {
            CloseButton = true,
            CloseOnEscapeKey = false,
            BackdropClick = true,
        };
        var parameters = new DialogParameters<ChargingScheduleConfigurationDialog>
        {
            { x => x.CarId, CarId },
            { x => x.ChargingScheduleId, scheduleId },
        };
        var title = scheduleId == default ? "Add" : "Edit";
        var dialog = await DialogService.ShowAsync<ChargingScheduleConfigurationDialog>($"{title} REST config", parameters, options);
        var result = await dialog.Result;

        await RefreshChargingSchedules();
    }

}
