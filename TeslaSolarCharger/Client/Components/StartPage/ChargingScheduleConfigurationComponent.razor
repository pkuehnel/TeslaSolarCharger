@using TeslaSolarCharger.Client.Dialogs
@using TeslaSolarCharger.Client.Helper.Contracts
@using TeslaSolarCharger.Client.Services.Contracts
@using TeslaSolarCharger.Client.Wrapper
@using TeslaSolarCharger.Shared.Dtos.Home

@inject IHomeService HomeService
@inject ISnackbar Snackbar
@inject IJavaScriptWrapper JavaScriptWrapper
@inject IDialogService DialogService

<h3>Schedules</h3>
<RightAlignedButtonComponent StartIcon="@Icons.Material.Filled.Add"
                             ButtonText="Add Schedule"
                             OnButtonClicked="_ => AddSchedule()"></RightAlignedButtonComponent>

@if (_schedules == null)
{
    <PlaceholderComponent Count="3" />
}
else if (!_schedules.Any())
{
    <div class="text-muted mt-2">Nothing planned</div>
}
else
{
    @foreach (var chargingSchedule in _schedules)
    {

        <div class="card mb-3">
            <div class="card-body">
                <EditFormComponent T="DtoCarChargingSchedule" WrappedElement="@(chargingSchedule)"
                                   OnAfterSuccessfullSubmit="ShowSuccessMessage"
                                   HideSubmitButton="false"
                                   SubmitUrl="@($"api/Home/SaveCarChargingSchedule?carId={CarId}")">
                    @if (chargingSchedule.Item.ClientTimeZone != _timeZone)
                    {
                        <MudAlert Severity="Severity.Warning"
                                  NoIcon="true"
                                  ContentAlignment="HorizontalAlignment.Left">
                            <h5>Saved in different timezone</h5>
                            This element was saved in a different timezone than your device currently is in. The timezone is set when adding a new schedule, so to fix this issue, you need to delete this schedule and readd it.
                        </MudAlert>
                    }
                    
                    <div>
                        <GenericInput For="() => chargingSchedule.Item.TargetSoc"></GenericInput>
                        <GenericInput For="() => chargingSchedule.Item.TargetDate"
                                      Clearable="true"></GenericInput>
                        <GenericInput For="() => chargingSchedule.Item.TargetTime"></GenericInput>
                        <div class="d-flex flex-wrap gap-2">
                            <GenericInput For="() => chargingSchedule.Item.RepeatOnMondays"></GenericInput>
                            <GenericInput For="() => chargingSchedule.Item.RepeatOnTuesdays"></GenericInput>
                            <GenericInput For="() => chargingSchedule.Item.RepeatOnWednesdays"></GenericInput>
                            <GenericInput For="() => chargingSchedule.Item.RepeatOnThursdays"></GenericInput>
                            <GenericInput For="() => chargingSchedule.Item.RepeatOnFridays"></GenericInput>
                            <GenericInput For="() => chargingSchedule.Item.RepeatOnSaturdays"></GenericInput>
                            <GenericInput For="() => chargingSchedule.Item.RepeatOnSundays"></GenericInput>
                        </div>
                    </div>
                </EditFormComponent>
                <RightAlignedButtonComponent StartIcon="@Icons.Material.Filled.Delete"
                                             ButtonText="Delete"
                                             ButtonColor="Color.Error"
                                             OnButtonClicked="_ => DeleteItem(chargingSchedule)"></RightAlignedButtonComponent>
            </div>
        </div>
    }
}

@code {
    [Parameter]
    public int CarId { get; set; }

    private List<EditableItem<DtoCarChargingSchedule>>? _schedules;

    private string? _timeZone;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _timeZone = await JavaScriptWrapper.GetTimeZoneId();
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await RefreshChargingSchedules();

    }

    private async Task RefreshChargingSchedules()
    {
        var result = await HomeService.GetCarChargingSchedules(CarId);
        if (result == default)
        {
            _schedules = default;
            return;
        }
        _schedules = result.Select(s => new EditableItem<DtoCarChargingSchedule>(s)).ToList();
    }

    private void AddSchedule()
    {
        _schedules?.Add(new(new()
        {
            ClientTimeZone = _timeZone,
        }));
    }

    private void ShowSuccessMessage()
    {
        Snackbar.Add("Saved.", Severity.Success);
    }

    private async Task DeleteItem(EditableItem<DtoCarChargingSchedule> chargingSchedule)
    {
        if (chargingSchedule.Item.Id != default)
        {
            var result = await HomeService.DeleteChargingSchedule(chargingSchedule.Item.Id);
            if (result.HasError)
            {
                Snackbar.Add($"Could not delete: {result.ErrorMessage}", Severity.Success);
                return;
            }
        }
        _schedules?.Remove(chargingSchedule);
    }

}
