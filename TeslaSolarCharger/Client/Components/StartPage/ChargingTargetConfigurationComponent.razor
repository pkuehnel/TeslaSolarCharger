@using MudBlazor
@using System.Globalization
@using System.Linq
@using TeslaSolarCharger.Client.Helper.Contracts
@using TeslaSolarCharger.Client.Dialogs
@using TeslaSolarCharger.Client.Services.Contracts
@using TeslaSolarCharger.Client.Wrapper
@using TeslaSolarCharger.Shared.Dtos.Home
@using TeslaSolarCharger.Shared.Localization.Contracts
@using TeslaSolarCharger.Shared.Localization.Registries
@using TeslaSolarCharger.Shared.Localization.Registries.Components.StartPage

@inject IHomeService HomeService
@inject ISnackbar Snackbar
@inject IJavaScriptWrapper JavaScriptWrapper
@inject IDialogService DialogService
@inject IBaseConfigurationService BaseConfigurationService
@inject ITextLocalizationService TextLocalizer

<div class="d-flex flex-wrap gap-2">
    <h3>@T("Charging Targets")</h3>
    <RightAlignedButtonComponent StartIcon="@Icons.Material.Filled.Add"
                                 ButtonText='@T("Add Target")'
                                 OnButtonClicked="AddTarget"></RightAlignedButtonComponent>
</div>

@if (_targets == null)
{
    <PlaceholderComponent Count="3" />
}
else if (!_targets.Any())
{
    <div class="text-muted">@T("Nothing planned")</div>
}
else
{
    @foreach (var chargingTarget in _targets)
    {
        <div class="card mb-3"
             style="cursor: pointer;"
             @onclick="() => OpenEditDialog(chargingTarget)">
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center gap-2 flex-nowrap">
                    <div class="flex-grow-1">
                        <div class="fw-semibold">@GetTargetTitle(chargingTarget)</div>
                        <div class="text-muted">@GetTargetTimeDescription(chargingTarget)</div>
                        <div class="text-muted">@GetScheduleDescription(chargingTarget)</div>
                        @if (_homeBatteryValuesAvailable)
                        {
                            <div class="text-muted">@GetHomeBatteryText(chargingTarget)</div>
                        }
                    </div>
                    <div @onclick:stopPropagation="true">
                        <MudIconButton Color="Color.Error"
                                   Variant="Variant.Outlined"
                                   Icon="@Icons.Material.Filled.Delete"
                                   OnClick="() => DeleteItem(chargingTarget)">
                        </MudIconButton>
                    </div>
                    
                </div>
                @if (!string.Equals(chargingTarget.ClientTimeZone, _timeZone, StringComparison.OrdinalIgnoreCase))
                {
                    <MudAlert Severity="Severity.Warning"
                              Dense="true"
                              NoIcon="true"
                              Class="mt-2"
                              ContentAlignment="HorizontalAlignment.Left">
                        <div class="fw-semibold">@T("Saved in different timezone")</div>
                        <div class="small">@T("This element was saved in a different timezone than your device currently is in. The timezone is set when adding a new target, so to fix this issue, you need to delete this target and readd it.")</div>
                    </MudAlert>
                }
            </div>
        </div>
    }
}

@code {
        [Parameter]
        public int CarId { get; set; }

    private List<DtoCarChargingTarget>? _targets;

    private string? _timeZone;

    private bool _homeBatteryValuesAvailable;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _timeZone = await JavaScriptWrapper.GetTimeZoneId();
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await RefreshChargingTargets();
        _homeBatteryValuesAvailable = await BaseConfigurationService.HomeBatteryValuesAvailable();
    }

    private async Task RefreshChargingTargets()
    {
        var result = await HomeService.GetCarChargingTargets(CarId);
        if (result == default)
        {
            _targets = default;
            return;
        }
        _targets = result.ToList();
    }

    private async Task AddTarget()
    {
        await OpenEditDialog();
    }

    private async Task DeleteItem(DtoCarChargingTarget chargingTarget)
    {
        if (chargingTarget.Id != default)
        {
            var result = await HomeService.DeleteCarChargingTarget(chargingTarget.Id);
            if (result.HasError)
            {
                Snackbar.Add(Format("Could not delete: {0}", result.ErrorMessage), Severity.Error);
                return;
            }
        }
        _targets?.Remove(chargingTarget);
        Snackbar.Add(T("Deleted."), Severity.Success);
    }

    private async Task OpenEditDialog(DtoCarChargingTarget? chargingTarget = default)
    {
        var editableTarget = new EditableItem<DtoCarChargingTarget>(CloneTarget(chargingTarget));
        editableTarget.Item.ClientTimeZone ??= _timeZone;

        var parameters = new DialogParameters<ChargingTargetConfigurationDialog>
        {
            { x => x.CarId, CarId },
            { x => x.Target, editableTarget },
            { x => x.HomeBatteryValuesAvailable, _homeBatteryValuesAvailable },
            { x => x.CurrentTimeZone, _timeZone },
        };

        var options = new DialogOptions
        {
            CloseButton = true,
            FullWidth = true,
            MaxWidth = MaxWidth.Medium,
        };

        var dialog = await DialogService.ShowAsync<ChargingTargetConfigurationDialog>(T("Charging target"), parameters, options);
        var result = await dialog.Result;
        if (result?.Canceled == false)
        {
            await RefreshChargingTargets();
        }
    }

    private static DtoCarChargingTarget CloneTarget(DtoCarChargingTarget? target)
    {
        if (target is null)
        {
            return new DtoCarChargingTarget();
        }

        return new DtoCarChargingTarget
        {
            Id = target.Id,
            TargetSoc = target.TargetSoc,
            DischargeHomeBatteryToMinSoc = target.DischargeHomeBatteryToMinSoc,
            TargetDate = target.TargetDate,
            TargetTime = target.TargetTime,
            RepeatOnMondays = target.RepeatOnMondays,
            RepeatOnTuesdays = target.RepeatOnTuesdays,
            RepeatOnWednesdays = target.RepeatOnWednesdays,
            RepeatOnThursdays = target.RepeatOnThursdays,
            RepeatOnFridays = target.RepeatOnFridays,
            RepeatOnSaturdays = target.RepeatOnSaturdays,
            RepeatOnSundays = target.RepeatOnSundays,
            ClientTimeZone = target.ClientTimeZone,
        };
    }

    private string GetTargetTitle(DtoCarChargingTarget target)
    {
        return target.TargetSoc.HasValue
            ? Format("Target SoC: {0}%", target.TargetSoc.Value)
            : T("Discharge home battery");
    }

    private string GetTargetTimeDescription(DtoCarChargingTarget target)
    {
        return target.TargetTime.HasValue
            ? Format("Target time: {0}", target.TargetTime.Value.ToString("hh\\:mm", CultureInfo.CurrentCulture))
            : T("No target time configured");
    }

    private string GetScheduleDescription(DtoCarChargingTarget target)
    {
        var repeatDays = GetRepeatDays(target).ToList();
        if (repeatDays.Any())
        {
            return Format("Repeats on {0}", string.Join($"{CultureInfo.CurrentCulture.TextInfo.ListSeparator} ", repeatDays));
        }

        if (target.TargetDate.HasValue)
        {
            return Format("Runs on {0}", target.TargetDate.Value.ToString("d", CultureInfo.CurrentCulture));
        }

        return T("No date configured");
    }

    private static IEnumerable<string> GetRepeatDays(DtoCarChargingTarget target)
    {
        if (target.RepeatOnMondays)
        {
            yield return CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedDayName(DayOfWeek.Monday);
        }
        if (target.RepeatOnTuesdays)
        {
            yield return CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedDayName(DayOfWeek.Tuesday);
        }
        if (target.RepeatOnWednesdays)
        {
            yield return CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedDayName(DayOfWeek.Wednesday);
        }
        if (target.RepeatOnThursdays)
        {
            yield return CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedDayName(DayOfWeek.Thursday);
        }
        if (target.RepeatOnFridays)
        {
            yield return CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedDayName(DayOfWeek.Friday);
        }
        if (target.RepeatOnSaturdays)
        {
            yield return CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedDayName(DayOfWeek.Saturday);
        }
        if (target.RepeatOnSundays)
        {
            yield return CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedDayName(DayOfWeek.Sunday);
        }
    }

    private string GetHomeBatteryText(DtoCarChargingTarget chargingTarget)
    {
        if (!_homeBatteryValuesAvailable)
        {
            return string.Empty;
        }
        var prefix = $"{T("Home battery")}: ";
        if (chargingTarget.TargetSoc == default)
        {
            if (chargingTarget.DischargeHomeBatteryToMinSoc)
            {
                return prefix + T("Discharge to min SoC");
            }

            return prefix;
        }
        else
        {
            if (chargingTarget.DischargeHomeBatteryToMinSoc)
            {
                return prefix + T("Try to not use grid energy by reducing car's charging speed");
            }
            else
            {
                return prefix + T("Don't reduce cars's charging speed, grid energy may be used even if home battery has enough energy");
            }
        }
    }

    private string T(string key) =>
        TextLocalizer.Get<ChargingTargetConfigurationComponentLocalizationRegistry>(key, typeof(SharedComponentLocalizationRegistry))
        ?? key;

    private string Format(string key, params object?[] arguments) =>
        string.Format(CultureInfo.CurrentCulture, T(key), arguments);
}
