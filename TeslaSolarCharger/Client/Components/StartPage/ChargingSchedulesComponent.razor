@using TeslaSolarCharger.Client.Services.Contracts
@using TeslaSolarCharger.Shared.Dtos
@using TeslaSolarCharger.Shared.Helper.Contracts
@using TeslaSolarCharger.Shared.SignalRClients
@using TeslaSolarCharger.Shared.Localization.Contracts
@using TeslaSolarCharger.Shared.Localization.Registries
@using TeslaSolarCharger.Shared.Localization.Registries.Components.StartPage
@inject IHomeService HomerService
@inject ISignalRStateService SignalRStateService
@inject ILogger<ChargingSchedulesComponent> Logger
@inject IStringHelper StringHelper
@inject ITextLocalizationService TextLocalizer

<MudExpansionPanels>
        <MudExpansionPanel ExpandedChanged="IsExpandedChanged">
            <TitleContent>
                @if (_elements == default)
                {
                    <PlaceholderComponent Count="1" />
                }
                else
                {
                    @(_elements.Count < 1 ? T("Nothing planned") : string.Format(T("Next planned charge starts at {0}"), _elements.First().ValidFrom.ToLocalTime().ToString("f")))
                }
            </TitleContent>
            <ChildContent>
                <MudDataGrid Items="_elements" Groupable="true" Filterable="true"
                             Hover="true" Dense="true" Striped="true" Breakpoint="Breakpoint.None"
                             Loading="@(_elements == null)">
                    <Columns>
                        <PropertyColumn Property="x => x.ValidFrom"
                                        Title="@T(StringHelper.GenerateFriendlyStringWithOutIdSuffix(nameof(DtoChargingSchedule.ValidFrom)))">
                            <CellTemplate>
                                @(context.Item.ValidFrom.ToLocalTime().ToString("g"))
                            </CellTemplate>
                        </PropertyColumn>
                        <PropertyColumn Property="x => x.ValidTo"
                                        Title="@T(StringHelper.GenerateFriendlyStringWithOutIdSuffix(nameof(DtoChargingSchedule.ValidTo)))">
                            <CellTemplate>
                                @(context.Item.ValidTo.ToLocalTime().ToString("g"))
                            </CellTemplate>
                        </PropertyColumn>
                        <PropertyColumn Property="x => x.ChargingPower"
                                        Title="@T(StringHelper.GenerateFriendlyStringWithOutIdSuffix(nameof(DtoChargingSchedule.ChargingPower)))">
                            <CellTemplate>
                                @(context.Item.ChargingPower.ToString("N0"))W
                            </CellTemplate>
                        </PropertyColumn>
                    </Columns>
                </MudDataGrid>
                @if(_showChart)
                {
                    <div class="d-flex align-items-center justify-content-center mt-3 border border-gray-300 p-3 rounded">
                        <ChargingSchedulesChartComponent ChargingSchedules="_elements" />
                    </div>
                }
            </ChildContent>
        </MudExpansionPanel>
    </MudExpansionPanels>


@code {
    [Parameter]
    public int? CarId { get; set; }

    [Parameter]
    public int? ChargingConnectorId { get; set; }

    private List<DtoChargingSchedule>? _elements;

    private bool _showChart;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await SignalRStateService.InitializeAsync();
        await SignalRStateService.SubscribeToTrigger(
            DataTypeConstants.ChargingSchedulesChangeTrigger,
            async void () =>
            {
                try
                {
                    await RefreshChargingSchedules();
                    await InvokeAsync(StateHasChanged).ConfigureAwait(false);
                }
                catch (Exception e)
                {
                    Logger.LogError(e, "{method}() failed", nameof(RefreshChargingSchedules));
                }
            });
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await RefreshChargingSchedules();
    }

    private async Task RefreshChargingSchedules()
    {
        if (CarId != default || ChargingConnectorId != default)
        {
            var result = await HomerService.GetChargingSchedules(CarId, ChargingConnectorId);
            if (result == default)
            {
                _elements = result;
                return;
            }
            _elements = result.OrderBy(c => c.ValidFrom).ToList();
        }
        else
        {
            _elements = null;
        }
    }

    private void IsExpandedChanged(bool obj)
    {
        if (!_showChart)
        {
            _showChart = obj;
        }
    }

    private string T(string key)
    {
        return TextLocalizer.Get<ChargingSchedulesComponentLocalizationRegistry>(key, typeof(SharedComponentLocalizationRegistry))
               ?? key;
    }

}
