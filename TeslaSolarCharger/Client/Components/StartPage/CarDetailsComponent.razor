@using TeslaSolarCharger.Client.Services.Contracts
@using TeslaSolarCharger.Shared.Dtos.Home
@using TeslaSolarCharger.Shared.Enums

@inject IHomeService HomeService
@inject ISnackbar Snackbar

@if (Car == default)
{
    <PlaceholderComponent Count="6"></PlaceholderComponent>
}
else
{
    <div>
        <CustomIcon IconName="@Icons.Material.Outlined.DirectionsCar" Class="me-1" />
        <span class="me-1">@Car.Name</span>
        <CustomIcon IconName="@Icons.Material.Outlined.Home" IsCrossedOut="@(!Car.IsHome)"></CustomIcon>
        <CustomIcon IconName="@Icons.Material.Outlined.Power" IsCrossedOut="@(!Car.IsPluggedIn)"></CustomIcon>
        <CustomIcon IconName="@Icons.Material.Outlined.Bolt" IsCrossedOut="@(!Car.IsCharging)"></CustomIcon>
    </div>
    <div>
        <GenericInput T="ChargeModeV2"
                      For="() => Car.ChargeMode"
                      OnValueChanged="ChargeModeUpdated"/>
        <div class="row">
            <div class="col-6">
                <GenericInput T="int"
                              For="() => Car.MinSoc"
                              OnValueChanged="OnMinSocChanged"
                              ImmediateValueUpdate="true"/>
            </div>
            <div class="col-6">
                <GenericInput T="int"
                              For="() => Car.MaxSoc"
                              OnValueChanged="OnMaxSocChanged"
                              IsDisabledParameter="true"
                              ImmediateValueUpdate="true"/>
            </div>
        </div>
        @if (Car.Soc != default)
        {
            <div class="mb-7">
                <ProgressWithLabelComponent Color="@(Car.Soc.Value < 7 ? Color.Error : Car.Soc.Value <= 20 ? Color.Warning : Color.Primary)"
                                            Striped="Car.IsCharging"
                                            Size="Size.Large"
                                            Value="(double)Car.Soc"
                                            Buffer="@(Car.CarSideSocLimit != default)"
                                            BufferValue="@(Car.CarSideSocLimit == default ? 0 : (double)Car.CarSideSocLimit.Value)"
                                            ValueLabelPrefix="SoC: "
                                            ValueLabelSuffix="%"
                                            BufferLabelPrefix="Car Limit: "
                                            BufferLabelSuffix="%">
                </ProgressWithLabelComponent>
            </div>

        }

    </div>
    
        @if (CarId != default)
        {
        <div class="mb-7">
            <ChargingTargetConfigurationComponent CarId="CarId.Value"></ChargingTargetConfigurationComponent>
        </div>
        }
    
    <ChargeSummaryComponent CarId="CarId"></ChargeSummaryComponent>
}


@code {
    [Parameter]
    public int? CarId { get; set; }

    private DtoCarOverview? Car { get; set; }

    // one CTS per “in-flight” debounce
    private CancellationTokenSource _minSocDebounceCts = new();

    private int? _lastKnownMinValue;
    private int? _lastKnownMaxValue;
    private ChargeModeV2? _lastKnownChargeMode;
    private const int LimitChangeDelayMilliseconds = 1000;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await RefreshData();
    }

    private async Task RefreshData()
    {
        if (CarId == default)
        {
            Car = default;
            return;
        }
        Car = await HomeService.GetCarOverview(CarId.Value);
        if (Car != default)
        {
            _lastKnownMinValue = Car.MinSoc;
            _lastKnownMaxValue = Car.MaxSoc;
            _lastKnownChargeMode = Car.ChargeMode;
        }

    }

    private async Task OnMinSocChanged(int newSoc)
    {
        if (Car == default || CarId == default)
            return;

        // update UI immediately
        Car.MinSoc = newSoc;

        // cancel any pending update
        await _minSocDebounceCts.CancelAsync();
        _minSocDebounceCts = new CancellationTokenSource();

        try
        {
            // wait 300ms for “settle”
            await Task.Delay(LimitChangeDelayMilliseconds, _minSocDebounceCts.Token);

            // now do the API call
            var updateResult = await HomeService.UpdateCarMinSoc(CarId.Value, Car.MinSoc);
            if (updateResult.HasError)
            {
                Snackbar.Add(
                    $"Failed to update Min SOC: {updateResult.ErrorMessage}",
                    Severity.Error);
                if (_lastKnownMinValue != default)
                {
                    Car.MinSoc = _lastKnownMinValue.Value;
                    await InvokeAsync(StateHasChanged);
                }
            }
            else
            {
                _lastKnownMinValue = newSoc;
                Snackbar.Add("Min SOC updated successfully.", Severity.Success);
            }
        }
        catch (TaskCanceledException)
        {
            // user is still dragging—ignore
        }
    }


    private async Task OnMaxSocChanged(int newSoc)
    {
        if (Car == default || CarId == default)
            return;

        // update UI immediately
        Car.MaxSoc = newSoc;

        // cancel any pending update
        await _minSocDebounceCts.CancelAsync();
        _minSocDebounceCts = new CancellationTokenSource();

        try
        {
            // wait 300ms for “settle”
            await Task.Delay(LimitChangeDelayMilliseconds, _minSocDebounceCts.Token);
            Snackbar.Add("Max SOC is currently not supported, will come in a future release, please set it in the Tesla app.", Severity.Warning);
            if (_lastKnownMaxValue != default)
            {
                Car.MaxSoc = _lastKnownMaxValue.Value;
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (TaskCanceledException)
        {
            // user is still dragging—ignore
        }
    }

    private async Task ChargeModeUpdated(ChargeModeV2 arg)
    {
        if (Car == default || CarId == default)
            return;
        var result = await HomeService.UpdateCarChargeMode(CarId.Value, arg);
        if (result.HasError)
        {
            Snackbar.Add($"Failed to update Charge Mode: {result.ErrorMessage}", Severity.Error);
            if (_lastKnownChargeMode != default)
            {
                Car.ChargeMode = _lastKnownChargeMode.Value;
                await InvokeAsync(StateHasChanged);
            }
        }
        else
        {
            _lastKnownChargeMode = arg;
            Snackbar.Add("Charge Mode updated successfully.", Severity.Success);
        }
    }

}
