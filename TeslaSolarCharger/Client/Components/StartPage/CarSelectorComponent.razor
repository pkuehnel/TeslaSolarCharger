@using TeslaSolarCharger.Client.Services.Contracts
@inject IHomeService HomeService

@if (_carOptions == default)
{
    <PlaceholderComponent Count="1"></PlaceholderComponent>
}
else
{
    <GenericInput T="int?"
                  @key="_genericInputKey"
                  For="() => LocalSelectedCarId"
                  DropDownOptions="_carOptions"
                  Clearable="true"
                  OnValueChanged="OnLocalCarChanged"></GenericInput>
}

@code {
    [Parameter]
    public int? SelectedCarId { get; set; }

    [Parameter]
    public EventCallback<int?> OnCarSelected { get; set; }

    private Guid _genericInputKey = Guid.NewGuid();

    private int? LocalSelectedCarId { get; set; }

    private Dictionary<int, string>? _carOptions;

    private bool _isUpdatingFromParameter;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (LocalSelectedCarId != SelectedCarId)
        {
            _isUpdatingFromParameter = true;
            LocalSelectedCarId = SelectedCarId;
            _genericInputKey = Guid.NewGuid();
            StateHasChanged();
        }
        else
        {
            _isUpdatingFromParameter = false;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var options = await HomeService.GetLoadPointCarOptions();
        _carOptions = options;
    }

    private async Task OnLocalCarChanged(int? newCarId)
    {
        if (_isUpdatingFromParameter)
        {
            _isUpdatingFromParameter = false;
            return;
        }
        LocalSelectedCarId = newCarId;
        await OnCarSelected.InvokeAsync(newCarId);
    }
}
