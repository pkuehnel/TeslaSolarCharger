@using TeslaSolarCharger.Client.Services.Contracts
@using TeslaSolarCharger.Shared.Dtos.Home
@using TeslaSolarCharger.Shared.Helper.Contracts
@using System.Globalization
@using TeslaSolarCharger.Shared.Localization.Contracts
@using TeslaSolarCharger.Shared.Localization.Registries
@using TeslaSolarCharger.Shared.Localization.Registries.Components.StartPage
@using TeslaSolarCharger.Shared.SignalRClients

@inject ILogger<LoadpointComponent> Logger
@inject IHomeService HomeService
@inject ISignalRStateService SignalRStateService
@inject IEntityKeyGenerationHelper EntityKeyGenerationHelper
@inject ITextLocalizationService TextLocalizer

<div class="shadow p-3 mb-5 bg-white rounded">
    <div class="text-center">@((LoadPoint.ChargingPower ?? 0).ToString("N0")) W</div>
    <div class="progress-wrapper">
        @for (var i = 1; i <= LoadPoint.MaxPhases; i++)
        {
            var i1 = i;
            var actualCurrentOnPhase = (double)(i1 <= LoadPoint.ActualPhases ? LoadPoint.ActualCurrent ?? 0 : 0);
            var maxCurrentOnPhase = LoadPoint.MaxCurrent ?? 16;
            <MudTooltip Text='@Format("Phase {0}: {1}/{2} A", i1, actualCurrentOnPhase.ToString("N1"), maxCurrentOnPhase.ToString("N0"))'
                        RootClass="mt-1 mb-3 mx-1 w-100"
                        Placement="Placement.Left"
                        Arrow="true">
                <MudProgressLinear Color="Color.Primary"
                                   Striped="LoadPoint.ChargingPower > 0"
                                   Size="Size.Medium"
                                   Value="@(actualCurrentOnPhase)"
                                   Max="maxCurrentOnPhase">
                </MudProgressLinear>
            </MudTooltip>
        }
    </div>
    <NotChargingAtExpectedPowerReasonsComponent CarId="LoadPoint.CarId" ChargingConnectorId="LoadPoint.ChargingConnectorId" />
    <div class="row g-1 mb-2">
        @if (LoadPoint.CarId != default)
        {
            <div class="border border-gray-300 p-3 rounded col-12 col-xl-@(LoadPoint.ChargingConnectorId == default ? "12" : "6")">
                <CarDetailsComponent CarId="LoadPoint.CarId" ChargingConnectorId="LoadPoint.ChargingConnectorId" />
            </div>
        }
        @if (LoadPoint.ChargingConnectorId != default)
        {
            <div class="border border-gray-300 p-3 rounded col-xl-6 col-xl-@(LoadPoint.CarId == default ? "12" : "6")">
                <ChargingConnectorDetailsComponent ChargingConnectorId="LoadPoint.ChargingConnectorId"
                                                   CarId="@(LoadPoint.CarId)"
                                                   OnCarSelected="carId => CarSelectedForChargingConnector(LoadPoint.ChargingConnectorId.Value, carId)" />
            </div>
        }

    </div>
    <ChargingSchedulesComponent CarId="LoadPoint.CarId" ChargingConnectorId="LoadPoint.ChargingConnectorId" />
</div>

@code {
    [Parameter]
    public DtoLoadPointOverview LoadPoint { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await SignalRStateService.InitializeAsync();
        var entityKey = EntityKeyGenerationHelper.GetLoadPointEntityKey(LoadPoint.CarId, LoadPoint.ChargingConnectorId);
        Logger.LogTrace("Generated entity key: {entityKey}", entityKey);

        // Subscribe to updates
        await SignalRStateService.Subscribe<DtoLoadPointWithCurrentChargingValues>(
            DataTypeConstants.LoadPointOverviewValues,
            async void (loadpointValues) =>
            {
                try
                {
                    Logger.LogTrace("Received new LoadpointOverviewValues: {@values})", loadpointValues);
                    LoadPoint.ChargingPower = loadpointValues.ChargingPower;
                    LoadPoint.ActualCurrent = loadpointValues.ChargingCurrent;
                    LoadPoint.ActualPhases = loadpointValues.ChargingPhases;
                    await InvokeAsync(StateHasChanged).ConfigureAwait(false);
                }
                catch (Exception e)
                {
                    Logger.LogError(e, "Failed to update loadpoint values");
                }
            },
            entityKey
        );

        // Get initial state
        var initialValues = await SignalRStateService.GetStateAsync<DtoLoadPointWithCurrentChargingValues>(
            DataTypeConstants.LoadPointOverviewValues,
            entityKey);

        if (initialValues != null)
        {
            LoadPoint.ChargingPower = initialValues.ChargingPower;
            LoadPoint.ActualCurrent = initialValues.ChargingCurrent;
            LoadPoint.ActualPhases = initialValues.ChargingPhases;
        }
    }

    private async Task CarSelectedForChargingConnector(int loadPointChargingConnectorId, int? carId)
    {
        Logger.LogTrace("{method}({chargingConnectorId}, {carId})", nameof(CarSelectedForChargingConnector), loadPointChargingConnectorId, carId);
        await HomeService.UpdateCarForLoadpoint(loadPointChargingConnectorId, carId);
    }

    private string T(string key) =>
        TextLocalizer.Get<LoadpointComponentLocalizationRegistry>(key, typeof(SharedComponentLocalizationRegistry))
        ?? key;

    private string Format(string key, params object?[] arguments) =>
        string.Format(CultureInfo.CurrentCulture, T(key), arguments);
}
