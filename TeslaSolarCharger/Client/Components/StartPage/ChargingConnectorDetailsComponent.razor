@using TeslaSolarCharger.Client.Services.Contracts
@using TeslaSolarCharger.Shared.Dtos.Home
@using TeslaSolarCharger.Shared.Enums

@inject IHomeService HomeService
@inject ISnackbar Snackbar

@if (ChargingConnector == default)
{
    <PlaceholderComponent Count="6"></PlaceholderComponent>
}
else
{
    <div>
        <MudIcon Icon="@Icons.Material.Outlined.EvStation" Class="me-1" />
        @ChargingConnector.Name
        <CustomIcon IconName="@Icons.Material.Outlined.Home"></CustomIcon>
        <CustomIcon IconName="@Icons.Material.Outlined.Power" IsCrossedOut="@(!ChargingConnector.IsPluggedIn)"></CustomIcon>
        <CustomIcon IconName="@Icons.Material.Outlined.Bolt" IsCrossedOut="@(!ChargingConnector.IsCharging)"></CustomIcon>
        <GenericInput T="ChargeModeV2"
                      For="() => ChargingConnector.ChargeMode"
                      OnValueChanged="ChargeModeUpdated"/>
    </div>
    <ChargeSummaryComponent ChargingConnectorId="ChargingConnectorId"></ChargeSummaryComponent>
}

@code {
    [Parameter]
    public int? ChargingConnectorId { get; set; }

    private DtoChargingConnectorOverview? ChargingConnector { get; set; }

    private ChargeModeV2? _lastKnownChargeMode;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await RefreshData();
    }

    private async Task RefreshData()
    {
        if (ChargingConnectorId == default)
        {
            ChargingConnector = default;
            return;
        }
        ChargingConnector = await HomeService.GetChargingConnectorOverview(ChargingConnectorId.Value);
        if(ChargingConnector != default)
        {
            _lastKnownChargeMode = ChargingConnector.ChargeMode;
        }
    }

    private async Task ChargeModeUpdated(ChargeModeV2 arg)
    {
        if (ChargingConnector == default || ChargingConnectorId == default)
        {
            Snackbar.Add("Charging Connector is not set.", Severity.Error);
            return;
        }
            
        var result = await HomeService.UpdateChargingConnectorChargeMode(ChargingConnectorId.Value, arg);
        if (result.HasError)
        {
            Snackbar.Add($"Failed to update Charge Mode: {result.ErrorMessage}", Severity.Error);
            if (_lastKnownChargeMode != default)
            {
                ChargingConnector.ChargeMode = _lastKnownChargeMode.Value;
                await InvokeAsync(StateHasChanged);
            }
        }
        else
        {
            _lastKnownChargeMode = arg;
            Snackbar.Add("Charge Mode updated successfully.", Severity.Success);
        }
    }
}
