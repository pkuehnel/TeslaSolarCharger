@using TeslaSolarCharger.Client.Services.Contracts
@using System.Globalization
@using TeslaSolarCharger.Shared.Attributes
@using TeslaSolarCharger.Shared.Localization.Contracts
@using TeslaSolarCharger.Shared.Localization.Registries
@using TeslaSolarCharger.Shared.Localization.Registries.Components.StartPage

@inject IHomeService HomeService
@inject ISnackbar Snackbar
@inject ITextLocalizationService TextLocalizer


<GenericInput For="() => CurrentToSet"
              LabelName='@T("Current to set")'></GenericInput>
<GenericInput For="() => Phases"
              LabelName='@T("Phases")'
              HelperText='@T("If your Charging station supports phase switching, you can set the number of phases here.")'></GenericInput>
<div class="d-flex flex-wrap gap-2">
    <RightAlignedButtonComponent ButtonText='@T("Start Charging")'
                                 IsLoading="@_isCommandLoading"
                                 OnButtonClicked="@(StartCharging)"></RightAlignedButtonComponent>
    <RightAlignedButtonComponent ButtonText='@T("Stop Charging")'
                                 IsLoading="@_isCommandLoading"
                                 OnButtonClicked="@(StopCharging)"></RightAlignedButtonComponent>
    <RightAlignedButtonComponent ButtonText='@T("Set Current and Phases")'
                                 IsLoading="@_isCommandLoading"
                                 OnButtonClicked="@(SetCurrentAndPhases)"></RightAlignedButtonComponent>
</div>

@code {

    [Parameter]
    public int? ChargingConnectorId { get; set; }

    [Postfix("A")]
    private int? CurrentToSet { get; set; }
    private int? Phases { get; set; }

    private bool _isCommandLoading;


    private async Task StartCharging()
    {
        if (ChargingConnectorId == default)
        {
            Snackbar.Add(T("ChargingConnectorId not set"), Severity.Error);
            return;
        }

        if (CurrentToSet == default)
        {
            Snackbar.Add(T("Current required"), Severity.Error);
            return;
        }

        _isCommandLoading = true;
        var result = await HomeService.StartChargingConnectorCharging(ChargingConnectorId.Value, CurrentToSet.Value, Phases);
        if (result.HasError)
        {
            Snackbar.Add(Format("Error: {0}", result.ErrorMessage), Severity.Error);
        }
        else
        {
            Snackbar.Add(T("Command successfully sent"), Severity.Success);
        }
        _isCommandLoading = false;
    }

    private async Task SetCurrentAndPhases()
    {
        if (ChargingConnectorId == default)
        {
            Snackbar.Add(T("ChargingConnectorId not set"), Severity.Error);
            return;
        }

        if (CurrentToSet == default)
        {
            Snackbar.Add(T("Current required."), Severity.Error);
            return;
        }

        _isCommandLoading = true;
        var result = await HomeService.SetChargingConnectorCurrent(ChargingConnectorId.Value, CurrentToSet.Value, Phases);
        if (result.HasError)
        {
            Snackbar.Add(Format("Error: {0}", result.ErrorMessage), Severity.Error);
        }
        else
        {
            Snackbar.Add(T("Command successfully sent"), Severity.Success);
        }
        _isCommandLoading = false;
    }

    private async Task StopCharging()
    {
        if (ChargingConnectorId == default)
        {
            Snackbar.Add(T("ChargingConnectorId not set"), Severity.Error);
            return;
        }

        _isCommandLoading = true;
        var result = await HomeService.StopChargingConnectorCharging(ChargingConnectorId.Value);
        if (result.HasError)
        {
            Snackbar.Add(Format("Error: {0}", result.ErrorMessage), Severity.Error);
        }
        else
        {
            Snackbar.Add(T("Command successfully sent"), Severity.Success);
        }
        _isCommandLoading = false;
    }

    private string T(string key) =>
        TextLocalizer.Get<ManualOcppChargingComponentLocalizationRegistry>(key, typeof(SharedComponentLocalizationRegistry))
        ?? key;

    private string Format(string key, params object?[] arguments) =>
        string.Format(CultureInfo.CurrentCulture, T(key), arguments);
}
