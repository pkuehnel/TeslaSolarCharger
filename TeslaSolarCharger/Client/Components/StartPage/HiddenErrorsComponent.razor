@using TeslaSolarCharger.Client.Helper
@using System.Globalization
@using TeslaSolarCharger.Client.Helper.Contracts
@using TeslaSolarCharger.Shared.Dtos.LoggedError
@using TeslaSolarCharger.Shared.Enums
@using TeslaSolarCharger.Shared.Localization.Contracts
@using TeslaSolarCharger.Shared.Localization.Registries
@using TeslaSolarCharger.Shared.Localization.Registries.Components.StartPage

@implements IDisposable
@inject IHttpClientHelper HttpClientHelper
@inject ILogger<LoggedErrorsComponent> Logger
@inject ITextLocalizationService TextLocalizer


@if (_errors == default)
{
    <PlaceholderComponent></PlaceholderComponent>
}
else if (_errors.Count < 1)
{

}
else
{
    <div class="my-2">
        <MudExpansionPanels>
            <MudExpansionPanel IsInitiallyExpanded="false">
                <TitleContent>
                    <div class="d-flex align-items-center">
                        <div class="flex-grow-0">
                            <MudBadge Content="_errors.Count" Color="Color.Error" Overlap="true" Class="d-flex ml-auto">
                                <MudText Class="mt-1">@T("Hidden errors")</MudText>
                            </MudBadge>

                        </div>
                        <div class="mt-1 ml-2 flex-grow-1 text-center">
                            @T("These errors are currently not resolved but hidden.")
                        </div>
                        <div class="mt-1 ml-2 flex-grow-0">
                            <small>@T("The list is only updated once per minute")</small>
                        </div>
                    </div>
                </TitleContent>
                <ChildContent>
                    @foreach (var error in _errors)
                    {
                        <div class="mb-2">
                            <MudAlert Severity="GetSeverity(error.Severity)"
                                      NoIcon="true"
                                      ContentAlignment="HorizontalAlignment.Left"
                                      ShowCloseIcon="false">
                                <h4>@GetHeadlineText(error)</h4>
                                <div>
                                    @Format("Hidden reason: {0}", GetHideReasonText(error.HideReason))
                                </div>
                                <div style="word-break: break-word;">
                                    @((MarkupString)error.Message)
                                </div>
                            </MudAlert>
                        </div>

                    }
                </ChildContent>
            </MudExpansionPanel>
        </MudExpansionPanels>
    </div>
}


@code {
    private List<DtoHiddenError>? _errors;

    PeriodicTaskHelper? _periodicTaskHelper;


    protected override void OnInitialized()
    {
        _periodicTaskHelper = new();
        _periodicTaskHelper.Start(RefreshErrors, TimeSpan.FromMinutes(1));
    }

    private async Task RefreshErrors()
    {
        var result = await HttpClientHelper.SendGetRequestAsync<List<DtoHiddenError>>("api/LoggedErrors/GetHiddenErrors");
        if (result.HasError)
        {
            Logger.LogError("Could not refresh active logged errors: {errorMessage}", result.ErrorMessage);
            _errors = default;
            return;
        }
        _errors = result.Data;
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        _periodicTaskHelper?.Dispose();
    }

    private Severity GetSeverity(IssueSeverity issueSeverity)
    {
        return issueSeverity switch
        {
            IssueSeverity.Warning => Severity.Warning,
            IssueSeverity.Error => Severity.Error,
            _ => Severity.Info,
        };
    }

    private string GetHeadlineText(DtoHiddenError error) =>
        error.HideOccurrenceCount
            ? error.Headline
            : Format("{0} occured {1} time(s)", error.Headline, error.OccurrenceCount);

    private string GetHideReasonText(LoggedErrorHideReason hideReason) =>
        hideReason switch
        {
            LoggedErrorHideReason.NotEnoughOccurrences => T("Not Enough occurrences"),
            LoggedErrorHideReason.Dismissed => T("Dismissed"),
            _ => hideReason.ToString(),
        };

    private string T(string key) =>
        TextLocalizer.Get<HiddenErrorsComponentLocalizationRegistry>(key, typeof(SharedComponentLocalizationRegistry))
        ?? key;

    private string Format(string key, params object?[] arguments) =>
        string.Format(CultureInfo.CurrentCulture, T(key), arguments);
}
