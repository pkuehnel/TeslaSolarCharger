@page "/backupAndRestore"
@using System.Net.Http.Headers
@using TeslaSolarCharger.Shared.Dtos

@inject IJSRuntime JsRuntime
@inject ISnackbar Snackbar
@inject HttpClient HttpClient

<h1>Backup and Restore</h1>
<div>During the backup or restore process all TSC actions will be stopped and started again after the Backup</div>

<h2>Backup</h2>
<div class="alert alert-warning" role="alert">
    Note: The backup contains private information like password for your database, possibly access codes to your solar system, latest known location of your car(s),... Do not share the backup in public.
</div>

<RightAlignedButtonComponent IsDisabled="@(_processingBackup || _processingRestore)"
                             OnButtonClicked="StartBackup"
                             IsLoading="_processingBackup"
                             ButtonText="Start Backup"></RightAlignedButtonComponent>

<hr />
<h2>Restore</h2>
<div class="alert alert-warning" role="alert">
    After the restore process you need to restart the TSC container.
</div>
<div class="mb-2">
    <MudFileUpload T="IBrowserFile" FilesChanged="SelectFile" Accept=".zip" MaximumFileCount="1">
        <ActivatorContent>
            <MudButton HtmlTag="label"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       StartIcon="@Icons.Material.Filled.AttachFile">
                Select Backup File
            </MudButton>
        </ActivatorContent>
    </MudFileUpload>
</div>

@if (_file != default)
{
    <div class="mb-2">
        @_file.Name <code>@((_file.Size * 0.000001).ToString("0.00")) MB</code>
    </div>
}

<RightAlignedButtonComponent IsDisabled="@(_processingBackup || _processingRestore || _file == default)"
                             DisabledToolTipText=""
                             OnButtonClicked="StartRestore"
                             IsLoading="_processingRestore"
                             ButtonText="Start restore"></RightAlignedButtonComponent>

<MudExpansionPanels>
    <MudExpansionPanel Text="Automatically created backups before each update" ExpandedChanged="RefreshBackups">
        <MudDataGrid Items="_backupFiles">
            <Columns>
                <PropertyColumn Property="x => x.FileName"></PropertyColumn>
                <PropertyColumn Property="x => x.CreationDate"></PropertyColumn>
                <TemplateColumn CellClass="d-flex justify-end">
                    <CellTemplate>
                        <MudButton Size="@Size.Small"
                                   Variant="@Variant.Filled"
                                   Color="@Color.Primary"
                                   StartIcon="@Icons.Material.Filled.Download"
                                   OnClick="@(_ => DownloadFile(context.Item.FileName))">Download</MudButton>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
    </MudExpansionPanel>
</MudExpansionPanels>


@code {
    private bool _processingBackup;
    private bool _processingRestore;
    private readonly long _maxFileSize = 1024 * 1024 * 1024; // 1024 MB

    private List<DtoBackupFileInformation> _backupFiles = new List<DtoBackupFileInformation>();


    private IBrowserFile? _file;

    private async Task StartBackup()
    {
        _processingBackup = true;
        await InvokeAsync(StateHasChanged);
        await Task.Yield();
        var fileName = "TSCBackup.zip";
        var url = "api/BaseConfiguration/DownloadBackup";
        await JsRuntime.InvokeVoidAsync("triggerFileDownload", fileName, url).ConfigureAwait(false);
        await Task.Delay(5000);
        _processingBackup = false;
        await InvokeAsync(StateHasChanged);
    }

    private void SelectFile(IBrowserFile? file)
    {
        if(file == default)
        {
            return;
        }
        if (file.Size > _maxFileSize)
        {
            Snackbar.Add($"{file.Name} is greater than {_maxFileSize / 1024 / 1024} and won't be uploaded."
                , Severity.Error);
        }
        _file = file;
    }

    private async Task StartRestore()
    {
        _processingRestore = true;
        var upload = false;
        if (_file == default)
        {
            Snackbar.Add("No file selected", Severity.Error);
            return;
        }
        using var content = new MultipartFormDataContent();
        try
        {
            var fileContent = new StreamContent(_file.OpenReadStream(_maxFileSize));
            fileContent.Headers.ContentType = new MediaTypeHeaderValue("multipart/form-data");
            content.Add(
                content: fileContent,
                name: "\"file\"",
                fileName: _file.Name);
            upload = true;
        }
        catch (Exception e)
        {
            Snackbar.Add($"Error while uploading file: {e.Message}", Severity.Error);
            _processingRestore = false;
            return;
        }

        if (!upload)
        {
            _processingRestore = false;
            return;
        }

        // ReSharper disable once UseConfigureAwaitFalse
        var response = await HttpClient.PostAsync("api/BaseConfiguration/RestoreBackup", content);
        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Restore complete", Severity.Success);
        }
        else
        {
            Snackbar.Add($"Error while restoring backup: {response.ReasonPhrase}", Severity.Error);
        }

        _processingRestore = false;
    }

    private async Task RefreshBackups(bool arg)
    {
        if (!arg)
        {
            return;
        }
        try
        {
            var backupFiles = await HttpClient.GetFromJsonAsync<List<DtoBackupFileInformation>>("api/BaseConfiguration/GetAutoBackupFileInformations");
            if (backupFiles != null)
            {
                _backupFiles = backupFiles;
            }
            else
            {
                Snackbar.Add("No backups found", Severity.Info);
            }
        }
        catch (Exception e)
        {
            Snackbar.Add($"Error while refreshing backups: {e.Message}", Severity.Error);
        }
    }

    private async Task DownloadFile(string itemFileName)
    {
        var url = $"api/BaseConfiguration/DownloadAutoBackup?fileName={Uri.EscapeDataString(itemFileName)}";
        // ReSharper disable once UseConfigureAwaitFalse
        await JsRuntime.InvokeVoidAsync("triggerFileDownload", itemFileName, url);
    }

}
