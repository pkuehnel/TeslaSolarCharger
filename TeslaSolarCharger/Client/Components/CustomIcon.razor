@using TeslaSolarCharger.Shared.Localization.Contracts
@using TeslaSolarCharger.Shared.Localization.Registries
@using TeslaSolarCharger.Shared.Localization.Registries.Components

@inject ITextLocalizationService TextLocalizer

@if (!string.IsNullOrWhiteSpace(TooltipText))
{
    <MudTooltip Text="@(IsCrossedOut ? $"{GetTooltipPrefix()}{TooltipText}" : TooltipText)"
                Placement="Placement.Top"
                Arrow="true">
        @if (IsCrossedOut)
        {
            <span class="@Class" style="position: relative; display: inline-block;">
                <MudIcon Icon="@IconName" />
                <span class="cross-line"></span>
            </span>
        }
        else
        {
            <MudIcon Icon="@IconName" />
        }
    </MudTooltip>
}
else
{
    @if (IsCrossedOut)
    {
        <span class="@Class" style="position: relative; display: inline-block;">
            <MudIcon Icon="@IconName" />
            <span class="cross-line"></span>
        </span>
    }
    else
    {
        <MudIcon Icon="@IconName" />
    }
}

@code {
    [Parameter]
    public string IconName { get; set; } = Icons.Material.Filled.BorderClear;

    [Parameter]
    public string Class { get; set; } = string.Empty;

    [Parameter]
    public bool IsCrossedOut { get; set; }

    [Parameter]
    public string? TooltipText { get; set; }

    [Parameter]
    public string? IsCrossedOutTooltipPrefix { get; set; }

    private string GetTooltipPrefix() =>
        string.IsNullOrWhiteSpace(IsCrossedOutTooltipPrefix)
            ? T("Not ")
            : IsCrossedOutTooltipPrefix!;

    private string T(string key) =>
        TextLocalizer.Get<CustomIconLocalizationRegistry>(key, typeof(SharedComponentLocalizationRegistry))
        ?? key;
}
