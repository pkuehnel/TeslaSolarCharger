@using System.Web
@using System.ComponentModel
@using TeslaSolarCharger.Shared
@using TeslaSolarCharger.Shared.Enums
@using TeslaSolarCharger.Shared.Attributes


<div class="mb-3">
    <GenericInput For="() => ModbusUnitIdentifier" HtmlInputType="InputType.Number" ImmediateValueUpdate="true" />
    
    <GenericInput For="() => RegisterType" DropDownOptions="RegisterTypeOptions" ImmediateValueUpdate="true" />
    
    <GenericInput For="() => ValueType" DropDownOptions="ValueTypeOptions" ImmediateValueUpdate="true" />
    
    <GenericInput For="() => StartingAddress" HtmlInputType="InputType.Number" ImmediateValueUpdate="true" />
    
    <GenericInput For="() => Quantity" HtmlInputType="InputType.Number" ImmediateValueUpdate="true" />
    
    <GenericInput For="() => IpAddress" HtmlInputType="InputType.Text" ImmediateValueUpdate="true" />
    
    <GenericInput For="() => Port" HtmlInputType="InputType.Number" ImmediateValueUpdate="true" />
    
    <div class="mb-3 form-check">
        <input class="form-check-input" @bind="@SwapRegisters" type="checkbox" id="@($"{IdPrefix}SwapRegisters")" >
        <label class="form-check-label" for="@($"{IdPrefix}SwapRegisters")">
            Swap Register (bigEndian / littleEndian):
        </label>
    </div>
    
    <GenericInput For="() => ConnectDelaySeconds" HtmlInputType="InputType.Number" ImmediateValueUpdate="true" />
    
    <GenericInput For="() => TimeoutSeconds" HtmlInputType="InputType.Number" ImmediateValueUpdate="true" />
    <hr/>
</div>


@code {

    #region HelperProperties
    [DisplayName("Unit Identifier")]
    private string? ModbusUnitIdentifier
    {
        get => _modbusUnitIdentifier;
        set
        {
            _modbusUnitIdentifier = value;
            UpdateUrlFromModbusValues().GetAwaiter().GetResult();
        }
    }

    [DisplayName("Register Address")]
    private string? StartingAddress
    {
        get => _startingAddress;
        set
        {
            _startingAddress = value;
            UpdateUrlFromModbusValues().GetAwaiter().GetResult();
        }
    }

    [DisplayName("Number of Registers")]
    private string? Quantity
    {
        get => _quantity;
        set
        {
            _quantity = value;
            UpdateUrlFromModbusValues().GetAwaiter().GetResult();
        }
    }

    [DisplayName("IP address")]
    private string? IpAddress
    {
        get => _ipAddress;
        set
        {
            _ipAddress = value;
            UpdateUrlFromModbusValues().GetAwaiter().GetResult();
        }
    }

    [DisplayName("Port")]
    private string? Port
    {
        get => _port;
        set
        {
            _port = value;
            UpdateUrlFromModbusValues().GetAwaiter().GetResult();
        }
    }

    [DisplayName("Connect Delay")]
    [Postfix("s")]
    private string? ConnectDelaySeconds
    {
        get => _connectDelaySeconds;
        set
        {
            _connectDelaySeconds = value;
            UpdateUrlFromModbusValues().GetAwaiter().GetResult();
        }
    }

    [DisplayName("Read Timeout")]
    [Postfix("s")]
    private string? TimeoutSeconds
    {
        get => _timeoutSeconds;
        set
        {
            _timeoutSeconds = value;
            UpdateUrlFromModbusValues().GetAwaiter().GetResult();
        }
    }

    [DisplayName("Register Type")]
    private ModbusRegisterType? RegisterType
    {
        get => _modbusRegisterType;
        set
        {
            _modbusRegisterType = value;
            UpdateUrlFromModbusValues().GetAwaiter().GetResult();
        }
    }

    [DisplayName("Value Type")]
    private ModbusValueType? ValueType
    {
        get => _modbusValueType;
        set
        {
            _modbusValueType = value;
            UpdateUrlFromModbusValues().GetAwaiter().GetResult();
        }
    }

    private bool? SwapRegisters
    {
        get => _swapRegisters;
        set
        {
            _swapRegisters = value;
            UpdateUrlFromModbusValues().GetAwaiter().GetResult();
        }
    }

    #endregion

    private string? _modbusUnitIdentifier;
    private string? _startingAddress;
    private string? _quantity;
    private string? _ipAddress;
    private string? _port;
    private string? _connectDelaySeconds;
    private string? _timeoutSeconds;
    private ModbusRegisterType? _modbusRegisterType;
    private ModbusValueType? _modbusValueType;
    private bool? _swapRegisters;

    private readonly Dictionary<int, string> RegisterTypeOptions = Enum.GetValues<ModbusRegisterType>()
        .ToDictionary(e => (int)e, e => e.ToFriendlyString());

    private readonly Dictionary<int, string> ValueTypeOptions = Enum.GetValues<ModbusValueType>()
        .ToDictionary(e => (int)e, e => e.ToFriendlyString());


    [Parameter]
    public string? ModbusUrl { get; set; }

    [Parameter]
#pragma warning disable CS8618
    public string IdPrefix { get; set; }
#pragma warning restore CS8618


    [Parameter]
    public EventCallback<string> ModbusUrlChanged { get; set; }

    protected override Task OnInitializedAsync()
    {
        if (string.IsNullOrWhiteSpace(ModbusUrl))
        {
            ModbusUrl = "http://modbusplugin/api/Modbus/GetTypedValue?unitIdentifier=3&startingAddress=&quantity=&ipAddress=&port=502&factor=1&connectDelaySeconds=1&timeoutSeconds=2&modbusValueType=0&modbusRegisterType=0";
        }
        if (!string.IsNullOrEmpty(ModbusUrl) && ModbusUrl.StartsWith("http://modbusplugin/api/Modbus/"))
        {
            var uri = new Uri(ModbusUrl);
            ModbusUnitIdentifier = HttpUtility.ParseQueryString(uri.Query).Get("unitIdentifier");
            StartingAddress = HttpUtility.ParseQueryString(uri.Query).Get("startingAddress");
            Quantity = HttpUtility.ParseQueryString(uri.Query).Get("quantity");
            IpAddress = HttpUtility.ParseQueryString(uri.Query).Get("ipAddress");
            Port = HttpUtility.ParseQueryString(uri.Query).Get("port");
            ConnectDelaySeconds = HttpUtility.ParseQueryString(uri.Query).Get("connectDelaySeconds");
            TimeoutSeconds = HttpUtility.ParseQueryString(uri.Query).Get("timeoutSeconds");
            var modbusValueTypeString = HttpUtility.ParseQueryString(uri.Query).Get("modbusValueType");
            if (string.IsNullOrEmpty(modbusValueTypeString))
            {
                ValueType = null;
                var methodName = uri.Segments.Last();
                if (methodName.Equals("GetValue", StringComparison.CurrentCultureIgnoreCase) || methodName.Equals("GetInt32Value", StringComparison.CurrentCultureIgnoreCase))
                {
                    ValueType = ModbusValueType.Int;
                }
                else if (methodName.Equals("GetInt16Value", StringComparison.CurrentCultureIgnoreCase))
                {
                    ValueType = ModbusValueType.Short;
                }
                else if (methodName.Equals("GetFloatValue", StringComparison.CurrentCultureIgnoreCase))
                {
                    ValueType = ModbusValueType.Float;
                }
                else
                {
                    ValueType = ModbusValueType.Int;
                }
            }
            else
            {
                ValueType = (ModbusValueType?)Enum.Parse(typeof(ModbusValueType), modbusValueTypeString);
            }
            var modbusRegisterTypeString = HttpUtility.ParseQueryString(uri.Query).Get("modbusRegisterType");
            if (string.IsNullOrEmpty(modbusRegisterTypeString))
            {
                RegisterType = ModbusRegisterType.HoldingRegister;
            }
            else
            {
                RegisterType = (ModbusRegisterType?)Enum.Parse(typeof(ModbusRegisterType), modbusRegisterTypeString);
            }
            var registerSwapString = HttpUtility.ParseQueryString(uri.Query).Get("registerSwap");
            if (string.IsNullOrEmpty(registerSwapString))
            {
                SwapRegisters = false;
            }
            else
            {
                SwapRegisters = Boolean.Parse(registerSwapString);
            }
        }
        return Task.CompletedTask;
    }

    private async Task UpdateUrlFromModbusValues()
    {
        ModbusUrl = $"http://modbusplugin/api/Modbus/GetTypedValue?unitIdentifier={ModbusUnitIdentifier}&startingAddress={StartingAddress}&quantity={Quantity}&ipAddress={IpAddress}&port={Port}&connectDelaySeconds={ConnectDelaySeconds}&timeoutSeconds={TimeoutSeconds}&modbusValueType={ValueType}&modbusRegisterType={RegisterType}&registerSwap={SwapRegisters}";
        await ModbusUrlChanged.InvokeAsync(ModbusUrl).ConfigureAwait(false);
    }
}