@using Blazored.FluentValidation
@using TeslaSolarCharger.Client.Helper.Contracts
@using TeslaSolarCharger.Client.Wrapper
@using TeslaSolarCharger.Shared.Localization.Contracts
@using TeslaSolarCharger.Shared.Localization.Registries
@using TeslaSolarCharger.Shared.Localization.Registries.Components

@inject IHttpClientHelper HttpClientHelper
@inject ITextLocalizationService TextLocalizer

@typeparam T

<EditForm EditContext="@WrappedElement.EditContext" OnValidSubmit="@(_ => HandleValidSubmit(WrappedElement.Item))">
    <FluentValidationValidator />
    @ChildContent
    <ValidationSummary />
    @if (!HideSubmitButton)
    {
        <div class="m-2">
            <MudPaper Class="d-flex justify-end flex-grow-1 gap-4 pr-2 mb-2" Elevation="0">
                <MudButton Variant="Variant.Filled" Color="Color.Primary"
                           ButtonType="ButtonType.Submit"
                           StartIcon="@Icons.Material.Filled.Save"
                           Disabled="_isSubmitting">
                    @if (_isSubmitting)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">@L("Processing")</MudText>
                    }
                    else
                    {
                        <MudText>@L("Save")</MudText>
                    }
                </MudButton>
            </MudPaper>
        </div>

    }
</EditForm>


@code {

    [Parameter]
    public EditableItem<T> WrappedElement { get; set; }
    [Parameter]
    public RenderFragment ChildContent { get; set; }
    [Parameter]
    public bool HideSubmitButton { get; set; }
    [Parameter]
    public string? SubmitUrl { get; set; }

    [Parameter]
    public EventCallback<T> OnValidSubmit { get; set; }

    [Parameter]
    public EventCallback<T> OnAfterSuccessfullSubmit { get; set; }

    public bool IsDirty => WrappedElement.EditContext.IsModified();

    public bool IsSubmitting => _isSubmitting;

    private bool _isSubmitting;



    public async Task SubmitAsync()
    {
        if (_isSubmitting)
        {
            return;
        }

        if (WrappedElement?.EditContext == null)
        {
            return;
        }

        var isValid = WrappedElement.EditContext.Validate();
        if (!isValid)
        {
            return;
        }

        await HandleValidSubmit(WrappedElement.Item);
    }

    private async Task HandleValidSubmit(T wrappedItem)
    {
        _isSubmitting = true;
        if (SubmitUrl == default)
        {
            _ = OnValidSubmit.InvokeAsync(wrappedItem);
            _isSubmitting = false;
            return;
        }
        var result = await HttpClientHelper.SendPostRequestAsync<object>(SubmitUrl, wrappedItem);
        if (!result.HasError)
        {
            _ = OnAfterSuccessfullSubmit.InvokeAsync(wrappedItem);
            _isSubmitting = false;
            return;
        }

        if (result.ValidationProblemDetails != null && result.ValidationProblemDetails.Errors.Any())
        {
            MapErrorsToEditContext(result.ValidationProblemDetails.Errors);
        }
        else
        {
            Console.WriteLine("No validationErrors found in ProblemDetails.Extensions.");
        }
        _isSubmitting = false;
    }

    private void MapErrorsToEditContext(IDictionary<string, string[]> errors)
    {
        // Clear old messages
        WrappedElement.MessageStore.Clear();

        // Add new messages
        foreach (var fieldWithErrors in errors)
        {
            var fieldIdentifier = new FieldIdentifier(WrappedElement.Item, fieldWithErrors.Key);
            foreach (var errorMessage in fieldWithErrors.Value)
            {
                WrappedElement.MessageStore.Add(fieldIdentifier, errorMessage);
            }
        }

        // Force Blazor to re-render messages
        WrappedElement.EditContext.NotifyValidationStateChanged();
    }


    private string L(string key) =>
        TextLocalizer.Get<EditFormComponentLocalizationRegistry>(key, typeof(SharedComponentLocalizationRegistry))
        ?? key;
}
