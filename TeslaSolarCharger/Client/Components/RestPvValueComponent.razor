@using TeslaSolarCharger.Shared.Contracts
@using TeslaSolarCharger.Shared.Enums
@using TeslaSolarCharger.Shared
@using System.ComponentModel
@using TeslaSolarCharger.Shared.Attributes
@inject INodePatternTypeHelper NodePatternTypeHelper


<GenericInput For="() => Url" LabelName="@($"{Purpose} Url")" />

@if (SolarValueSource == SolarValueSource.Modbus)
{
    <div class="form-group mb-3">
        <InputCheckbox id="@($"{IdPrefix}IsModbusUrl")" @bind-Value="IsModbusUrl" class="form-check-input" />
        <label for="@($"{IdPrefix}IsModbusUrl")">Use Modbus Url Creation Tool</label>
        <div>
            <small class="form-text text-muted">Use this to configure URL for Modbus plugin.</small>
        </div>
    </div>
    @if (IsModbusUrl)
    {
        <ModbusUrlCreationComponent 
                            IdPrefix="IdPrefix"
                            @bind-ModbusUrl="Url"
                            @bind-ModbusUrl:event="ModbusUrlChanged" />
    }
}
else
{
    <div class="mb-3">
        @if (Headers.Count > 0)
        {
            <h4>Headers</h4>
        }
        @for (var i = 0; i < Headers.Count; i++)
        {
            var header = Headers.ElementAt(i);
            <div class="d-flex align-items-center">
                <div class="p-2 flex-grow-1">
                    <MudTextField T="string" Label="@($"Key {i + 1}")" Variant="Variant.Outlined" Value="@header.Key" TextChanged="@(e => UpdateHeaderKey(header.Key, e.ToString()))"></MudTextField>
                </div>
                <div class="p-2 flex-grow-1">
                    <MudTextField T="string" Label="@($"Value {i + 1}")" Variant="Variant.Outlined" Value="@header.Value" TextChanged="@(e => Headers[header.Key] = e.ToString())"></MudTextField>
                </div>
                <div class="p-2">
                    <MudFab StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => RemoveHeader(header.Key)"></MudFab>
                </div>
            </div>
        }
    </div>

    <div><button type="button" class="btn btn-secondary mb-3" @onclick="AddNewHeader">Add new header</button></div>

}


@code {
    [Parameter]
#pragma warning disable CS8618
    public string Purpose { get; set; }
#pragma warning restore CS8618

    private string IdPrefix => Purpose.Replace(" ", "");

    [Parameter]
    public SolarValueSource SolarValueSource { get; set; }
#pragma warning disable BL0007
    [Parameter]
    [DisplayName("Url")]
    public string? Url
    {
        get => _url;
        set
        {
            if (_url == value) return;
            _url = value;
            UrlChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<string> UrlChanged { get; set; }


    [Parameter]
    public bool IsModbusUrl
    {
        get => _isModbusUrl;
        set
        {
            if (_isModbusUrl == value) return;
            _isModbusUrl = value;
            IsModbusUrlChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<bool> IsModbusUrlChanged { get; set; }

    [Parameter]
    public Dictionary<string, string> Headers { get; set; } = null!;

    [Parameter]
    public EventCallback<Dictionary<string, string>> HeadersChanged { get; set; }


    private void UpdateHeaderKey(string oldKey, string newKey)
    {
        var value = Headers[oldKey];
        Headers.Remove(oldKey);
        Headers.Add(newKey, value);
        HeadersChanged.InvokeAsync(Headers);
    }

    private void AddNewHeader()
    {
        Headers.Add($"{Headers.Count + 1}", "");
        HeadersChanged.InvokeAsync(Headers);
    }

    private void RemoveHeader(string key)
    {
        Headers.Remove(key);
        HeadersChanged.InvokeAsync(Headers);
    }

    private string? _url;
    private bool _isModbusUrl;


}
