@page "/Prediction"

@using TeslaSolarCharger.Client.Services.Contracts
@using ApexCharts
@using TeslaSolarCharger.Client.Dtos
@using TeslaSolarCharger.Shared.TimeProviding
@using Color = MudBlazor.Color
@using Size = MudBlazor.Size

@inject IEnergyDataService EnergyDataService
@inject TimeProvider TimeProvider

<MudExpansionPanels>
    <MudExpansionPanel>
        <TitleContent>
            <div class="d-flex justify-content-between align-items-center">
                @if (SelectedDate == TimeProvider.GetLocalNow().Date)
                {
                    <span>Prediction from now:</span>
                    @if (SolarPredictionData != null)
                    {
                        var currentHour = TimeProvider.GetLocalNow().Hour;
                        <span>@($"{SolarPredictionData.Where(v => v.Key > currentHour).Sum(v => v.Value):F1} kWh")</span>
                    }
                    else
                    {
                        <MudSkeleton Width="100px" Height="24px" />
                    }
                    <span>Produced today:</span>
                    @if (SolarActualData != null)
                    {
                        <span>@($"{SolarActualData.Sum(v => v.Value):F1} kWh")</span>
                    }
                    else
                    {
                        <MudSkeleton Width="100px" Height="24px" />
                    }
                    
                }
                else if (SelectedDate < TimeProvider.GetLocalNow().Date)
                {
                    <span>Estimated Production:</span>
                    @if (SolarPredictionData != null)
                    {
                        <span>@($"{SolarPredictionData.Sum(v => v.Value):F1} kWh")</span>
                    }
                    else
                    {
                        <MudSkeleton Width="100px" Height="24px" />
                    }
                    <span>Actual Production:</span>
                    @if (SolarActualData != null)
                    {
                        <span>@($"{SolarActualData.Sum(v => v.Value):F1} kWh")</span>
                    }
                    else
                    {
                        <MudSkeleton Width="100px" Height="24px" />
                    }
                    
                }
                else
                {
                    <!-- Future Date: show estimated solar production and house consumption -->
                    <span>Solar Prediction:</span>
                    @if (SolarPredictionData != null)
                    {
                        <span>@($"{SolarPredictionData.Sum(v => v.Value):F1} kWh")</span>
                    }
                    else
                    {
                        <MudSkeleton Width="100px" Height="24px" />
                    }
                    <span>House Prediction:</span>
                    @if (HousePredictionData != null)
                    {
                        <span>@($"{HousePredictionData.Sum(v => v.Value):F1} kWh")</span>
                    }
                    else
                    {
                        <MudSkeleton Width="100px" Height="24px" />
                    }
                }
            </div>
        </TitleContent>
        <ChildContent>
            <div class="d-flex align-items-center justify-content-center mb-3">
                <MudFab StartIcon="@Icons.Material.Filled.ArrowLeft"
                        Color="Color.Primary"
                        Size="Size.Small"
                        OnClick="PreviousDay"
                        Disabled="IsPreviousDisabled" />
                <GenericInput For="() => SelectedDate" LabelName="Date"></GenericInput>
                <MudFab StartIcon="@Icons.Material.Filled.ArrowRight"
                        Color="Color.Primary"
                        Size="Size.Small"
                        OnClick="NextDay"
                        Disabled="IsNextDisabled" />
            </div>
            @if (HousePredictionData == default || SolarActualData == default || HouseActualData == default || (SolarPredictionData == default && _isSolarPredictionEnabled))
            {
                <div class="align-items-center justify-content-center mb-3">
                    <PlaceholderComponent Count="8"></PlaceholderComponent>
                </div>
            }
            else
            {
                <div class="d-flex align-items-center justify-content-center mb-3">
                    <ApexChart TItem="DtoChartValue<int, decimal>"
                               Title="kWh"
                               Options="_options"
                               Width="600"
                               Height="400">
                        @if (SolarPredictionData != default)
                        {
                            <ApexPointSeries TItem="DtoChartValue<int, decimal>"
                                             Items="SolarPredictionData"
                                             Name="@($"Solar Prediction ({(SolarPredictionData.Sum(v => v.Value)).ToString("F1")} kWh)")"
                                             SeriesType="SeriesType.Line"
                                             XValue="@(e => e.Key)"
                                             YValue="@(e => (decimal?)e.Value)"
                                             Color="#FFD580"/>
                        }
                        <ApexPointSeries TItem="DtoChartValue<int, decimal>"
                                         Items="HousePredictionData"
                                         Name="@($"House Prediction ({(HousePredictionData.Sum(v => v.Value)).ToString("F1")} kWh)")"
                                         SeriesType="SeriesType.Line"
                                         XValue="@(e => e.Key)"
                                         YValue="@(e => (decimal?)e.Value)"
                                         Color="lightpink"/>
                        <ApexPointSeries TItem="DtoChartValue<int, decimal>"
                                         Items="SolarActualData"
                                         Name="@($"Solar Actual ({(SolarActualData.Sum(v => v.Value)).ToString("F1")} kWh)")"
                                         SeriesType="SeriesType.Line"
                                         XValue="@(e => e.Key)"
                                         YValue="@(e => (decimal?)e.Value)"
                                         Color="orange"/>
                        <ApexPointSeries TItem="DtoChartValue<int, decimal>"
                                         Items="HouseActualData"
                                         Name="@($"House Actual ({(HouseActualData.Sum(v => v.Value)).ToString("F1")} kWh)")"
                                         SeriesType="SeriesType.Line"
                                         XValue="@(e => e.Key)"
                                         YValue="@(e => (decimal?)e.Value)"
                                         Color="deeppink"/>
                    </ApexChart>
                </div>
            }
        </ChildContent>
    </MudExpansionPanel>
</MudExpansionPanels>

@code {
    private List<DtoChartValue<int, decimal>>? SolarPredictionData { get; set; }
    private List<DtoChartValue<int, decimal>>? HousePredictionData { get; set; }
    private List<DtoChartValue<int, decimal>>? SolarActualData { get; set; }
    private List<DtoChartValue<int, decimal>>? HouseActualData { get; set; }
    private DateTime? SelectedDate { get; set; }
    private DateTime MaxAllowedDate => TimeProvider.GetLocalNow().Date.AddDays(1);
    private ApexChartOptions<DtoChartValue<int, decimal>>? _options;
    private bool _isSolarPredictionEnabled;

    protected override async Task OnInitializedAsync()
    {
        var currentTime = TimeProvider.GetLocalNow();
        SelectedDate = currentTime.Date;
        await base.OnInitializedAsync();
        _isSolarPredictionEnabled = await EnergyDataService.SolarPowerPredictionEnabled();
        _options = new ApexChartOptions<DtoChartValue<int, decimal>>
            {
                Chart = new Chart
                {
                    Toolbar = new Toolbar
                    {
                        Show = false,
                    },
                    DropShadow = new DropShadow
                    {
                        Enabled = true,
                        Color = "",
                        Top = 18,
                        Left = 7,
                        Blur = 10,
                        Opacity = 0.2d,
                    }
                },
                DataLabels = new ApexCharts.DataLabels
                {
                // OffsetY = -6d,
                },
                Grid = new Grid
                {
                    BorderColor = "#e7e7e7",
                    Row = new GridRow
                    {
                        Colors = new List<string> { "#f3f3f3", "transparent" },
                        Opacity = 0.5d
                    }
                },

                Markers = new Markers { Shape = ShapeEnum.Circle, Size = 5, FillOpacity = new Opacity(0.8d), },
                Stroke = new Stroke { Curve = Curve.Smooth },
                Legend = new Legend
                {
                    Position = LegendPosition.Bottom,
                    HorizontalAlign = ApexCharts.Align.Center,
                    Floating = false,
                // OffsetX = -5,
                // OffsetY = 25,
                },
                Yaxis = new List<YAxis>
            {
                new YAxis
                {
                    Labels = new YAxisLabels
                    {
                        Formatter = "function(value) { return value.toLocaleString(); }"
                    },
                },
            },

            };

        await RefreshData(DateOnly.FromDateTime(SelectedDate.Value));
    }

    private async Task RefreshData(DateOnly date)
    {
        HousePredictionData = default;
        SolarPredictionData = default;
        HouseActualData = default;
        SolarActualData = default;
        var housePredictionTask = EnergyDataService.GetPredictedHouseConsumptionByLocalHour(date);
        var solarActualTask = EnergyDataService.GetActualSolarProductionByLocalHour(date);
        var houseActualTask = EnergyDataService.GetActualHouseConsumptionByLocalHour(date);
        if (_isSolarPredictionEnabled)
        {
            var solarPredictionTask = EnergyDataService.GetPredictedSolarProductionByLocalHour(date);
            var solarPredictionData = await solarPredictionTask;
            SolarPredictionData = solarPredictionData.Select(e => new DtoChartValue<int, decimal>(e.Key, new(e.Value / 1000.0))).ToList();
        }
        var housePredictionData = await housePredictionTask;
        var solarActualData = await solarActualTask;
        var houseActualData = await houseActualTask;
        HousePredictionData = housePredictionData.Select(e => new DtoChartValue<int, decimal>(e.Key, new(e.Value / 1000.0))).ToList();
        SolarActualData = solarActualData.Select(e => new DtoChartValue<int, decimal>(e.Key, new(e.Value / 1000.0))).ToList();
        HouseActualData = houseActualData.Select(e => new DtoChartValue<int, decimal>(e.Key, new(e.Value / 1000.0))).ToList();
        StateHasChanged();
    }

    private async Task PreviousDay()
    {
        if (SelectedDate == default)
        {
            return;
        }
        SelectedDate = SelectedDate.Value.AddDays(-1);
        await RefreshData(DateOnly.FromDateTime(SelectedDate.Value));
    }

    private async Task NextDay()
    {
        if (SelectedDate == default)
        {
            return;
        }
        if (SelectedDate < MaxAllowedDate)
        {
            SelectedDate = SelectedDate.Value.AddDays(1);
            await RefreshData(DateOnly.FromDateTime(SelectedDate.Value));
        }
    }

    private bool IsPreviousDisabled => false; // No limit for going back
    private bool IsNextDisabled => SelectedDate >= MaxAllowedDate;
}