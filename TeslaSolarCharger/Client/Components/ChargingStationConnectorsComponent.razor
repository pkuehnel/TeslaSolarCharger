@using TeslaSolarCharger.Client.Services.Contracts
@using TeslaSolarCharger.Client.Wrapper
@using TeslaSolarCharger.Shared.Dtos.ChargingStation

@inject IChargingStationsService ChargingStationsService
@inject ISnackbar Snackbar

@if (_chargingStationConnectors == default)
{
    <PlaceholderComponent Count="3"></PlaceholderComponent>
}
else
{
    <MudExpansionPanels>
        @foreach (var chargingStationConnector in _chargingStationConnectors)
        {
            <MudExpansionPanel Text="@($"{chargingStationConnector.Item.Name}")">
                <EditFormComponent T="DtoChargingStationConnector" WrappedElement="@(chargingStationConnector)"
                                   OnAfterSuccessfullSubmit="ShowSuccessMessage"
                                   SubmitUrl="@($"api/ChargingStations/UpdateChargingStationConnector")">
                    @if (chargingStationConnector.Item.MinCurrent < 6)
                    {
                        <MudAlert Severity="Severity.Warning"
                                  NoIcon="true"
                                  ContentAlignment="HorizontalAlignment.Left">
                            <h5>Current below 6A not recommended</h5>
                            The Type 2 standard states that the minimum current below 6A is not allowed. Setting this below 6A might result in unexpected behaviour like the car not charging at all.
                        </MudAlert>
                    }
                    <GenericInput For="() => chargingStationConnector.Item.Name"></GenericInput>
                    <GenericInput For="() => chargingStationConnector.Item.ShouldBeManaged"></GenericInput>
                    <GenericInput For="() => chargingStationConnector.Item.MinCurrent"></GenericInput>
                    <GenericInput For="() => chargingStationConnector.Item.SwitchOffAtCurrent"></GenericInput>
                    <GenericInput For="() => chargingStationConnector.Item.SwitchOnAtCurrent"></GenericInput>
                    <GenericInput For="() => chargingStationConnector.Item.MaxCurrent"></GenericInput>
                    <GenericInput For="() => chargingStationConnector.Item.ConnectedPhasesCount"></GenericInput>
                    <GenericInput For="() => chargingStationConnector.Item.ChargingPriority"></GenericInput>
                    @if (_carOptions == default)
                    {
                        <PlaceholderComponent Count="1"></PlaceholderComponent>
                    }
                    else
                    {
                        <GenericInput For="() => chargingStationConnector.Item.AllowedCars"
                                      DropDownOptions="_carOptions"
                                      DisplayMultiSelectValues="true"></GenericInput>
                    }
                    <GenericInput For="() => chargingStationConnector.Item.AllowGuestCars"></GenericInput>
                    @if (AutoPhaseSwitchingSupported)
                    {
                        <GenericInput For="() => chargingStationConnector.Item.AutoSwitchBetween1And3PhasesEnabled"></GenericInput>
                        <GenericInput For="() => chargingStationConnector.Item.PhaseSwitchCoolDownTimeSeconds"></GenericInput>
                    }

                </EditFormComponent>
            </MudExpansionPanel>
        }
    </MudExpansionPanels>

}

@code {
    [Parameter]
    public int? ChargingStationId { get; set; }
    [Parameter]
    public bool AutoPhaseSwitchingSupported { get; set; }

    private List<EditableItem<DtoChargingStationConnector>>? _chargingStationConnectors;

    private Dictionary<int, string>? _carOptions;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await RefreshCarOptions();
        await RefreshChargingStationConnectors();
    }

    private async Task RefreshCarOptions()
    {
        _carOptions = await ChargingStationsService.GetCarOptions();
    }


    private async Task RefreshChargingStationConnectors()
    {
        if (ChargingStationId == default)
        {
            _chargingStationConnectors = default;
            return;
        }

        var result = await ChargingStationsService.GetChargingStationConnectors(ChargingStationId.Value);
        if (result == default)
        {
            _chargingStationConnectors = default;
            return;
        }
        _chargingStationConnectors = result.Select(r => new EditableItem<DtoChargingStationConnector>(r)).ToList();
    }

    private void ShowSuccessMessage()
    {
        Snackbar.Add("Saved.", Severity.Success);
    }

}
