@using Microsoft.AspNetCore.Components
@using TeslaSolarCharger.Shared
@using TeslaSolarCharger.Shared.Enums
@using TeslaSolarCharger.SharedModel.Enums
@using System.ComponentModel
@using TeslaSolarCharger.Shared.Attributes


<GenericInput For="() => NodePatternType" DropDownOptions="NodePatternTypeOptions" />
@if (NodePatternType == TeslaSolarCharger.SharedModel.Enums.NodePatternType.Json)
{
    <GenericInput For="() => JsonPattern" LabelName="@($"{Purpose} Json Pattern")" />
}
@if (NodePatternType == TeslaSolarCharger.SharedModel.Enums.NodePatternType.Xml)
{
    <GenericInput For="() => XmlPattern" LabelName="@($"{Purpose} XML Pattern")" />

    <GenericInput For="() => XmlAttributeHeaderName" LabelName="@($"{Purpose} XML Attribute Header Name")" />

    <GenericInput For="() => XmlAttributeHeaderValue" LabelName="@($"{Purpose} XML Attribute Header Value")" />

    <GenericInput For="() => XmlAttributeValueName" LabelName="@($"{Purpose} XML Attribute Value Name")" />
}

@code {
    [Parameter]
#pragma warning disable CS8618
        public string Purpose { get; set; }
#pragma warning restore CS8618

    private string IdPrefix => Purpose.Replace(" ", "");
#pragma warning disable BL0007
    [Parameter]
    [DisplayName("Result Type")]
    public NodePatternType? NodePatternType
    {
        get => _nodePatternType;
        set
        {
            if (_nodePatternType == value) return;
            _nodePatternType = value;
            NodePatternTypeChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<NodePatternType?> NodePatternTypeChanged { get; set; }

    [Parameter]
    [DisplayName("Json Pattern")]
    public string? JsonPattern
    {
        get => _jsonPattern;
        set
        {
            if (_jsonPattern == value) return;
            _jsonPattern = value;
            JsonPatternChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<string> JsonPatternChanged { get; set; }

    [Parameter]
    [DisplayName("XML Pattern")]
    public string? XmlPattern
    {
        get => _xmlPattern;
        set
        {
            if (_xmlPattern == value) return;
            _xmlPattern = value;
            XmlPatternChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<string> XmlPatternChanged { get; set; }

    [Parameter]
    [DisplayName("XML Attribute Header Name")]
    public string? XmlAttributeHeaderName
    {
        get => _xmlAttributeHeaderName;
        set
        {
            if (_xmlAttributeHeaderName == value) return;
            _xmlAttributeHeaderName = value;
            XmlAttributeHeaderNameChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<string> XmlAttributeHeaderNameChanged { get; set; }

    [Parameter]
    [DisplayName("XML Attribute Header Value")]
    public string? XmlAttributeHeaderValue
    {
        get => _xmlAttributeHeaderValue;
        set
        {
            if (_xmlAttributeHeaderValue == value) return;
            _xmlAttributeHeaderValue = value;
            XmlAttributeHeaderValueChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<string> XmlAttributeHeaderValueChanged { get; set; }

    [Parameter]
    [DisplayName("XML Attribute Value Name")]
    public string? XmlAttributeValueName
    {
        get => _xmlAttributeValueName;
        set
        {
            if (_xmlAttributeValueName == value) return;
            _xmlAttributeValueName = value;
            XmlAttributeValueNameChanged.InvokeAsync(value);
        }
    }
#pragma warning restore BL0007

    [Parameter]
    public EventCallback<string> XmlAttributeValueNameChanged { get; set; }


    private NodePatternType? _nodePatternType;

    private string? _jsonPattern;
    private string? _xmlPattern;
    private string? _xmlAttributeHeaderName;
    private string? _xmlAttributeHeaderValue;
    private string? _xmlAttributeValueName;

    private readonly Dictionary<int, string> NodePatternTypeOptions = Enum.GetValues<NodePatternType>()
        .ToDictionary(e => (int)e, e => e.ToFriendlyString());
}
