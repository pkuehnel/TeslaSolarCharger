@page "/BaseConfiguration"
@using TeslaSolarCharger.Client.Helper.Contracts
@using TeslaSolarCharger.Client.Wrapper
@using TeslaSolarCharger.Shared.Dtos.BaseConfiguration
@using TeslaSolarCharger.Shared.Dtos

@inject ISnackbar Snackbar
@inject IHttpClientHelper HttpClientHelper


<PageTitle>Base Configuration</PageTitle>

<h1>Base Configuration</h1>

@if (_dtoBaseConfiguration == null)
{
    <LoadingSpinnerComponent />
}
else
{
    <EditFormComponent T="DtoBaseConfiguration" WrappedElement="@(_dtoBaseConfiguration)"
                       OnAfterSuccessfullSubmit="ShowSuccessMessage"
                       SubmitUrl="@("api/BaseConfiguration/UpdateBaseConfiguration")">
        <h3>General:</h3>
        <GenericInput For="() => _dtoBaseConfiguration.Item.MaxCombinedCurrent" />
        <hr />
        <h3>TeslaMate:</h3>
        <GenericInput T="bool"
        For="() => _dtoBaseConfiguration.Item.UseTeslaMateIntegration"
        OnValueChanged="_ => InvokeAsync(StateHasChanged)"></GenericInput>
        @if (_dtoBaseConfiguration.Item.UseTeslaMateIntegration)
        {
            <GenericInput For="() => _dtoBaseConfiguration.Item.UseTeslaMateAsDataSource"></GenericInput>
            <GenericInput For="() => _dtoBaseConfiguration.Item.TeslaMateDbServer" />

            <GenericInput For="() => _dtoBaseConfiguration.Item.TeslaMateDbPort" />
            <GenericInput For="() => _dtoBaseConfiguration.Item.TeslaMateDbDatabaseName" />
            <GenericInput For="() => _dtoBaseConfiguration.Item.TeslaMateDbUser" />
            <GenericInput For="() => _dtoBaseConfiguration.Item.TeslaMateDbPassword" IsPassword="true" />

            <GenericInput For="() => _dtoBaseConfiguration.Item.MosquitoServer" />
        }


        <h3>Home Geofence</h3>
        <div class="mb-3">
            <MapComponent Longitude="_dtoBaseConfiguration.Item.HomeGeofenceLongitude"
            Latitude="_dtoBaseConfiguration.Item.HomeGeofenceLatitude"
            Radius="_dtoBaseConfiguration.Item.HomeGeofenceRadius"
            LatitudeChanged="@(newLatitude => _dtoBaseConfiguration.Item.HomeGeofenceLatitude = newLatitude)"
            LongitudeChanged="@(newLongitude => { _dtoBaseConfiguration.Item.HomeGeofenceLongitude = newLongitude; Snackbar.Add("To update the location, click the save button on the bottom of the page", Severity.Info); })"></MapComponent>

            <small class="form-text text-muted">Click on the map to select your home geofence. Within that area TSC will regulate the charging power.</small>
        </div>

        <GenericInput For="() => _dtoBaseConfiguration.Item.HomeGeofenceRadius" />
        <GenericInput For="() => _dtoBaseConfiguration.Item.PredictSolarPowerGeneration"></GenericInput>
        <GenericInput For="() => _dtoBaseConfiguration.Item.UsePredictedSolarPowerGenerationForChargingSchedules" />
        <GenericInput For="() => _dtoBaseConfiguration.Item.ShowEnergyDataOnHome"></GenericInput>
        <GenericInput For="() => _dtoBaseConfiguration.Item.PowerBuffer" />

        <GenericInput For="() => _dtoBaseConfiguration.Item.AllowPowerBufferChangeOnHome"></GenericInput>
        
        <div class="row">
            <div class="col-md-6">
                <GenericInput T="bool?"
                              For="() => _dtoBaseConfiguration.Item.DynamicHomeBatteryMinSoc"
                              OnValueChanged="StateHasChanged"/>
            </div>
            <div class="col-md-6">
                <GenericInput For="() => _dtoBaseConfiguration.Item.HomeBatteryMinSoc"
                              IsDisabledParameter="@(_dtoBaseConfiguration.Item.DynamicHomeBatteryMinSoc)"/>
            </div>
        </div>
        

        <GenericInput For="() => _dtoBaseConfiguration.Item.HomeBatteryChargingPower" />
        <GenericInput For="() => _dtoBaseConfiguration.Item.HomeBatteryDischargingPower" />

        <GenericInput For="() => _dtoBaseConfiguration.Item.HomeBatteryUsableEnergy" />

        <GenericInput For="() => _dtoBaseConfiguration.Item.MaxInverterAcPower" />

        <RestValueConfigurationComponent />
        <ModbusValueConfigurationComponent />
        <MqttValueConfigurationComponent />

        <div class="shadow p-3 mb-5 bg-white rounded">
            <h3>Telegram:</h3>
            <a href="https://github.com/pkuehnel/TeslaSolarCharger#telegram-integration" target="_blank">How to set up Telegram</a>
            <div>Note: The Telegram bot for now only sends messages if something is not working. E.g. The car does not respond to commands, solar power values can not be refreshed,...</div>
            <GenericInput T="string?"
            For="() => _dtoBaseConfiguration.Item.TelegramBotKey"
            OnValueChanged="@(_ => _telegramSettingsChanged = true)"></GenericInput>
            <GenericInput T="string?"
            For="() => _dtoBaseConfiguration.Item.TelegramChannelId"
            OnValueChanged="@(_ => _telegramSettingsChanged = true)"></GenericInput>
            <GenericInput For="() => _dtoBaseConfiguration.Item.SendStackTraceToTelegram"></GenericInput>
            <RightAlignedButtonComponent ButtonText="Send test message"
            IsDisabled="_telegramSettingsChanged"
            DisabledToolTipText="You need to save the configuration before testing it."
            OnButtonClicked="_ => SendTelegramTestMessage()"></RightAlignedButtonComponent>
        </div>

        <MudExpansionPanels>
            <MudExpansionPanel Text="Advanced settings. Please only change values here if you know what you are doing.">
                <GenericInput For="() => _dtoBaseConfiguration.Item.UpdateIntervalSeconds" />
                @if (_dtoBaseConfiguration.Item.SkipPowerChangesOnLastAdjustmentNewerThanSeconds < 25)
                {
                    <MudAlert Severity="Severity.Warning"
                              ContentAlignment="HorizontalAlignment.Left">
                        Values blelow 25 seconds are not recommended and might cause performance issues.
                    </MudAlert>
                }
                <GenericInput T="int"
                              For="() => _dtoBaseConfiguration.Item.SkipPowerChangesOnLastAdjustmentNewerThanSeconds"
                              OnValueChanged="StateHasChanged"/>
                <GenericInput For="() => _dtoBaseConfiguration.Item.PvValueUpdateIntervalSeconds" />
                <GenericInput For="() => _dtoBaseConfiguration.Item.MaxModbusErrorBackoffDuration" />
                <GenericInput For="() => _dtoBaseConfiguration.Item.MinutesUntilSwitchOn" />
                <GenericInput For="() => _dtoBaseConfiguration.Item.MinutesUntilSwitchOff" />
                <GenericInput For="() => _dtoBaseConfiguration.Item.HomeBatteryMinDynamicMinSoc" />
                <GenericInput For="() => _dtoBaseConfiguration.Item.HomeBatteryMaxDynamicMinSoc" />
                <GenericInput For="() => _dtoBaseConfiguration.Item.DynamicMinSocCalculationBuffer" />
                <GenericInput For="() => _dtoBaseConfiguration.Item.ForceFullHomeBatteryBySunset" />
                <GenericInput For="() => _dtoBaseConfiguration.Item.CarChargeLoss" />
                <hr/>
                <GenericInput For="() => _dtoBaseConfiguration.Item.MqqtClientId" />
                <hr/>

                <GenericInput For="() => _dtoBaseConfiguration.Item.HomeBatteryPowerInversionUrl" />
            </MudExpansionPanel>
        </MudExpansionPanels>
    </EditFormComponent>
}

@code {
    private EditableItem<DtoBaseConfiguration>? _dtoBaseConfiguration;

    private bool _telegramSettingsChanged;

    protected override async Task OnInitializedAsync()
    {
        var response = await HttpClientHelper.SendGetRequestWithSnackbarAsync<DtoBaseConfiguration>("/api/BaseConfiguration/GetBaseConfiguration");
        if (response != default && response.DynamicHomeBatteryMinSoc == default)
        {
            response.DynamicHomeBatteryMinSoc = false;
            await InvokeAsync(() => StateHasChanged());
        }

        if (response != default)
        {
            _dtoBaseConfiguration = new(response);
        }
    }

    private void ShowSuccessMessage()
    {
        Snackbar.Add("Saved.", Severity.Success);
    }

    private async Task SendTelegramTestMessage()
    {
        var result = await HttpClientHelper.SendGetRequestWithSnackbarAsync<DtoValue<string>>("api/Hello/SendTestTelegramMessage");
        if (result == default)
        {
            Snackbar.Add("Could not get result", Severity.Error);
            return;
        }

        Snackbar.Add(result.Value ?? string.Empty, Severity.Success);
    }

}
