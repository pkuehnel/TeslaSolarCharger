@page "/BaseConfiguration"
@using System.Globalization
@using TeslaSolarCharger.Client.Helper.Contracts
@using TeslaSolarCharger.Client.Services.Contracts
@using TeslaSolarCharger.Shared.Dtos.BaseConfiguration
@using TeslaSolarCharger.Shared.Enums
@using TeslaSolarCharger.Shared.Dtos
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IHttpClientHelper HttpClientHelper
@inject ICloudConnectionCheckService CloudConnectionCheckService
@inject IDialogHelper DialogHelper


<PageTitle>Base Configuration</PageTitle>

<h1>Base Configuration</h1>

@if (_dtoBaseConfiguration == null)
{
    <div class="spinner"></div>
}
else
{
    <EditForm Model="@_dtoBaseConfiguration" OnValidSubmit="@HandleValidSubmit">
        <h3>General:</h3>
        <GenericInput For="() => _dtoBaseConfiguration.MaxCombinedCurrent" />
        <hr />
        <h3>TeslaMate:</h3>
        <GenericInput T="bool"
        For="() => _dtoBaseConfiguration.UseTeslaMateIntegration"
        OnValueChanged="_ => InvokeAsync(StateHasChanged)"></GenericInput>
        @if (_dtoBaseConfiguration.UseTeslaMateIntegration)
        {
            <GenericInput For="() => _dtoBaseConfiguration.UseTeslaMateAsDataSource"></GenericInput>
            <GenericInput For="() => _dtoBaseConfiguration.TeslaMateDbServer" />

            <GenericInput For="() => _dtoBaseConfiguration.TeslaMateDbPort" />
            <GenericInput For="() => _dtoBaseConfiguration.TeslaMateDbDatabaseName" />
            <GenericInput For="() => _dtoBaseConfiguration.TeslaMateDbUser" />
            <GenericInput For="() => _dtoBaseConfiguration.TeslaMateDbPassword" IsPassword="true" />

            <GenericInput For="() => _dtoBaseConfiguration.MosquitoServer" />
        }


        <h3>Home Geofence</h3>
        <div class="mb-3">
            <MapComponent Longitude="_dtoBaseConfiguration.HomeGeofenceLongitude"
            Latitude="_dtoBaseConfiguration.HomeGeofenceLatitude"
            Radius="_dtoBaseConfiguration.HomeGeofenceRadius"
            LatitudeChanged="@(newLatitude => _dtoBaseConfiguration.HomeGeofenceLatitude = newLatitude)"
            LongitudeChanged="@(newLongitude => { _dtoBaseConfiguration.HomeGeofenceLongitude = newLongitude; Snackbar.Add("To update the location, click the save button on the bottom of the page", Severity.Info); })"></MapComponent>

            <small class="form-text text-muted">Click on the map to select your home geofence. Within that area TSC will regulate the charging power.</small>
        </div>

        <GenericInput For="() => _dtoBaseConfiguration.HomeGeofenceRadius" />
        <GenericInput For="() => _dtoBaseConfiguration.PredictSolarPowerGeneration"></GenericInput>
        <GenericInput For="() => _dtoBaseConfiguration.UsePredictedSolarPowerGenerationForChargingSchedules" />
        <GenericInput For="() => _dtoBaseConfiguration.ShowEnergyDataOnHome"></GenericInput>
        <GenericInput For="() => _dtoBaseConfiguration.PowerBuffer" />

        <GenericInput For="() => _dtoBaseConfiguration.AllowPowerBufferChangeOnHome"></GenericInput>
        
        <div class="row">
            <div class="col-md-6">
                <GenericInput T="bool?"
                              For="() => _dtoBaseConfiguration.DynamicHomeBatteryMinSoc"
                              OnValueChanged="StateHasChanged"/>
            </div>
            <div class="col-md-6">
                <GenericInput For="() => _dtoBaseConfiguration.HomeBatteryMinSoc"
                              IsDisabledParameter="@(_dtoBaseConfiguration.DynamicHomeBatteryMinSoc)"/>
            </div>
        </div>
        

        <GenericInput For="() => _dtoBaseConfiguration.HomeBatteryChargingPower" />

        <GenericInput For="() => _dtoBaseConfiguration.HomeBatteryUsableEnergy" />

        <GenericInput For="() => _dtoBaseConfiguration.MaxInverterAcPower" />

        <RestValueConfigurationComponent />
        <ModbusValueConfigurationComponent />
        <MqttValueConfigurationComponent />

        <div class="shadow p-3 mb-5 bg-white rounded">
            <h3>Telegram:</h3>
            <a href="https://github.com/pkuehnel/TeslaSolarCharger#telegram-integration" target="_blank">How to set up Telegram</a>
            <div>Note: The Telegram bot for now only sends messages if something is not working. E.g. The car does not respond to commands, solar power values can not be refreshed,...</div>
            <GenericInput T="string?"
            For="() => _dtoBaseConfiguration.TelegramBotKey"
            OnValueChanged="@(_ => _telegramSettingsChanged = true)"></GenericInput>
            <GenericInput T="string?"
            For="() => _dtoBaseConfiguration.TelegramChannelId"
            OnValueChanged="@(_ => _telegramSettingsChanged = true)"></GenericInput>
            <GenericInput For="() => _dtoBaseConfiguration.SendStackTraceToTelegram"></GenericInput>
            <RightAlignedButtonComponent ButtonText="Send test message"
            IsDisabled="_telegramSettingsChanged"
            DisabledToolTipText="You need to save the configuration before testing it."
            OnButtonClicked="_ => SendTelegramTestMessage()"></RightAlignedButtonComponent>
        </div>

        <MudExpansionPanels>
            <MudExpansionPanel Text="Advanced settings. Please only change values here if you know what you are doing.">
                <GenericInput For="() => _dtoBaseConfiguration.UseChargingServiceV2"></GenericInput>

                <GenericInput For="() => _dtoBaseConfiguration.UpdateIntervalSeconds" />

                <GenericInput For="() => _dtoBaseConfiguration.PvValueUpdateIntervalSeconds" />

                <GenericInput For="() => _dtoBaseConfiguration.MinutesUntilSwitchOn" />

                <GenericInput For="() => _dtoBaseConfiguration.MinutesUntilSwitchOff" />
                <hr/>
                <GenericInput For="() => _dtoBaseConfiguration.MqqtClientId" />
                <hr/>

                <GenericInput For="() => _dtoBaseConfiguration.HomeBatteryPowerInversionUrl" />
            </MudExpansionPanel>
        </MudExpansionPanels>
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mt-3 mb-4">
            <RightAlignedButtonComponent ButtonText="Save"
            IsLoading="_submitLoading"
            ButtonType="ButtonType.Submit"></RightAlignedButtonComponent>
        </div>

    </EditForm>
}

@code {
    private DtoBaseConfiguration? _dtoBaseConfiguration;

    private bool _telegramSettingsChanged;
    private bool _submitLoading;

    protected override async Task OnInitializedAsync()
    {
        _dtoBaseConfiguration = await HttpClient.GetFromJsonAsync<DtoBaseConfiguration>("/api/BaseConfiguration/GetBaseConfiguration").ConfigureAwait(false);
        if (_dtoBaseConfiguration != default && _dtoBaseConfiguration.DynamicHomeBatteryMinSoc == default)
        {
            _dtoBaseConfiguration.DynamicHomeBatteryMinSoc = false;
            await InvokeAsync(() => StateHasChanged());
        }
    }

    private async Task HandleValidSubmit()
    {
        _submitLoading = true;
        var result = await HttpClient.PutAsJsonAsync("api/BaseConfiguration/UpdateBaseConfiguration", _dtoBaseConfiguration).ConfigureAwait(false);
        if (result.IsSuccessStatusCode)
        {
            _telegramSettingsChanged = false;
            Snackbar.Add("Base Configuration updated", Severity.Success);
        }
        else
        {
            Snackbar.Add("Error updating base configuration", Severity.Error);
        }

        _submitLoading = false;
    }


    private string _correctionFactorHelpText = "Use this to correct the returned value. E.g. if the returned value is 1 but should bei -1 insert -1";

    private async Task SendTelegramTestMessage()
    {
        var result = await HttpClientHelper.SendGetRequestWithSnackbarAsync<DtoValue<string>>("api/Hello/SendTestTelegramMessage");
        if (result == default)
        {
            Snackbar.Add("Could not get result", Severity.Error);
            return;
        }

        Snackbar.Add(result.Value, Severity.Success);
    }

}
