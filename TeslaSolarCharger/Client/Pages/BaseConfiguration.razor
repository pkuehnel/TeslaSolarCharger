@page "/BaseConfiguration"
@using System.Globalization
@using TeslaSolarCharger.Client.Helper.Contracts
@using TeslaSolarCharger.Client.Services.Contracts
@using TeslaSolarCharger.Shared.Dtos.BaseConfiguration
@using TeslaSolarCharger.Shared.Enums
@using TeslaSolarCharger.Shared.Dtos
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IHttpClientHelper HttpClientHelper
@inject ICloudConnectionCheckService CloudConnectionCheckService
@inject IDialogHelper DialogHelper


<PageTitle>Base Configuration</PageTitle>

<h1>Base Configuration</h1>

@if (_dtoBaseConfiguration == null)
{
    <div class="spinner"></div>
}
else
{
    <EditForm Model="@_dtoBaseConfiguration" OnValidSubmit="@HandleValidSubmit">
        <h3>General:</h3>
        <InputComponent ValueId="maxCombinedCurrent"
        LabelText="Max combined current"
        UnitText="A"
        HelpText="Set a value if you want to reduce the max combined used current per phase of all cars. E.g. if you have two cars each set to max 16A but your installation can only handle 20A per phase you can set 20A here. So if one car uses 16A per phase the other car can only use 4A per phase. Note: Power is distributed based on the set car priorities.">
            <InputFragment>
                <InputNumber id="maxCombinedCurrent" @bind-Value="_dtoBaseConfiguration.MaxCombinedCurrent" class="form-control" placeholder=" " />
            </InputFragment>
        </InputComponent>
        <hr />
        <h3>TeslaMate:</h3>
        <GenericInput T="bool"
        For="() => _dtoBaseConfiguration.UseTeslaMateIntegration"
        OnValueChanged="_ => InvokeAsync(StateHasChanged)"></GenericInput>
        @if (_dtoBaseConfiguration.UseTeslaMateIntegration)
        {
            <GenericInput For="() => _dtoBaseConfiguration.UseTeslaMateAsDataSource"></GenericInput>
            <InputComponent ValueId="teslaMateDbServer"
            LabelText="TeslaMate Database Host"
            UnitText=""
            HelpText="">
                <InputFragment>
                    <InputText id="teslaMateDbServer" @bind-Value="_dtoBaseConfiguration.TeslaMateDbServer" class="form-control" placeholder=" " />
                </InputFragment>
            </InputComponent>

            <InputComponent ValueId="teslaMateDbPort"
            LabelText="TeslaMate Database Server Port"
            UnitText=""
            HelpText="You can use the internal port of the TeslaMate database container">
                <InputFragment>
                    <InputNumber id="teslaMateDbPort" @bind-Value="_dtoBaseConfiguration.TeslaMateDbPort" class="form-control" placeholder=" " />
                </InputFragment>
            </InputComponent>
            <InputComponent ValueId="teslaMateDbName"
            LabelText="TeslaMate Database Name"
            UnitText=""
            HelpText="">
                <InputFragment>
                    <InputText id="teslaMateDbName" @bind-Value="_dtoBaseConfiguration.TeslaMateDbDatabaseName" class="form-control" placeholder=" " />
                </InputFragment>
            </InputComponent>
            <InputComponent ValueId="teslaMateDbUser"
            LabelText="TeslaMate Database Username"
            UnitText=""
            HelpText="">
                <InputFragment>
                    <InputText id="teslaMateDbUser" @bind-Value="_dtoBaseConfiguration.TeslaMateDbUser" class="form-control" placeholder=" " />
                </InputFragment>
            </InputComponent>
            <InputComponent ValueId="teslaMateDbPassword"
            LabelText="TeslaMate Database Server Password"
            UnitText=""
            HelpText="">
                <InputFragment>
                    <InputText type="password" id="teslaMateDbPassword" @bind-Value="_dtoBaseConfiguration.TeslaMateDbPassword" class="form-control" placeholder=" " />
                </InputFragment>
            </InputComponent>

            <InputComponent ValueId="mosquitoServer"
            LabelText="Mosquito servername"
            UnitText=""
            HelpText="">
                <InputFragment>
                    <InputText id="mosquitoServer" @bind-Value="_dtoBaseConfiguration.MosquitoServer" class="form-control" placeholder=" " />
                </InputFragment>
            </InputComponent>
        }


        <h3>Home Geofence</h3>
        <div class="mb-3">
            <MapComponent Longitude="_dtoBaseConfiguration.HomeGeofenceLongitude"
            Latitude="_dtoBaseConfiguration.HomeGeofenceLatitude"
            Radius="_dtoBaseConfiguration.HomeGeofenceRadius"
            LatitudeChanged="@(newLatitude => _dtoBaseConfiguration.HomeGeofenceLatitude = newLatitude)"
            LongitudeChanged="@(newLongitude => { _dtoBaseConfiguration.HomeGeofenceLongitude = newLongitude; Snackbar.Add("To update the location, click the save button on the bottom of the page", Severity.Info); })"></MapComponent>

            <small class="form-text text-muted">Click on the map to select your home geofence. Within that area TSC will regulate the charging power.</small>
        </div>

        <InputComponent ValueId="HomeGeofenceRadius"
        LabelText="Home Radius"
        UnitText="m"
        HelpText="Increase or decrease the radius of the home geofence. Note: Values below 50m are note recommended">
            <InputFragment>
                <InputNumber id="HomeGeofenceRadius" @bind-Value="_dtoBaseConfiguration.HomeGeofenceRadius" class="form-control" placeholder=" " />
            </InputFragment>
        </InputComponent>

        <GenericInput T="bool"
        For="() => _dtoBaseConfiguration.LogMeterValues"
                      OnValueChanged="LogMeterValuesUpdated"></GenericInput>
        @if (_dtoBaseConfiguration.LogMeterValues)
        {
            <GenericInput For="() => _dtoBaseConfiguration.PredictSolarPowerGeneration"></GenericInput>
            <GenericInput For="() => _dtoBaseConfiguration.ShowEnergyDataOnHome"></GenericInput>
        }

        <InputComponent ValueId="powerBuffer"
        LabelText="Power Buffer"
        UnitText="W"
        HelpText="Set values higher than 0 to always have some overage (power to grid). Set values lower than 0 to always consume some power from the grid.">
            <InputFragment>
                <InputNumber id="powerBuffer" @bind-Value="_dtoBaseConfiguration.PowerBuffer" placeholder=" " class="form-control" />
            </InputFragment>
        </InputComponent>

        <GenericInput For="() => _dtoBaseConfiguration.AllowPowerBufferChangeOnHome"></GenericInput>

        <InputComponent ValueId="homeBatteryMinSoc"
        LabelText="Home Battery Minimum SoC"
        UnitText="%"
        HelpText="Set the SoC your home battery should get charged to before cars start to use full power. Leave empty if you do not have a home battery">
            <InputFragment>
                <InputNumber id="homeBatteryMinSoc" @bind-Value="_dtoBaseConfiguration.HomeBatteryMinSoc" placeholder=" " class="form-control" />
            </InputFragment>
        </InputComponent>

        <InputComponent ValueId="homeBatteryMinChargingPower"
        LabelText="Home Battery Goal charging power"
        UnitText="W"
        HelpText="Set the power your home battery should charge with as long as SoC is below set minimum SoC. Leave empty if you do not have a home battery">
            <InputFragment>
                <InputNumber id="homeBatteryMinChargingPower" @bind-Value="_dtoBaseConfiguration.HomeBatteryChargingPower" placeholder=" " class="form-control" />
            </InputFragment>
        </InputComponent>

        <InputComponent ValueId="maxInverterAcPower"
        LabelText="Max Inverter AC Power"
        UnitText="W"
        HelpText="If you have a hybrid inverter that has more DC than AC power insert the maximum AC Power here. This is a very rare, so in most cases you can leave this field empty.">
            <InputFragment>
                <InputNumber id="maxInverterAcPower" @bind-Value="_dtoBaseConfiguration.MaxInverterAcPower" placeholder=" " class="form-control" />
            </InputFragment>
        </InputComponent>

        <RestValueConfigurationComponent />
        <ModbusValueConfigurationComponent />
        <MqttValueConfigurationComponent />

        <div class="shadow p-3 mb-5 bg-white rounded">
            <h3>Telegram:</h3>
            <a href="https://github.com/pkuehnel/TeslaSolarCharger#telegram-integration" target="_blank">How to set up Telegram</a>
            <div>Note: The Telegram bot for now only sends messages if something is not working. E.g. The car does not respond to commands, solar power values can not be refreshed,...</div>
            <GenericInput T="string?"
            For="() => _dtoBaseConfiguration.TelegramBotKey"
            OnValueChanged="@(_ => _telegramSettingsChanged = true)"></GenericInput>
            <GenericInput T="string?"
            For="() => _dtoBaseConfiguration.TelegramChannelId"
            OnValueChanged="@(_ => _telegramSettingsChanged = true)"></GenericInput>
            <GenericInput For="() => _dtoBaseConfiguration.SendStackTraceToTelegram"></GenericInput>
            <RightAlignedButtonComponent ButtonText="Send test message"
            IsDisabled="_telegramSettingsChanged"
            DisabledToolTipText="You need to save the configuration before testing it."
            OnButtonClicked="_ => SendTelegramTestMessage()"></RightAlignedButtonComponent>
        </div>

        <MudExpansionPanels>
            <MudExpansionPanel Text="Advanced settings. Please only change values here if you know what you are doing.">
                <InputComponent ValueId="updateIntervalSeconds"
                LabelText="Car power adjustment interval"
                UnitText="s"
                HelpText="Note: It is not possible to use values below 25 seconds here, as there is a delay between the car changing its current and the Tesla API getting notified about this change.">
                    <InputFragment>
                        <InputNumber id="updateIntervalSeconds" @bind-Value="_dtoBaseConfiguration.UpdateIntervalSeconds" class="form-control" placeholder=" " />
                    </InputFragment>
                </InputComponent>

                <InputComponent ValueId="pvValueUpdateIntervalSeconds"
                LabelText="Solar plant adjustment interval"
                UnitText="s"
                HelpText="">
                    <InputFragment>
                        <InputNumber id="pvValueUpdateIntervalSeconds" @bind-Value="_dtoBaseConfiguration.PvValueUpdateIntervalSeconds" class="form-control" placeholder=" " />
                    </InputFragment>
                </InputComponent>

                <InputComponent ValueId="minutesUntilSwitchOn"
                LabelText="Time with enough solar power until charging starts"
                UnitText="min"
                HelpText="">
                    <InputFragment>
                        <InputNumber id="minutesUntilSwitchOn" @bind-Value="_dtoBaseConfiguration.MinutesUntilSwitchOn" class="form-control" placeholder=" " />
                    </InputFragment>
                </InputComponent>

                <InputComponent ValueId="minutesUntilSwitchOff"
                LabelText="Time without enough solar power until charging stops"
                UnitText="min"
                HelpText="">
                    <InputFragment>
                        <InputNumber id="minutesUntilSwitchOff" @bind-Value="_dtoBaseConfiguration.MinutesUntilSwitchOff" class="form-control" placeholder=" " />
                    </InputFragment>
                </InputComponent>
                <hr />
                <InputComponent ValueId="mqqtClientId"
                LabelText="Mqqt ClientId"
                UnitText=""
                HelpText="">
                    <InputFragment>
                        <InputText id="mqqtClientId" @bind-Value="_dtoBaseConfiguration.MqqtClientId" class="form-control" placeholder=" " />
                    </InputFragment>
                </InputComponent>
                <hr />

                <InputComponent ValueId="homeBatteryPowerInversionUrl"
                LabelText="HomeBatteryPowerInversion Url"
                UnitText=""
                HelpText="Use this if you have to dynamically invert the home battery power. Note: Only 0 and 1 are allowed as response. As far as I know this is only needed with Sungrow Inverters.">
                    <InputFragment>
                        <InputText id="homeBatteryPowerInversionUrl" @bind-Value="_dtoBaseConfiguration.HomeBatteryPowerInversionUrl" class="form-control" placeholder=" " />
                    </InputFragment>
                </InputComponent>
            </MudExpansionPanel>
        </MudExpansionPanels>
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mt-3 mb-4">
            <RightAlignedButtonComponent ButtonText="Save"
            IsLoading="_submitLoading"
            ButtonType="ButtonType.Submit"></RightAlignedButtonComponent>
        </div>

    </EditForm>
}

@code {
    private DtoBaseConfiguration? _dtoBaseConfiguration;

    private bool _telegramSettingsChanged;
    private bool _submitLoading;

    protected override async Task OnInitializedAsync()
    {
        _dtoBaseConfiguration = await HttpClient.GetFromJsonAsync<DtoBaseConfiguration>("/api/BaseConfiguration/GetBaseConfiguration").ConfigureAwait(false);
    }

    private async Task HandleValidSubmit()
    {
        _submitLoading = true;
        var result = await HttpClient.PutAsJsonAsync("api/BaseConfiguration/UpdateBaseConfiguration", _dtoBaseConfiguration).ConfigureAwait(false);
        if (result.IsSuccessStatusCode)
        {
            _telegramSettingsChanged = false;
            Snackbar.Add("Base Configuration updated", Severity.Success);
        }
        else
        {
            Snackbar.Add("Error updating base configuration", Severity.Error);
        }

        _submitLoading = false;
    }


    private string _correctionFactorHelpText = "Use this to correct the returned value. E.g. if the returned value is 1 but should bei -1 insert -1";

    private async Task SendTelegramTestMessage()
    {
        var result = await HttpClientHelper.SendGetRequestWithSnackbarAsync<DtoValue<string>>("api/Hello/SendTestTelegramMessage");
        if (result == default)
        {
            Snackbar.Add("Could not get result", Severity.Error);
            return;
        }

        Snackbar.Add(result.Value, Severity.Success);
    }

    private async Task LogMeterValuesUpdated(bool enabled)
    {
        if ((!enabled) && (_dtoBaseConfiguration != default))
        {
            _dtoBaseConfiguration.ShowEnergyDataOnHome = false;
            _dtoBaseConfiguration.PredictSolarPowerGeneration = false;
        }
        await InvokeAsync(StateHasChanged);
    }

}
