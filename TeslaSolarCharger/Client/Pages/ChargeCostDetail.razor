@page "/ChargePrice/detail/{chargeCostId:int}"
@page "/ChargePrice/new"
@using TeslaSolarCharger.Shared.Dtos.ChargingCost
@using TeslaSolarCharger.Shared.Contracts
@using TeslaSolarCharger.Shared.Dtos.ChargingCost.CostConfigurations
@using TeslaSolarCharger.Shared.Enums
@using Newtonsoft.Json
@using TeslaSolarCharger.Shared.Dtos
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IDateTimeProvider DateTimeProvider
@inject ISnackbar Snackbar

<button class="btn btn-primary" @onclick="NavigateToList">All Charge costs</button>
<h1>ChargePriceDetail</h1>

@if (ChargePrice == null)
{
    <LoadingSpinnerComponent />
}
else
{
    <EditForm Model="ChargePrice" OnValidSubmit="@SaveChargePrice">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <InputComponent ValueId="chargePriceId"
                        LabelText="ID"
                        UnitText=""
                        HelpText="">
            <InputFragment>
                <InputNumber id="chargePriceId" @bind-Value="ChargePrice.Id" class="form-control" placeholder=" " readonly />
            </InputFragment>
        </InputComponent>

        <InputComponent ValueId="date"
                        LabelText="Valid Since"
                        UnitText=""
                        HelpText="">
            <InputFragment>
                <InputDate id="date" @bind-Value="ChargePrice.ValidSince" class="form-control" placeholder=" " />
            </InputFragment>
        </InputComponent>

        <InputComponent ValueId="solarPrice"
                        LabelText="Solar Price"
                        UnitText=""
                        HelpText="">
            <InputFragment>
                <InputNumber id="solarPrice" @bind-Value="ChargePrice.SolarPrice" class="form-control" placeholder=" " />
            </InputFragment>
        </InputComponent>
        
        <InputComponent ValueId="energyProvider"
                        LabelText="Energy Provider"
                        UnitText=""
                        HelpText="">
            <InputFragment>
                <InputSelect id="energyProvider" Value="ChargePrice.EnergyProvider" ValueExpression="() => ChargePrice.EnergyProvider" ValueChanged="@((EnergyProvider e) => EnergyProviderChanged(e))" class="form-control">
                    <option value="@EnergyProvider.OldTeslaSolarChargerConfig">Fixed Price or Spot price</option>
                    <option value="@EnergyProvider.FixedPrice">Time based prices</option>
                </InputSelect>
            </InputFragment>
        </InputComponent>

        <InputComponent ValueId="gridPrice"
                        LabelText="@(ChargePrice.AddSpotPriceToGridPrice ? "Base Price (Spot price will be added to this price)" : "Grid Price")"
                        UnitText=""
                        HelpText="">
            <InputFragment>
                <InputNumber id="gridPrice" @bind-Value="ChargePrice.GridPrice" class="form-control" placeholder=" " />
            </InputFragment>
        </InputComponent>

        @if (ChargePrice.EnergyProvider == EnergyProvider.FixedPrice && FixedPrices != null)
        {
            <div>You can specify times with special prices here. If there are times left, you didn't specify a price for, the default grid price, specified above, is used.</div>
            @foreach (var fixedPrice in FixedPrices)
            {
                <div class="row mt-3">
                    <div class="col-auto">
                        <FixedPriceComponent FixedPrice="fixedPrice"></FixedPriceComponent>
                    </div>
                    
                </div>
                <div class="row mt-3">
                    <div class="col-auto">
                        <InputComponent ValueId="price"
                                        LabelText="Price"
                                        UnitText=""
                                        HelpText="">
                            <InputFragment>
                                <InputNumber id="price" @bind-Value="fixedPrice.Value" class="form-control" placeholder=" " />
                            </InputFragment>
                        </InputComponent>
                    </div>
                    <div class="col-auto">
                        <button type="button" class="btn btn-danger m-2" @onclick="_ => DeleteFixedPrice(fixedPrice)"><span class="oi oi-trash" aria-hidden="true"></span></button>
                    </div>
                </div>
                
                <hr/>
            }
            <button type="button" class="btn btn-primary m-2" @onclick="AddFixedPrice">Add time based price</button>
        }
        
        @if (ChargePrice.EnergyProvider == EnergyProvider.OldTeslaSolarChargerConfig)
        {
            <div class="mb-3">
                <InputCheckbox class="form-check-input" id="useSpotPrice1" @bind-Value="ChargePrice.AddSpotPriceToGridPrice" />
                <label class="form-check-label" for="useSpotPrice1">
                    Use Spot Prices
                </label>
                <div>
                    <small id="UseSpotPriceHelp" class="form-text text-muted">Enable this if you are using dynamic prices based on EPEX Spot DE (e.g. Tibber or aWATTar)</small>
                </div>
            </div>
            @if (ChargePrice.AddSpotPriceToGridPrice)
            {
                <InputComponent ValueId="chargePriceSurcharge"
                                LabelText="Additional costs to spotprice"
                                UnitText="%"
                                HelpText="Surcharge to spot price (e.g. aWATTar 3% + 19% VAT in Germany). Note: Spot prices are without VAT.">
                    <InputFragment>
                        <InputNumber id="chargePriceSurcharge" @bind-Value="ChargePrice.SpotPriceSurcharge" class="form-control" placeholder=" " />
                    </InputFragment>
                </InputComponent>
            }
        }
        
        <br/>
        @if(ChargePricesUpdateText != null)
        {
            <div class="alert alert-warning" role="alert">
                @ChargePricesUpdateText
            </div>
        }
        <button type="submit" class="btn btn-primary" disabled="@(ChargePricesUpdateText != null)">
            @if (SubmitIsLoading)
            {
                <span>
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    Loading...
                </span>
            }
            else
            {
                <span>Save</span>
            }
        </button>
        <div>
            <small class="form-text text-muted">Note: updating charge prices can take a significant ammount of time as the price of all previous charges is updated</small>
        </div>
    </EditForm>
}


@code {
    [Parameter]
    public int? ChargeCostId { get; set; }

    private DtoChargePrice? ChargePrice { get; set; }

    private bool SubmitIsLoading { get; set; }

    private List<FixedPrice>? FixedPrices { get; set; }

    public string? ChargePricesUpdateText { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ChargePricesUpdateText = (await HttpClient.GetFromJsonAsync<DtoValue<string?>>($"api/ChargingCost/GetChargePricesUpdateText").ConfigureAwait(false))?.Value;
        if (ChargeCostId != null)
        {
            ChargePrice = await HttpClient.GetFromJsonAsync<DtoChargePrice>($"api/ChargingCost/GetChargePriceById?id={ChargeCostId}").ConfigureAwait(false);
            if(ChargePrice is { EnergyProviderConfiguration: not null, EnergyProvider: EnergyProvider.FixedPrice })
            {
                FixedPrices = JsonConvert.DeserializeObject<List<FixedPrice>>(ChargePrice.EnergyProviderConfiguration);
            }
        }
        else
        {
            ChargePrice = new DtoChargePrice()
            {
                ValidSince = DateTimeProvider.Now(),
                GridPrice = new decimal(0.285),
                SolarPrice = new decimal(0.12),
                EnergyProvider = EnergyProvider.OldTeslaSolarChargerConfig,
            };
        }
    }

    void NavigateToList()
    {
        NavigationManager.NavigateTo("/ChargePrices");
    }

    private async Task SaveChargePrice()
    {
        SubmitIsLoading = true;
        if(ChargePrice == null)
        {
            Snackbar.Add("Charge price is null and can not be saved. Try reloading the page.", Severity.Error);
            return;
        }
        if(ChargePrice.EnergyProvider == EnergyProvider.FixedPrice)
        {
            ChargePrice.EnergyProviderConfiguration = JsonConvert.SerializeObject(FixedPrices);
        }
        else
        {
            ChargePrice.EnergyProviderConfiguration = null;
        }
        HttpClient.PostAsJsonAsync("api/ChargingCost/UpdateChargePrice", ChargePrice).ConfigureAwait(false);
        NavigateToList();
    }

    private void EnergyProviderChanged(EnergyProvider energyProvider)
    {
        if(ChargePrice == null)
        {
            return;
        }
        ChargePrice.EnergyProvider = energyProvider;
        FixedPrices = energyProvider == EnergyProvider.FixedPrice ? new List<FixedPrice>() : null;
    }

    private void AddFixedPrice()
    {
        FixedPrices?.Add(new FixedPrice()
        {
            ValidOnDays = new List<DayOfWeek>(),
        });
    }

    private void DeleteFixedPrice(FixedPrice fixedPrice)
    {
        FixedPrices?.Remove(fixedPrice);
    }

}
