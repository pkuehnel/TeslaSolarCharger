@page "/"
@page "/Home"
@using TeslaSolarCharger.Client.Components.StartPage
@using TeslaSolarCharger.Client.Services.Contracts
@using TeslaSolarCharger.Shared.Dtos.Home

@inject IEnergyDataService EnergyDataService
@inject IHomeService HomeService

<PageTitle>Solar 4 Car</PageTitle>

<MerryChristmasAndHappyNewYearComponent></MerryChristmasAndHappyNewYearComponent>

<BackendInformationDisplayComponent></BackendInformationDisplayComponent>
<LoggedErrorsComponent></LoggedErrorsComponent>

<PowerFlowComponent></PowerFlowComponent>
<PowerBufferComponent></PowerBufferComponent>
@if (_showEnergyData)
{
    <EnergyPredictionComponent></EnergyPredictionComponent>
}

@if (_loadPoints == default)
{
    <PlaceholderComponent Count="1" Height="200px"></PlaceholderComponent>
}
else
{
    foreach (var loadPoint in _loadPoints)
    {
        <div class="shadow p-3 mb-5 bg-white rounded">
            <div>@((loadPoint.ChargingPower ?? 0).ToString("N0")) W</div>
            <div class="row">
                @if (loadPoint.CarId != default)
                {
                    <div class="border border-gray-300 p-3 rounded col-xl-6 col-12">
                        <CarDetailsComponent
                            CarId="loadPoint.CarId" />
                    </div>
                }
                @if (loadPoint.ChargingConnectorId != default)
                {
                    <div class="border border-gray-300 p-3 rounded col-xl-6 col-12">
                        <ChargingConnectorDetailsComponent
                            ChargingConnectorId="loadPoint.ChargingConnectorId" />
                    </div>
                }
            </div>
        </div>
    }
}
<HiddenErrorsComponent></HiddenErrorsComponent>

@code {
    private bool _showEnergyData;
    private List<DtoLoadPointOverview>? _loadPoints;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _showEnergyData = await EnergyDataService.ShowEnergyDataOnHome();
        await RefreshLoadPoints();
    }

    private async Task RefreshLoadPoints()
    {
        _loadPoints = await HomeService.GetLoadPointsToManage();
    }
}
