@page "/CarSettings"
@using TeslaSolarCharger.Shared.Dtos
@using TeslaSolarCharger.Client.Wrapper
@using TeslaSolarCharger.Shared.Dtos.Ble
@using Newtonsoft.Json
@using TeslaSolarCharger.Client.Helper.Contracts
@using TeslaSolarCharger.Shared
@using TeslaSolarCharger.Shared.Enums
@using TeslaSolarCharger.Shared.Helper.Contracts
@using TeslaSolarCharger.Shared.Resources.Contracts

@inject HttpClient HttpClient
@inject IHttpClientHelper HttpClientHelper
@inject ISnackbar Snackbar
@inject IConstants Constants
@inject IStringHelper StringHelper

<PageTitle>Car Settings</PageTitle>
<h1>Car Settings</h1>

<div class="mb-3">
    @if (_fleetApiTokenState != null && _fleetApiTokenState != TokenState.UpToDate)
    {
        <MudAlert Severity="Severity.Error"
                  NoIcon="true"
                  ContentAlignment="HorizontalAlignment.Left">
            <h4>Create Token.</h4>
            Go to <MudLink Href="/cloudconnection">Cloud Connection</MudLink>, Generate a Tesla Fleet API Token and restart TSC to see cars here.
        </MudAlert>
    }
    @if (_fleetApiTokenState == TokenState.UpToDate)
    {
        <MudAlert Severity="Severity.Info"
                  NoIcon="true"
                  ContentAlignment="HorizontalAlignment.Left">
            <h5>Restart TSC to add new cars</h5>
            If you do not see all cars here that are available in your Tesla account, restart TSC.
        </MudAlert>
    }
</div>


@if (_carBasicConfigurations == null)
{
    <LoadingSpinnerComponent />
}
else
{
    <RightAlignedButtonComponent ButtonText="Add car (non Tesla)"
                                 StartIcon="@Icons.Material.Filled.Add"
                                 OnButtonClicked="AddNewCar"></RightAlignedButtonComponent>

    @foreach (var carBasicConfiguration in _carBasicConfigurations)
    {
        <div class="shadow p-3 mb-5 bg-white rounded">
            <EditFormComponent T="CarBasicConfiguration" WrappedElement="@(carBasicConfiguration)"
                               OnAfterSuccessfullSubmit="item => UpdateShouldDisplayBleTest(item)"
                               SubmitUrl="@($"api/Config/UpdateCarBasicConfiguration?carId={carBasicConfiguration.Item.Id}")">
                <GenericInput For="() => carBasicConfiguration.Item.Name" />
                <GenericInput For="() => carBasicConfiguration.Item.Vin"
                              IsDisabledParameter="@(carBasicConfiguration.Item.CarType == CarType.Tesla)"/>
                <GenericInput T="bool"
                              For="() => carBasicConfiguration.Item.ShouldBeManaged"
                              OnValueChanged="_ => InvokeAsync(() => StateHasChanged())" />
                @if (carBasicConfiguration.Item.ShouldBeManaged)
                {
                    @if (carBasicConfiguration.Item.CarType == CarType.Tesla)
                    {
                        <GenericInput For="() => carBasicConfiguration.Item.MinimumAmpere" />
                        <GenericInput For="() => carBasicConfiguration.Item.SwitchOffAtCurrent"></GenericInput>
                        <GenericInput For="() => carBasicConfiguration.Item.SwitchOnAtCurrent"></GenericInput>
                    }
                    <GenericInput For="() => carBasicConfiguration.Item.MaximumAmpere" />
                    @if(carBasicConfiguration.Item.CarType != CarType.Tesla)
                    {
                        <GenericInput For="() => carBasicConfiguration.Item.MaximumPhases" />
                    }
                    <GenericInput For="() => carBasicConfiguration.Item.UsableEnergy" />
                    <GenericInput For="() => carBasicConfiguration.Item.ChargingPriority" />
                    @if (carBasicConfiguration.Item.CarType == CarType.Tesla)
                    {
                        <GenericInput T="bool"
                                      For="() => carBasicConfiguration.Item.UseBle"
                                      OnValueChanged="_ => carBasicConfiguration.ClearErrors(nameof(carBasicConfiguration.Item.BleApiBaseUrl))" />
                        @if (carBasicConfiguration.Item.UseBle)
                        {
                            <GenericInput For="() => carBasicConfiguration.Item.BleApiBaseUrl" />
                        }
                        @switch (carBasicConfiguration.Item.HomeDetectionVia)
                        {
                            case HomeDetectionVia.GpsLocation:
                                <MudAlert Severity="Severity.Info"
                                          NoIcon="true"
                                          ContentAlignment="HorizontalAlignment.Left">
                                    <h5>GPS Location used for home detection</h5>
                                    TSC will manage charging if the car's GPS Location is within the configured Home Geofence set in <MudLink Href="/BaseConfiguration">Base Configuration</MudLink>.
                                </MudAlert>
                                break;
                            case HomeDetectionVia.LocatedAtHome:
                                <MudAlert Severity="Severity.Info"
                                          NoIcon="true"
                                          ContentAlignment="HorizontalAlignment.Left">
                                    <h5>Tesla navigation Home used for home detection</h5>
                                    TSC will manage charging if the car is at the home location set in the Tesla navigation system. Note: Different driver profiles with different home addresses might mess this up. Make sure that the last driver has the correct home address set in the Tesla navigation system.
                                </MudAlert>
                                break;
                            case HomeDetectionVia.LocatedAtWork:
                                <MudAlert Severity="Severity.Info"
                                          NoIcon="true"
                                          ContentAlignment="HorizontalAlignment.Left">
                                    <h5>Tesla navigation Work used for home detection</h5>
                                    TSC will manage charging if the car is at the work location set in the Tesla navigation system. Note: Different driver profiles with different work addresses might mess this up. Make sure that the last driver has the correct work address set in the Tesla navigation system.
                                </MudAlert>
                                break;
                            case HomeDetectionVia.LocatedAtFavorite:
                                <MudAlert Severity="Severity.Warning"
                                          NoIcon="true"
                                          ContentAlignment="HorizontalAlignment.Left">
                                    <h5>Tesla navigation Favorite used for home detection</h5>
                                    TSC will manage charging if the car is at any favorite location set in the Tesla navigation system. Note: TSC is unable to detect at which favorite location the car is, so if you charge at a public charger that is configured as favorite in the Tesla navigation system, TSC tries to manage charging based on your solar production at home and might stop charging if you don't have any solar production at home. Moreover, different driver profiles with different favorite addresses might mess this up. It is HIGHLY recommended to only have one favorite location if this setting is enabled.
                                </MudAlert>
                                break;
                            default:
                                throw new ArgumentOutOfRangeException();
                        }
                        <div class="px-2 pt-2">
                            <MudSelect T="HomeDetectionVia"
                                       For="() => carBasicConfiguration.Item.HomeDetectionVia"
                                       Class="@Constants.DefaultMargin"
                                       Variant="Variant.Outlined"
                                       Value="@carBasicConfiguration.Item.HomeDetectionVia"
                                       ValueChanged="(newItem) => UpdateHomeDetectionVia(carBasicConfiguration.Item, newItem)"
                                       Label="Home Detection via"
                                       Margin="Constants.InputMargin">
                                @foreach (HomeDetectionVia item in Enum.GetValues(typeof(HomeDetectionVia)))
                                {
                                    <MudSelectItem T="HomeDetectionVia" Value="@item">@(item.ToFriendlyName())</MudSelectItem>
                                }
                            </MudSelect>
                        </div>
                        <GenericInput T="bool"
                                      For="() => carBasicConfiguration.Item.UseFleetTelemetry"
                                      OnValueChanged="newValue => { UpdateGetlocationDataViaFleetTelemetry(carBasicConfiguration.Item, newValue); carBasicConfiguration.ClearErrors(nameof(carBasicConfiguration.Item.IncludeTrackingRelevantFields), nameof(carBasicConfiguration.Item.HomeDetectionVia));}" />
                        @if (carBasicConfiguration.Item.UseFleetTelemetry)
                        {
                            <GenericInput T="bool"
                                          For="() => carBasicConfiguration.Item.IncludeTrackingRelevantFields"
                                          OnValueChanged="_ => { carBasicConfiguration.ClearErrors(nameof(carBasicConfiguration.Item.HomeDetectionVia)); Redraw(); }" />
                        }
                    }
                }

            </EditFormComponent>

            @if (_vinsToShowBleTest.Contains(carBasicConfiguration.Item.Vin))
            {
                <hr />
                <h3>BLE Pairing and test</h3>
                <div>
                    To come around rate limits TSC can use BLE instead of the Fleet API. This requires <a href="https://github.com/pkuehnel/TeslaSolarCharger?tab=readme-ov-file#install-and-setup-ble-api" target="_blank">setting up a BLE API</a>.
                </div>
                @if (_pairingResults.TryGetValue(carBasicConfiguration.Item.Vin, out var result))
                {

                    <div class="alert alert-info" role="alert">
                        <p>
                            @result
                        </p>
                    </div>

                }
                <div>
                    Note: When clicking the pair button the car won't display any feedback. You have to place the card on the center console. Only after doing so, a message will pop up. If you don't see a message, the pairing failed. As the car does not send any feedback, just try a few times, if it still does not work reboot your BLE device.
                </div>
                <RightAlignedButtonComponent IsLoading="_loadingVins.Contains(carBasicConfiguration.Item.Vin)" OnButtonClicked="_ => PairCar(carBasicConfiguration.Item)" ButtonText="BLE Pair"></RightAlignedButtonComponent>
                <h5>Test BLE access</h5>
                <div>
                    Before you can test BLE access you must pair the car with TSC. This includes placing the card on your center console and confirming the new "phone key" on the car's screen.
                </div>
                <div>
                    After clicking the test button the car 's current should be set to 7A. Note: The car needs to be awake for this test.
                </div>
                @if (_bleTestResults.TryGetValue(carBasicConfiguration.Item.Vin, out var bleResult))
                {
                    <div class="@($"alert alert-{(bleResult.Success ? "success" : "danger")}")" role="alert">
                        <p>
                            @bleResult.ResultMessage
                        </p>
                    </div>
                }
                <RightAlignedButtonComponent IsLoading="_loadingVins.Contains(carBasicConfiguration.Item.Vin)" OnButtonClicked="_ => TestBle(carBasicConfiguration.Item.Vin)" ButtonText="Set to 7A"></RightAlignedButtonComponent>
                @if (carBasicConfiguration.Item.UseBle)
                {
                    <h5>Test Wakeup via BLE</h5>
                    <div>
                        After this test the car should wake up.
                    </div>
                    @if (_bleWakeUpTestResults.TryGetValue(carBasicConfiguration.Item.Vin, out var bleWakeUpResult))
                    {
                        <div class="@($"alert alert-{(bleWakeUpResult.Success ? "success" : "danger")}")" role="alert">
                            <p>
                                @bleWakeUpResult.ResultMessage
                            </p>
                        </div>

                    }
                    <RightAlignedButtonComponent IsLoading="_loadingVins.Contains(carBasicConfiguration.Item.Vin)" OnButtonClicked="_ => WakeCar(carBasicConfiguration.Item.Vin)" ButtonText="Wake up"></RightAlignedButtonComponent>
                }
            }
        </div>
    }
}

@code {
    private List<EditableItem<CarBasicConfiguration>>? _carBasicConfigurations;
    private TokenState? _fleetApiTokenState;

    private HashSet<string> _vinsToShowBleTest = new();
    private Dictionary<string, string> _pairingResults = new();
    private Dictionary<string, DtoBleCommandResult> _bleTestResults = new();
    private Dictionary<string, DtoBleCommandResult> _bleWakeUpTestResults = new();

    private HashSet<string> _loadingVins = new();

    protected override async Task OnInitializedAsync()
    {
        await RefreshFleetApiTokenState();
        var carBasicConfigurations = await HttpClient.GetFromJsonAsync<List<CarBasicConfiguration>>("/api/Config/GetCarBasicConfigurations").ConfigureAwait(false);
        if (carBasicConfigurations != null)
        {
            _vinsToShowBleTest = carBasicConfigurations.Where(c => c is { UseBle: true, ShouldBeManaged: true, CarType: CarType.Tesla, }).Select(c => c.Vin).ToHashSet();
            _carBasicConfigurations = carBasicConfigurations.Select(c => new EditableItem<CarBasicConfiguration>(c)).ToList();
        }
    }

    private async Task RefreshFleetApiTokenState()
    {
        var value = await HttpClient.GetFromJsonAsync<DtoValue<TokenState>>("api/FleetApi/FleetApiTokenState").ConfigureAwait(false);
        if (value != null)
        {
            _fleetApiTokenState = value.Value;
        }
    }

    private async Task PairCar(CarBasicConfiguration car)
    {
        _pairingResults.Remove(car.Vin);
        _loadingVins.Add(car.Vin);
        var url = $"/api/Ble/PairKey?vin={car.Vin}&apiRole=charging_manager";
        var result = await HttpClient.GetStringAsync(url).ConfigureAwait(false);
        var resultJson = JsonConvert.DeserializeObject<DtoBleCommandResult>(result);
        _pairingResults[car.Vin] = resultJson?.ResultMessage ?? result;
        _loadingVins.Remove(car.Vin);
    }

    private async Task TestBle(string vin)
    {
        _bleTestResults.Remove(vin);
        _loadingVins.Add(vin);
        var resultString = await HttpClient.GetStringAsync($"/api/Ble/SetAmp?vin={vin}&amps=7").ConfigureAwait(false);
        var result = JsonConvert.DeserializeObject<DtoBleCommandResult>(resultString)
                     ?? new DtoBleCommandResult
                         {
                             Success = false,
                             ResultMessage = "Could not deserialize message from TSC.",
                         };
        if (result.Success && string.IsNullOrWhiteSpace(result.ResultMessage))
        {
            result.ResultMessage = "Ble access seems to work. Please double check if the charge current was set to 7A. Note: As TSC starts using BLE as soon as it is working you might see the 7A only for a short time as TSC changes it every 30 seconds by default.";
        }
        _bleTestResults[vin] = result;
        _loadingVins.Remove(vin);
    }

    private async Task WakeCar(string vin)
    {
        _bleWakeUpTestResults.Remove(vin);
        _loadingVins.Add(vin);
        var resultString = await HttpClient.GetStringAsync($"/api/Ble/WakeUp?vin={vin}").ConfigureAwait(false);
        var result = JsonConvert.DeserializeObject<DtoBleCommandResult>(resultString)
                     ?? new DtoBleCommandResult
                         {
                             Success = false,
                             ResultMessage = "Could not deserialize message from TSC.",
                         };
        if (result.Success && string.IsNullOrWhiteSpace(result.ResultMessage))
        {
            result.ResultMessage = "The car accepted the wake call.";
        }
        _bleWakeUpTestResults[vin] = result;
        _loadingVins.Remove(vin);
    }

    private void UpdateGetlocationDataViaFleetTelemetry(CarBasicConfiguration carBasicConfiguration, bool newUseFleetTelemetryValue)
    {
        //Do not autoenable additional fields as this costs money
        if (newUseFleetTelemetryValue)
        {
            return;
        }
        carBasicConfiguration.IncludeTrackingRelevantFields = newUseFleetTelemetryValue;
        Redraw();
    }

    private void Redraw()
    {
        InvokeAsync(() => StateHasChanged());
    }

    private void UpdateShouldDisplayBleTest(CarBasicConfiguration item)
    {
        if (item is { ShouldBeManaged: true, UseBle: true })
        {
            _vinsToShowBleTest.Add(item.Vin);
        }
        else
        {
            _vinsToShowBleTest.Remove(item.Vin);
        }
    }

    private void UpdateHomeDetectionVia(CarBasicConfiguration item, HomeDetectionVia newItem)
    {
        item.HomeDetectionVia = newItem;
        Redraw();
    }

    private void AddNewCar()
    {
        _carBasicConfigurations?.Add(new EditableItem<CarBasicConfiguration>(new CarBasicConfiguration()));
    }

}