@page "/support"
@using System.Globalization
@using PkSoftwareService.Custom.Backend
@using TeslaSolarCharger.Client.Components.StartPage
@using TeslaSolarCharger.Client.Helper.Contracts
@using TeslaSolarCharger.Shared.Dtos
@using TeslaSolarCharger.Shared.Dtos.Support
@using TeslaSolarCharger.Shared.Localization.Contracts
@using TeslaSolarCharger.Shared.Localization.Registries
@using TeslaSolarCharger.Shared.Localization.Registries.Pages

@inject IHttpClientHelper HttpClientHelper
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IInMemorySink InMemorySink
@inject IJavaScriptWrapper JavaScriptWrapper
@inject ITextLocalizationService TextLocalizer

<h1>@T("Support")</h1>

<h3>@T("Logging")</h3>

<MudAlert Severity="Severity.Warning"
          NoIcon="true"
          ContentAlignment="HorizontalAlignment.Left">
    <h5>@T("Never share logs publicly")</h5>
    @T("Logs might contain sensitive information like your vehicle's location. Do not share logs publicly.")
</MudAlert>

<RightAlignedButtonComponent ButtonText='@T("Download Server Logs")'
                             StartIcon="@Icons.Material.Filled.Download"
                             OnButtonClicked="@(_ => NavigationManager.NavigateTo("api/Debug/DownloadInMemoryLogs", true))"></RightAlignedButtonComponent>

<MudAlert Severity="Severity.Warning"
          NoIcon="true"
          ContentAlignment="HorizontalAlignment.Left">
    @T("Do not change the configuration as this might lead to extremly high memory usage. All Settings will be reset after a restart.")
</MudAlert>

<div class="row">
    @if (_inMemoryLogCapacity == default || _inMemoryLogLevel == default)
    {
        <PlaceholderComponent></PlaceholderComponent>
    }
    else
    {
        <div class="col">
            <GenericInput For="() => _inMemoryLogLevel.Value"
                          LabelName='@T("In Memory Log Level")'
                          ShouldBeInErrorState="@(_inMemoryLogLevelSetErrorMessage != default)"
                          ErrorMessage="@_inMemoryLogLevelSetErrorMessage"
                          OnButtonClicked="@(UpdateInMemoryLogLevel)"
                          StringIdDropDownOptions="LogLevelOptions"
                          PostfixButtonStartIcon="@Icons.Material.Filled.Save" />
        </div>
        <div class="col">
            <GenericInput For="() => _inMemoryLogCapacity.Value"
                          LabelName='@T("In Memory Log Capacity")'
                          ShouldBeInErrorState="@(_inMemoryLogCapacitySetErrorMessage != default)"
                          ErrorMessage="@_inMemoryLogCapacitySetErrorMessage"
                          OnButtonClicked="@(UpdateInMemoryLogCapacity)"
                          PostfixButtonStartIcon="@Icons.Material.Filled.Save" />
        </div>
    }
</div>
<div class="row">
    @if (_fileLogLevel == default)
    {
        <PlaceholderComponent></PlaceholderComponent>
    }
    else
    {
        <div class="col">
            <GenericInput For="() => _fileLogLevel.Value"
                          LabelName='@T("File Log Level")'
                          ShouldBeInErrorState="@(_fileLogLevelSetErrorMessage != default)"
                          ErrorMessage="@_fileLogLevelSetErrorMessage"
                          OnButtonClicked="@(UpdateFileLogLevel)"
                          StringIdDropDownOptions="LogLevelOptions"
                          PostfixButtonStartIcon="@Icons.Material.Filled.Save" />
        </div>
        <div class="col">
            <RightAlignedButtonComponent ButtonText='@T("Download Server File Logs")'
                                         StartIcon="@Icons.Material.Filled.Download"
                                         OnButtonClicked="@(_ => NavigationManager.NavigateTo("api/Debug/DownloadFileLogs", true))"></RightAlignedButtonComponent>
        </div>
    }
</div>
<hr />

<MudExpansionPanels>
    <MudExpansionPanel Text='@T("UI Logs")' ExpandedChanged="UiLogExpansionChanged">
        <div>@Format("Fetched {0} logs", _uiLogMessages.Count)</div>
        <RightAlignedButtonComponent ButtonText='@T("Copy logs to clipoard")'
                                     StartIcon="@Icons.Material.Filled.ContentCopy"
                                     OnButtonClicked="CopyLogsToClipboard"></RightAlignedButtonComponent>
        @foreach (var logMessage in _uiLogMessages)
        {
            <div>@logMessage</div>
        }
    </MudExpansionPanel>
</MudExpansionPanels>

<h3>@T("Car Debug Details")</h3>
@if (_debugCars == default)
{
    <PlaceholderComponent Count="3"></PlaceholderComponent>
}
else
{
    <MudExpansionPanels MultiExpansion="true">
        @foreach (var car in _debugCars)
        {
            <MudExpansionPanel Text="@car.Value.Name">
                <div>@Format("ID: {0}", car.Key)</div>
                <div>@Format("VIN: {0}", car.Value.Vin)</div>
                <div>@Format("Name: {0}", car.Value.Name)</div>
                <div>@Format("Is Available in Tesla account: {0}", car.Value.IsAvailableInTeslaAccount)</div>
                <div>@Format("Should be managed: {0}", car.Value.ShouldBeManaged)</div>

                @if (car.Value.Vin != default && _fleetTelemetryGetConfigs.TryGetValue(car.Key, out var config))
                {
                    <h4>@T("Result")</h4>
                    <pre>@config</pre>
                }

                <RightAlignedButtonComponent ButtonText='@T("Get Fleet Telemetry Config")'
                                             IsLoading="@_isFleetTelemetryLoading"
                                             IsDisabled="@(car.Value.Vin == default || !car.Value.IsAvailableInTeslaAccount)"
                                             DisabledToolTipText="@(car.Value.IsAvailableInTeslaAccount ? null : T("Can not check config as car is not part of Tesla account"))"
                                             OnButtonClicked="@(() => GetFleetTelemetryConfig(car.Key))"></RightAlignedButtonComponent>
                <RightAlignedButtonComponent ButtonText='@T("Get Car State")'
                                             IsLoading="@_isFleetTelemetryLoading"
                                             IsDisabled="@(car.Value.Vin == default)"
                                             DisabledToolTipText="@(car.Value.IsAvailableInTeslaAccount ? null : T("Can not check config as Vin is unknown"))"
                                             OnButtonClicked="@(() => GetDtoCar(car.Key))"></RightAlignedButtonComponent>

                @if (car.Value.Vin != default && _fleetTelemetrySetResults.TryGetValue(car.Key, out var result))
                {
                    <h4>@T("Fleet Telemetry SetResult")</h4>
                    <pre>@result</pre>
                }

                <RightAlignedButtonComponent ButtonText='@T("Normal Fleet Configuration Set")'
                                             IsLoading="@_isFleetTelemetryLoading"
                                             IsDisabled="@(car.Value.Vin == default || !car.Value.IsAvailableInTeslaAccount)"
                                             DisabledToolTipText="@(car.Value.IsAvailableInTeslaAccount ? null : T("Can not set config as car is not part of Tesla account"))"
                                             OnButtonClicked="@(() => SetFleetTelemetryConfig(car.Key, false))"></RightAlignedButtonComponent>
                <RightAlignedButtonComponent ButtonText='@T("Force Fleet Configuration Set")'
                                             IsLoading="@_isFleetTelemetryLoading"
                                             IsDisabled="@(car.Value.Vin == default || !car.Value.IsAvailableInTeslaAccount)"
                                             DisabledToolTipText="@(car.Value.IsAvailableInTeslaAccount ? null : T("Can not set config as car is not part of Tesla account"))"
                                             OnButtonClicked="@(() => SetFleetTelemetryConfig(car.Key, true))"></RightAlignedButtonComponent>
            </MudExpansionPanel>
        }
    </MudExpansionPanels>
}

<h3>@T("Charging station debug details")</h3>
@if (_debugChargingConnectors == default)
{
    <PlaceholderComponent Count="3"></PlaceholderComponent>
}
else
{
    <MudExpansionPanels MultiExpansion="true">
        @foreach (var connector in _debugChargingConnectors)
        {
            <MudExpansionPanel Text='@Format("{0} Connector: {1} ({2})", connector.Value.ChargePointId, connector.Value.ConnectorId, connector.Value.Name)'>
                <div>@Format("ID: {0}", connector.Key)</div>
                <div class="row">
                    <div class="col">
                        <GenericInput For="() => _chargingCurrentsToSet[connector.Key].Value"
                                      LabelName='@T("Charging Current to set")'
                                      HelperText='@T("When starting a charge or changing the current, this value will be used")'></GenericInput>
                    </div>
                    <div class="col">
                        <GenericInput For="() => _chargingPhasesToSet[connector.Key].Value"
                                      LabelName='@T("Charging Phases to set")'
                                      HelperText='@T("When starting a charge or changing the current, this value will be used. Note: The charger might reject the request if it does not support phase switching or you enter 3 on a charger that is only connected to one phase. Leave empty to not set the value for the charger.")'></GenericInput>
                    </div>
                </div>

                <div class="d-flex flex-wrap gap-2">
                    <RightAlignedButtonComponent ButtonText='@T("Start Charging")'
                                                 IsLoading="@_loadingOcppCommands.Contains(connector.Key)"
                                                 OnButtonClicked="@(() => StartCharging(connector.Value.ChargePointId, connector.Value.ConnectorId, connector.Key))"></RightAlignedButtonComponent>
                    <RightAlignedButtonComponent ButtonText='@T("Stop Charging")'
                                                 IsLoading="@_loadingOcppCommands.Contains(connector.Key)"
                                                 OnButtonClicked="@(() => StopCharging(connector.Value.ChargePointId, connector.Value.ConnectorId, connector.Key))"></RightAlignedButtonComponent>
                    <RightAlignedButtonComponent ButtonText='@T("Set Current and Phases")'
                                                 IsLoading="@_loadingOcppCommands.Contains(connector.Key)"
                                                 OnButtonClicked="@(() => SetCurrentAndPhases(connector.Value.ChargePointId, connector.Value.ConnectorId, connector.Key))"></RightAlignedButtonComponent>
                </div>
                <hr />
                <div class="row">
                    <div class="col">
                        <GenericInput For="() => _configurationKeysToGet[connector.Key].Value"
                                      LabelName='@T("Configuration Key to get")'></GenericInput>
                    </div>
                </div>
                <div class="d-flex flex-wrap gap-2">
                    <RightAlignedButtonComponent ButtonText='@T("Get ConnectorState")'
                                                 IsLoading="@_loadingOcppCommands.Contains(connector.Key)"
                                                 OnButtonClicked="@(() => GetConnectorState(connector.Key))"></RightAlignedButtonComponent>
                    <RightAlignedButtonComponent ButtonText='@T("Get Configuration Key")'
                                                 IsLoading="@_loadingOcppCommands.Contains(connector.Key)"
                                                 OnButtonClicked="@(() => GetConfigurationKey(connector.Value.ChargePointId, connector.Key))"></RightAlignedButtonComponent>
                    <RightAlignedButtonComponent ButtonText='@T("Set Meter data configuration")'
                                                 IsLoading="@_loadingOcppCommands.Contains(connector.Key)"
                                                 OnButtonClicked="@(() => SetMeterDataConfiguration(connector.Value.ChargePointId, connector.Key))"></RightAlignedButtonComponent>
                    <RightAlignedButtonComponent ButtonText='@T("Set Meter interval Configuration")'
                                                 IsLoading="@_loadingOcppCommands.Contains(connector.Key)"
                                                 OnButtonClicked="@(() => SetMeterIntervalConfiguration(connector.Value.ChargePointId, connector.Key))"></RightAlignedButtonComponent>
                    <RightAlignedButtonComponent ButtonText='@T("Reboot Charger")'
                                                 IsLoading="@_loadingOcppCommands.Contains(connector.Key)"
                                                 OnButtonClicked="@(() => RebootCharger(connector.Value.ChargePointId, connector.Key))"></RightAlignedButtonComponent>
                    <RightAlignedButtonComponent ButtonText='@T("Trigger Status Notification")'
                                                 IsLoading="@_loadingOcppCommands.Contains(connector.Key)"
                                                 OnButtonClicked="@(() => TriggerStatusNotification(connector.Value.ChargePointId, connector.Key))"></RightAlignedButtonComponent>
                </div>

                @if (_commandResults.TryGetValue(connector.Key, out var result))
                {
                    <h4>@T("Command Result:")</h4>
                    <pre>@result</pre>
                }
            </MudExpansionPanel>
        }
    </MudExpansionPanels>

    <h3>@T("MeterValues")</h3>

    @if (_loadingMeterValues)
    {
        <MudPaper Class="d-flex justify-end flex-grow-1 gap-4 pr-2 mb-2" Elevation="0">
            <MudAlert Severity="Severity.Info">
                @T("Depending on your database size and hardware this might take a few minutes, please wait...")
            </MudAlert>
        </MudPaper>
    }

    <RightAlignedButtonComponent ButtonText='@T("Get latest Meter values")'
                                 IsLoading="@_loadingMeterValues"
                                 OnButtonClicked="GetMeterValues"></RightAlignedButtonComponent>
    @if (_meterValueDetails != default)
    {
        <pre>@_meterValueDetails</pre>
    }

    <RightAlignedButtonComponent ButtonText='@T("Reload page")'
                                 OnButtonClicked="JavaScriptWrapper.ReloadPage"></RightAlignedButtonComponent>

    <HiddenErrorsComponent></HiddenErrorsComponent>
    <InstallationInformation></InstallationInformation>
}

@code {
    private readonly Dictionary<int, string> _fleetTelemetryGetConfigs = new();

    private readonly Dictionary<int, string> _fleetTelemetrySetResults = new();

    private Dictionary<int, DtoDebugCar>? _debugCars;
    private bool _isFleetTelemetryLoading;

    private Dictionary<int, DtoDebugChargingConnector>? _debugChargingConnectors;
    private readonly HashSet<int> _loadingOcppCommands = new();
    private readonly Dictionary<int, DtoValue<decimal>> _chargingCurrentsToSet = new();
    private readonly Dictionary<int, DtoValue<int?>> _chargingPhasesToSet = new();
    private readonly Dictionary<int, DtoValue<string>> _configurationKeysToGet = new();
    private readonly Dictionary<int, string> _commandResults = new();
    private List<string> _uiLogMessages = new();

    private DtoValue<string>? _inMemoryLogLevel;
    private string? _inMemoryLogLevelSetErrorMessage;
    private DtoValue<int>? _inMemoryLogCapacity;
    private string? _inMemoryLogCapacitySetErrorMessage;
    private DtoValue<string>? _fileLogLevel;
    private string? _fileLogLevelSetErrorMessage;

    private bool _loadingMeterValues;
    private string? _meterValueDetails;

    private Dictionary<string, string> LogLevelOptions => new()
    {
        { "Verbose", T("Verbose") },
        { "Debug", T("Debug") },
        { "Information", T("Information") },
        { "Warning", T("Warning") },
        { "Error", T("Error") },
        { "Fatal", T("Fatal") },
    };

    protected override async Task OnInitializedAsync()
    {
        var cars = await HttpClientHelper.SendGetRequestWithSnackbarAsync<Dictionary<int, DtoDebugCar>>("api/Debug/GetCars");
        if (cars != default)
        {
            _debugCars = cars;
        }
        await RefreshChargingConnectors();
        _inMemoryLogLevel = await HttpClientHelper.SendGetRequestWithSnackbarAsync<DtoValue<string>>("api/Debug/GetInMemoryLogLevel");
        _fileLogLevel = await HttpClientHelper.SendGetRequestWithSnackbarAsync<DtoValue<string>>("api/Debug/GetFileLogLevel");
        _inMemoryLogCapacity = await HttpClientHelper.SendGetRequestWithSnackbarAsync<DtoValue<int>>("api/Debug/GetInMemoryLogCapacity");
    }

    private async Task RefreshChargingConnectors()
    {
        var connectors = await HttpClientHelper.SendGetRequestWithSnackbarAsync<Dictionary<int, DtoDebugChargingConnector>>("api/Debug/GetChargingConnectors");
        if (connectors != default)
        {
            _chargingCurrentsToSet.Clear();
            _chargingPhasesToSet.Clear();
            _configurationKeysToGet.Clear();
            var defaultChargingCurrent = 6;
            foreach (var connector in connectors)
            {
                _chargingCurrentsToSet.Add(connector.Key, new(defaultChargingCurrent));
                _chargingPhasesToSet.Add(connector.Key, new(null));
                _configurationKeysToGet.Add(connector.Key, new(string.Empty));
            }
            _debugChargingConnectors = connectors;
        }
    }

    private async Task GetFleetTelemetryConfig(int key)
    {
        if (_debugCars == default)
        {
            return;
        }
        var car = _debugCars[key];
        if (car.Vin == default)
        {
            Snackbar.Add(T("VIN is unknown"), Severity.Error);
            return;
        }

        _isFleetTelemetryLoading = true;
        var result = await HttpClientHelper.SendGetRequestAsync<DtoValue<string>>($"api/Debug/GetFleetTelemetryConfiguration?vin={Uri.EscapeDataString(car.Vin)}");
        string stringToDisplay;
        if (result.HasError)
        {
            stringToDisplay = result.ErrorMessage ?? T("No error message");
        }
        else
        {
            stringToDisplay = result.Data?.Value ?? T("No data");
        }
        _fleetTelemetryGetConfigs[key] = stringToDisplay;
        _isFleetTelemetryLoading = false;
    }

    private async Task GetDtoCar(int carKey)
    {
        _isFleetTelemetryLoading = true;
        var result = await HttpClientHelper.SendGetRequestAsync<DtoValue<string>>($"api/Debug/GetDtoCar?carId={carKey}");
        string stringToDisplay;
        if (result.HasError)
        {
            stringToDisplay = result.ErrorMessage ?? T("No error message");
        }
        else
        {
            stringToDisplay = result.Data?.Value ?? T("No data");
        }
        _fleetTelemetryGetConfigs[carKey] = stringToDisplay;
        _isFleetTelemetryLoading = false;
    }

    private async Task SetFleetTelemetryConfig(int carKey, bool forceReconfiguration)
    {
        if (_debugCars == default)
        {
            return;
        }
        var car = _debugCars[carKey];
        if (car.Vin == default)
        {
            Snackbar.Add(T("VIN is unknown"), Severity.Error);
            return;
        }

        _isFleetTelemetryLoading = true;
        var result = await HttpClientHelper.SendPostRequestAsync<DtoValue<string>>($"api/Debug/SetFleetTelemetryConfiguration?vin={Uri.EscapeDataString(car.Vin)}&forceReconfiguration={forceReconfiguration}", null);
        string stringToDisplay;
        if (result.HasError)
        {
            stringToDisplay = result.ErrorMessage ?? T("No error message");
        }
        else
        {
            stringToDisplay = result.Data?.Value ?? T("No data");
        }
        _fleetTelemetrySetResults[carKey] = stringToDisplay;
        _isFleetTelemetryLoading = false;
    }

    private async Task UpdateInMemoryLogLevel()
    {
        if (_inMemoryLogLevel == default)
        {
            return;
        }

        if (string.IsNullOrEmpty(_inMemoryLogLevel.Value))
        {
            return;
        }
        var result = await HttpClientHelper.SendPostRequestAsync<object>($"api/Debug/SetInMemoryLogLevel?level={Uri.EscapeDataString(_inMemoryLogLevel.Value)}", null);
        if (result.HasError)
        {
            _inMemoryLogLevelSetErrorMessage = result.ErrorMessage;
            return;
        }
        Snackbar.Add(T("Log level updated"), Severity.Success);
    }

    private async Task UpdateFileLogLevel()
    {
        if (_fileLogLevel == default)
        {
            return;
        }

        if (string.IsNullOrEmpty(_fileLogLevel.Value))
        {
            return;
        }
        var result = await HttpClientHelper.SendPostRequestAsync<object>($"api/Debug/SetFileLogLevel?level={Uri.EscapeDataString(_fileLogLevel.Value)}", null);
        if (result.HasError)
        {
            _fileLogLevelSetErrorMessage = result.ErrorMessage;
            return;
        }
        Snackbar.Add(T("File Log level updated"), Severity.Success);
    }

    private async Task UpdateInMemoryLogCapacity()
    {
        if (_inMemoryLogCapacity == default)
        {
            return;
        }
        var result = await HttpClientHelper.SendPostRequestAsync<object>($"api/Debug/SetInMemoryLogCapacity?capacity={_inMemoryLogCapacity.Value}", null);
        if (result.HasError)
        {
            _inMemoryLogCapacitySetErrorMessage = result.ErrorMessage;
            return;
        }
        Snackbar.Add(T("Log capacity updated"), Severity.Success);
    }

    private async Task StartCharging(string chargePointId, int connectorId, int connectorKey)
    {
        _loadingOcppCommands.Add(connectorKey);
        var currentToSet = _chargingCurrentsToSet[connectorKey].Value;
        var phasesToSet = _chargingPhasesToSet[connectorKey].Value;
        var result = await HttpClientHelper.SendPostRequestAsync<DtoValue<string>>(
            $"api/Debug/StartCharging?chargepointId={chargePointId}&connectorId={connectorId}&currentToSet={currentToSet}&numberOfPhases={phasesToSet}", null);
        _commandResults[connectorKey] = result.Data?.Value ?? T("No data");
        _loadingOcppCommands.Remove(connectorKey);
    }

    private async Task StopCharging(string chargePointId, int connectorId, int connectorKey)
    {
        _loadingOcppCommands.Add(connectorKey);
        var result = await HttpClientHelper.SendPostRequestAsync<DtoValue<string>>(
            $"api/Debug/StopCharging?chargepointId={chargePointId}&connectorId={connectorId}", null);
        _commandResults[connectorKey] = result.Data?.Value ?? T("No data");
        _loadingOcppCommands.Remove(connectorKey);
    }

    private async Task SetCurrentAndPhases(string chargePointId, int connectorId, int connectorKey)
    {
        _loadingOcppCommands.Add(connectorKey);
        var currentToSet = _chargingCurrentsToSet[connectorKey].Value;
        var phasesToSet = _chargingPhasesToSet[connectorKey].Value;
        var result = await HttpClientHelper.SendPostRequestAsync<DtoValue<string>>(
            $"api/Debug/SetCurrentAndPhases?chargepointId={chargePointId}&connectorId={connectorId}&currentToSet={currentToSet}&numberOfPhases={phasesToSet}", null);
        _commandResults[connectorKey] = result.Data?.Value ?? T("No data");
        _loadingOcppCommands.Remove(connectorKey);
    }

    private async Task GetConfigurationKey(string chargePointId, int connectorKey)
    {
        _loadingOcppCommands.Add(connectorKey);
        var configurationKey = _configurationKeysToGet[connectorKey].Value;
        var result = await HttpClientHelper.SendGetRequestAsync<DtoValue<string>>(
            $"api/Debug/GetChargePointConfigurationKey?chargepointId={chargePointId}&configurationKey={configurationKey}");
        _commandResults[connectorKey] = result.Data?.Value ?? T("No data");
        _loadingOcppCommands.Remove(connectorKey);
    }

    private async Task SetMeterDataConfiguration(string chargePointId, int connectorKey)
    {
        _loadingOcppCommands.Add(connectorKey);
        var result = await HttpClientHelper.SendPostRequestAsync<DtoValue<string>>(
            $"api/Debug/SetMeterValuesSampledDataConfiguration?chargepointId={chargePointId}", null);
        _commandResults[connectorKey] = result.Data?.Value ?? T("No data");
        _loadingOcppCommands.Remove(connectorKey);
    }

    private async Task SetMeterIntervalConfiguration(string chargePointId, int connectorKey)
    {
        _loadingOcppCommands.Add(connectorKey);
        var result = await HttpClientHelper.SendPostRequestAsync<DtoValue<string>>(
            $"api/Debug/SetMeterValuesSampleIntervalConfiguration?chargepointId={chargePointId}", null);
        _commandResults[connectorKey] = result.Data?.Value ?? T("No data");
        _loadingOcppCommands.Remove(connectorKey);
    }

    private async Task RebootCharger(string chargePointId, int connectorKey)
    {
        _loadingOcppCommands.Add(connectorKey);
        var result = await HttpClientHelper.SendPostRequestAsync<DtoValue<string>>(
            $"api/Debug/RebootCharger?chargepointId={chargePointId}", null);
        _commandResults[connectorKey] = result.Data?.Value ?? T("No data");
        _loadingOcppCommands.Remove(connectorKey);
    }

    private async Task TriggerStatusNotification(string chargePointId, int connectorKey)
    {
        _loadingOcppCommands.Add(connectorKey);
        var result = await HttpClientHelper.SendPostRequestAsync<DtoValue<string>>(
            $"api/Debug/TriggerStatusNotification?chargepointId={chargePointId}", null);
        _commandResults[connectorKey] = result.Data?.Value ?? T("No data");
        _loadingOcppCommands.Remove(connectorKey);
    }

    private async Task GetConnectorState(int connectorKey)
    {
        _loadingOcppCommands.Add(connectorKey);
        var result = await HttpClientHelper.SendGetRequestAsync<DtoValue<string>>(
            $"api/Debug/GetOcppConnectorState?connectorId={connectorKey}");
        _commandResults[connectorKey] = result.Data?.Value ?? T("No data");
        _loadingOcppCommands.Remove(connectorKey);
    }

    private void UiLogExpansionChanged(bool isExpanded)
    {
        if (isExpanded)
        {
            _uiLogMessages = InMemorySink.GetLogs().ToList();
        }
    }

    private void CopyLogsToClipboard()
    {
        var stringToCopy = string.Join(Environment.NewLine, _uiLogMessages);
        JavaScriptWrapper.CopyStringToClipboard(stringToCopy);
    }

    private async Task GetMeterValues()
    {
        _loadingMeterValues = true;
        var result = await HttpClientHelper.SendGetRequestAsync<DtoValue<string>>("api/Debug/GetLastestMeterValues");
        if (result.HasError)
        {
            _meterValueDetails = result.ErrorMessage ?? T("No error message");
        }
        else
        {
            _meterValueDetails = result.Data?.Value ?? T("No data");
        }
        _loadingMeterValues = false;
    }

    private string T(string key) =>
        TextLocalizer.Get<SupportPageLocalizationRegistry>(key, typeof(SharedComponentLocalizationRegistry))
        ?? key;

    private string Format(string key, params object?[] arguments) =>
        string.Format(CultureInfo.CurrentCulture, T(key), arguments);
}
