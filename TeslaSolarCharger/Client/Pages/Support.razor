@page "/support"
@using TeslaSolarCharger.Client.Helper.Contracts
@using TeslaSolarCharger.Shared.Dtos
@using TeslaSolarCharger.Shared.Dtos.Support

@inject IHttpClientHelper HttpClientHelper
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<h1>Support</h1>


<h3>Logging</h3>

<MudAlert Severity="Severity.Warning"
          NoIcon="true"
          ContentAlignment="HorizontalAlignment.Left">
    <h5>Never share logs publicly</h5>
    Logs might contain sensitive information like your vehicle's location. Do not share logs publicly.
</MudAlert>

<RightAlignedButtonComponent ButtonText="Download Logs"
                             StartIcon="@Icons.Material.Filled.Download"
                             OnButtonClicked="@(_ => NavigationManager.NavigateTo("api/Debug/DownloadLogs", true))"></RightAlignedButtonComponent>

<MudAlert Severity="Severity.Warning"
          NoIcon="true"
          ContentAlignment="HorizontalAlignment.Left">
    Do not change the configuration as this might lead to extremly high memory usage. All Settings will be reset after a restart.
</MudAlert>

<div class="row">
    @if (_logCapacity == default || _logLevel == default)
    {
        <PlaceholderComponent></PlaceholderComponent>
    }
    else
    {
        <div class="col">
            <GenericInput For="() => _logLevel.Value"
                          LabelName="Log Level"
                          ShouldBeInErrorState="@(_logLevelSetErrorMessage != default)"
                          ErrorMessage="@_logLevelSetErrorMessage"
                          OnButtonClicked="@(UpdateLogLevel)"
                          StringIdDropDownOptions="LogLevelOptions"
                          PostfixButtonStartIcon="@Icons.Material.Filled.Save" />
        </div>
        <div class="col">
            <GenericInput For="() => _logCapacity.Value"
                          LabelName="Log Capacity"
                          ShouldBeInErrorState="@(_logCapacitySetErrorMessage != default)"
                          ErrorMessage="@_logCapacitySetErrorMessage"
                          OnButtonClicked="@(UpdateLogCapacity)"
                          PostfixButtonStartIcon="@Icons.Material.Filled.Save" />
        </div>
    }
</div>

<hr />

<h3>Car Debug Details</h3>
@if (_debugCars == default)
{
    <PlaceholderComponent Count="3"></PlaceholderComponent>
}
else
{
    <MudExpansionPanels MultiExpansion="true">
        @foreach (var car in _debugCars)
        {
            <MudExpansionPanel Text="@car.Value.Name">
                <div>ID: @car.Key</div>
                <div>VIN: @car.Value.Vin</div>
                <div>Name: @car.Value.Name</div>
                <div>Is Available in Tesla account: @car.Value.IsAvailableInTeslaAccount</div>
                <div>Should be managed: @car.Value.ShouldBeManaged</div>


                @if (car.Value.Vin != default && _fleetTelemetryGetConfigs.TryGetValue(car.Value.Vin, out var config))
                {
                    <h4>Fleet Telemetry Config</h4>
                    <pre>@config</pre>
                }

                <RightAlignedButtonComponent ButtonText="Get Fleet Telemetry Config"
                                             IsLoading="@_isFleetTelemetryLoading"
                                             IsDisabled="@(car.Value.Vin == default || !car.Value.IsAvailableInTeslaAccount)"
                                             DisabledToolTipText="@(car.Value.IsAvailableInTeslaAccount ? null : "Can not check config as car is not part of Tesla account")"
                                             OnButtonClicked="@(() => GetFleetTelemetryConfig(car.Value.Vin))"></RightAlignedButtonComponent>

                @if (car.Value.Vin != default && _fleetTelemetrySetResults.TryGetValue(car.Value.Vin, out var result))
                {
                    <h4>Fleet Telemetry SetResult</h4>
                    <pre>@result</pre>
                }

                <RightAlignedButtonComponent ButtonText="Normal Fleet Configuration Set"
                                             IsLoading="@_isFleetTelemetryLoading"
                                             IsDisabled="@(car.Value.Vin == default || !car.Value.IsAvailableInTeslaAccount)"
                                             DisabledToolTipText="@(car.Value.IsAvailableInTeslaAccount ? null : "Can not set config as car is not part of Tesla account")"
                                             OnButtonClicked="@(() => SetFleetTelemetryConfig(car.Value.Vin, false))"></RightAlignedButtonComponent>
                <RightAlignedButtonComponent ButtonText="Force Fleet Configuration Set"
                                             IsLoading="@_isFleetTelemetryLoading"
                                             IsDisabled="@(car.Value.Vin == default || !car.Value.IsAvailableInTeslaAccount)"
                                             DisabledToolTipText="@(car.Value.IsAvailableInTeslaAccount ? null : "Can not set config as car is not part of Tesla account")"
                                             OnButtonClicked="@(() => SetFleetTelemetryConfig(car.Value.Vin, true))"></RightAlignedButtonComponent>
            </MudExpansionPanel>
        }
    </MudExpansionPanels>
}

<h3>Charging station debug details</h3>
@if (_debugChargingConnectors == default)
{
    <PlaceholderComponent Count="3"></PlaceholderComponent>
}
else
{
    <MudExpansionPanels MultiExpansion="true">
        @foreach (var connector in _debugChargingConnectors)
        {
            <MudExpansionPanel Text="@($"{connector.Value.ChargePointId} Connector: {connector.Value.ConnectorId}")">
                <div>ID: @connector.Key</div>
                <div class="row">
                    <div class="col">
                        <GenericInput For="() => _chargingCurrentsToSet[connector.Key].Value"
                                      LabelName="Charging Current to set"
                                      HelperText="When starting a charge or changing the current, this value will be used"></GenericInput>
                    </div>
                    <div class="col">
                        <GenericInput For="() => _chargingPhasesToSet[connector.Key].Value"
                                      LabelName="Charging Phases to set"
                                      HelperText="When starting a charge or changing the current, this value will be used. Note: The charger might reject the request if it does not support phase switching or you enter 3 on a charger that is only connected to one phase. Leave empty to not set the value for the charger."></GenericInput>
                    </div>
                </div>
                
                <div class="row">
                    <div class="col">
                        <RightAlignedButtonComponent ButtonText="Start Charging"
                                                     IsLoading="@_loadingOcppCommands.Contains(connector.Key)"
                                                     OnButtonClicked="@(() => StartCharging(connector.Value.ChargePointId, connector.Value.ConnectorId, connector.Key))"></RightAlignedButtonComponent>
                    </div>
                    <div class="col">
                        <RightAlignedButtonComponent ButtonText="Stop Charging"
                                                     IsLoading="@_loadingOcppCommands.Contains(connector.Key)"
                                                     OnButtonClicked="@(() => StopCharging(connector.Value.ChargePointId, connector.Value.ConnectorId, connector.Key))"></RightAlignedButtonComponent>
                    </div>
                    <div class="col">
                        <RightAlignedButtonComponent ButtonText="Set Current and Phases"
                                                     IsLoading="@_loadingOcppCommands.Contains(connector.Key)"
                                                     OnButtonClicked="@(() => SetCurrentAndPhases(connector.Value.ChargePointId, connector.Value.ConnectorId, connector.Key))"></RightAlignedButtonComponent>
                    </div>
                </div>
                @if (_commandResults.TryGetValue(connector.Key, out var result))
                {
                    <h4>Command Result: </h4>
                    <pre>@result</pre>
                }
            </MudExpansionPanel>
        }
    </MudExpansionPanels>
}



@code {
    private readonly Dictionary<string, string> _fleetTelemetryGetConfigs = new();

    private readonly Dictionary<string, string> _fleetTelemetrySetResults = new();

    private Dictionary<int, DtoDebugCar>? _debugCars;
    private bool _isFleetTelemetryLoading;

    private Dictionary<int, DtoDebugChargingConnector>? _debugChargingConnectors;
    private readonly HashSet<int> _loadingOcppCommands = new();
    private readonly Dictionary<int, DtoValue<decimal>> _chargingCurrentsToSet = new();
    private readonly Dictionary<int, DtoValue<int?>> _chargingPhasesToSet = new();
    private readonly Dictionary<int, string> _commandResults = new();


    private DtoValue<string>? _logLevel;
    private string? _logLevelSetErrorMessage;
    private DtoValue<int>? _logCapacity;
    private string? _logCapacitySetErrorMessage;

    private Dictionary<string, string> LogLevelOptions => new()
    {
        { "Verbose", "Verbose" },
        { "Debug", "Debug" },
        { "Information", "Information" },
        { "Warning", "Warning" },
        { "Error", "Error" },
        { "Fatal", "Fatal" },
    };

    protected override async Task OnInitializedAsync()
    {
        var cars = await HttpClientHelper.SendGetRequestWithSnackbarAsync<Dictionary<int, DtoDebugCar>>("api/Debug/GetCars");
        if (cars != default)
        {
            _debugCars = cars;
        }
        await RefreshChargingConnectors();
        _logLevel = await HttpClientHelper.SendGetRequestWithSnackbarAsync<DtoValue<string>>("api/Debug/GetLogLevel");
        _logCapacity = await HttpClientHelper.SendGetRequestWithSnackbarAsync<DtoValue<int>>("api/Debug/GetLogCapacity");
    }

    private async Task RefreshChargingConnectors()
    {
        var connectors = await HttpClientHelper.SendGetRequestWithSnackbarAsync<Dictionary<int, DtoDebugChargingConnector>>("api/Debug/GetChargingConnectors");
        if (connectors != default)
        {
            _chargingCurrentsToSet.Clear();
            _chargingPhasesToSet.Clear();
            var defaultChargingCurrent = 6;
            foreach (var connector in connectors)
            {
                _chargingCurrentsToSet.Add(connector.Key, new(defaultChargingCurrent));
                _chargingPhasesToSet.Add(connector.Key, new(null));
            }
            _debugChargingConnectors = connectors;
        }
    }


    private async Task GetFleetTelemetryConfig(string? vin)
    {
        if (vin == default)
        {
            Snackbar.Add("VIN is unknown", Severity.Error);
            return;
        }

        _isFleetTelemetryLoading = true;
        var result = await HttpClientHelper.SendGetRequestAsync<DtoValue<string>>($"api/Debug/GetFleetTelemetryConfiguration?vin={Uri.EscapeDataString(vin)}");
        string stringToDisplay;
        if (result.HasError)
        {
            stringToDisplay = result.ErrorMessage ?? "No error message";
        }
        else
        {
            stringToDisplay = result.Data?.Value ?? "No data";
        }
        _fleetTelemetryGetConfigs[vin] = stringToDisplay;
        _isFleetTelemetryLoading = false;
    }

    private async Task SetFleetTelemetryConfig(string? vin, bool forceReconfiguration)
    {
        if (vin == default)
        {
            Snackbar.Add("VIN is unknown", Severity.Error);
            return;
        }

        _isFleetTelemetryLoading = true;
        var result = await HttpClientHelper.SendPostRequestAsync<DtoValue<string>>($"api/Debug/SetFleetTelemetryConfiguration?vin={Uri.EscapeDataString(vin)}&forceReconfiguration={forceReconfiguration}", null);
        string stringToDisplay;
        if (result.HasError)
        {
            stringToDisplay = result.ErrorMessage ?? "No error message";
        }
        else
        {
            stringToDisplay = result.Data?.Value ?? "No data";
        }
        _fleetTelemetrySetResults[vin] = stringToDisplay;
        _isFleetTelemetryLoading = false;
    }

    private async Task UpdateLogLevel()
    {
        if (_logLevel == default)
        {
            return;
        }

        if (string.IsNullOrEmpty(_logLevel.Value))
        {
            return;
        }
        var result = await HttpClientHelper.SendPostRequestAsync<object>($"api/Debug/SetLogLevel?level={Uri.EscapeDataString(_logLevel.Value)}", null);
        if (result.HasError)
        {
            _logLevelSetErrorMessage = result.ErrorMessage;
            return;
        }
        Snackbar.Add("Log level updated", Severity.Success);
    }

    private async Task UpdateLogCapacity()
    {
        if (_logCapacity == default)
        {
            return;
        }
        var result = await HttpClientHelper.SendPostRequestAsync<object>($"api/Debug/SetLogCapacity?capacity={_logCapacity.Value}", null);
        if (result.HasError)
        {
            _logCapacitySetErrorMessage = result.ErrorMessage;
            return;
        }
        Snackbar.Add("Log capacity updated", Severity.Success);
    }

    private async Task StartCharging(string chargePointId, int connectorId, int connectorKey)
    {
        _loadingOcppCommands.Add(connectorKey);
        var currentToSet = _chargingCurrentsToSet[connectorKey].Value;
        var phasesToSet = _chargingPhasesToSet[connectorKey].Value;
        var result = await HttpClientHelper.SendPostRequestAsync<DtoValue<string>>(
            $"api/Debug/StartCharging?chargepointId={chargePointId}&connectorId={connectorId}&currentToSet={currentToSet}&numberOfPhases={phasesToSet}", null);
        _commandResults[connectorKey] = result.Data?.Value ?? "No data";
        _loadingOcppCommands.Remove(connectorKey);
    }

    private async Task StopCharging(string chargePointId, int connectorId, int connectorKey)
    {
        _loadingOcppCommands.Add(connectorKey);
        var result = await HttpClientHelper.SendPostRequestAsync<DtoValue<string>>(
            $"api/Debug/StopCharging?chargepointId={chargePointId}&connectorId={connectorId}", null);
        _commandResults[connectorKey] = result.Data?.Value ?? "No data";
        _loadingOcppCommands.Remove(connectorKey);
    }

    private async Task SetCurrentAndPhases(string chargePointId, int connectorId, int connectorKey)
    {
        _loadingOcppCommands.Add(connectorKey);
        var currentToSet = _chargingCurrentsToSet[connectorKey].Value;
        var phasesToSet = _chargingPhasesToSet[connectorKey].Value;
        var result = await HttpClientHelper.SendPostRequestAsync<DtoValue<string>>(
            $"api/Debug/SetCurrentAndPhases?chargepointId={chargePointId}&connectorId={connectorId}&currentToSet={currentToSet}&numberOfPhases={phasesToSet}", null);
        _commandResults[connectorKey] = result.Data?.Value ?? "No data";
        _loadingOcppCommands.Remove(connectorKey);
    }
}
