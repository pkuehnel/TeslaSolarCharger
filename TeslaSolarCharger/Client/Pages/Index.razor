@page "/"
@using System.Globalization
@using TeslaSolarCharger.Shared
@using TeslaSolarCharger.Shared.Dtos
@using TeslaSolarCharger.Shared.Dtos.IndexRazor.CarValues
@using TeslaSolarCharger.Shared.Enums
@using TeslaSolarCharger.Shared.Resources
@using TeslaSolarCharger.Shared.Dtos.Settings
@using TeslaSolarCharger.Shared.Dtos.Table
@using TeslaSolarCharger.Client.Helper
@using TeslaSolarCharger.Client.Services.Contracts
@using TeslaSolarCharger.Shared.Resources.Contracts
@using TeslaSolarCharger.Client.Components.StartPage

@implements IDisposable


@inject HttpClient HttpClient
@inject ISnackbar Snackbar
@inject ToolTipTextKeys ToolTipTextKeys
@inject NavigationManager NavigationManager
@inject IConstants Constants
@inject IEnergyDataService EnergyDataService

<PageTitle>Tesla Solar Charger</PageTitle>

<MerryChristmasAndHappyNewYearComponent></MerryChristmasAndHappyNewYearComponent>

<BackendInformationDisplayComponent></BackendInformationDisplayComponent>
<LoggedErrorsComponent></LoggedErrorsComponent>

<PowerFlowComponent></PowerFlowComponent>
<PowerBufferComponent></PowerBufferComponent>
@if(_showEnergyData)
{
    <EnergyPredictionComponent></EnergyPredictionComponent>
}


@if (_carBaseStates == null || _carBaseSettings == null)
{
    <div class="spinner"></div>
}
else
{
    @if (_carBaseStates.Count < 1)
    {
        <MudAlert Severity="Severity.Error"
        NoIcon="true"
        ContentAlignment="HorizontalAlignment.Left">
            <h4>Enable TeslaSolarCharger for cars</h4>
            You need to enable TeslaSolarCharger for at least one car in the <MudLink Href="/CarSettings">car settings page</MudLink>.
        </MudAlert>
    }

    @foreach (var car in _carBaseStates)
    {
        <div class="shadow p-3 mb-5 bg-white rounded">
            <div class="mb-3">
                <div>
                    <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.CarName]">
                        <b>@(car.Name)</b>
                    </TooltipComponent>
                    <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.CarChargingPowerHome]">@car.HomeChargePower W</TooltipComponent>
                </div>
                @if (_testingFleetApiCarIds.Any(i => i == car.CarId))
                {
                    <div>
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span class="sr-only">Testing Fleet API access might take about 30 seconds...</span>
                    </div>
                }
                else if (_isFleetApiWorkingForCar.Any(d => d.Key == car.CarId))
                {
                    @if (_isFleetApiWorkingForCar[car.CarId] == true)
                    {
                        <div class="alert alert-success" role="alert">
                            API access is working
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-danger" role="alert">
                            <div>API access is not working.</div>
                            <hr />
                            <p>
                                Note: For the test the car needs to be awake. If the car was not awake, wake it up and <button class="btn btn-link" type="button" @onclick="_ => TestFleetApiAccess(car.CarId)">test again</button>. <br />
                                If it still does not work, go to your car and under Controls -> Locks you can check if a key named "solar4car.com" is present. If not try adding the key again by clicking <button class="btn btn-link" type="button" @onclick="_ => OpenRegisterPublicKeyPage(car.CarId)">here</button>.
                            </p>

                        </div>
                    }
                }
                else if (car.FleetApiState == default)
                {
                    <div class="alert alert-danger" role="alert">
                        You did not test the Fleet API connection, yet. Wake up the car by opening a door, wait about 30 seconds and click <button class="btn btn-link" type="button" @onclick="_ => TestFleetApiAccess(car.CarId)">here</button> to test the connection.
                    </div>
                }
                else if (car.FleetApiState is TeslaCarFleetApiState.NotConfigured or TeslaCarFleetApiState.NotWorking)
                {
                    <div class="alert alert-danger" role="alert">
                        TSC is not registerd in car, click <button class="btn btn-link" type="button" @onclick="_ => OpenRegisterPublicKeyPage(car.CarId)">here</button> to register the car. <br />
                        Note: It is not possible to select the correct car. In order to register the correct car you need to select the car in the Tesla App before clicking on the button.
                    </div>
                }
                else if (car.FleetApiState == TeslaCarFleetApiState.OpenedLinkButNotTested)
                {
                    <div class="alert alert-danger" role="alert">
                        You registerd the car but did not test the connection yet. Click <button class="btn btn-link" type="button" @onclick="_ => TestFleetApiAccess(car.CarId)">here</button> to test the connection.
                    </div>
                }

                <div>
                    @if (car.IsHealthy == false)
                    {
                        <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.CarNotHealthy]">
                            <span class="material-symbols-outlined me-1">
                                error
                            </span>
                        </TooltipComponent>
                    }
                    @if (car.IsHome)
                    {
                        <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.CarAtHome]">
                            <span class="material-symbols-outlined me-1">
                                home
                            </span>
                        </TooltipComponent>
                    }
                    @if (car.PluggedIn)
                    {
                        <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.CarPluggedIn]">
                            <span class="material-symbols-outlined me-1">
                                power
                            </span>
                        </TooltipComponent>
                    }

                </div>
                <div class="d-flex align-items-center mb-1">
                    <MudIcon Class="mr-1" Icon="@(GetBatteryIconBySoc(car.StateOfCharge))"></MudIcon>
                    <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.CarSoc]">@(car.StateOfCharge) %</TooltipComponent> <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.CarSocLimit]">(@(car.StateOfChargeLimit) %)</TooltipComponent>
                </div>
                @if (car.ModuleTemperatureMin != null && car.ModuleTemperatureMax != null)
                {
                    <div class="d-flex align-items-center mb-1">
                        <MudIcon Class="mr-1" Icon="@Icons.Material.Filled.Thermostat"></MudIcon>
                        <TooltipComponent Text="Battery Temperature">@(car.ModuleTemperatureMin)@("\u00b0")C - @(car.ModuleTemperatureMax)@("\u00b0")C</TooltipComponent>
                    </div>
                }
                <div>
                </div>

                <div class="d-flex align-items-center mb-1">
                    <MudIcon Class="mr-1" Icon="@Icons.Material.Filled.SolarPower"></MudIcon>
                    <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.CarChargedSolarEnergy]">
                        @car.DtoChargeSummary.ChargedSolarEnergy.ToString("0.00") kWh (@car.DtoChargeSummary.SolarPortionPercent.ToString("0.0") %)
                    </TooltipComponent>
                </div>
                @if (car.DtoChargeSummary.ChargedHomeBatteryEnergy > 0)
                {
                    <div class="d-flex align-items-center mb-1">
                        <MudIcon Class="mr-1" Icon="@Icons.Material.Filled.BatteryFull"></MudIcon>
                        <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.CarChargedHomeBatteryEnergy]">
                            @car.DtoChargeSummary.ChargedHomeBatteryEnergy.ToString("0.00") kWh (@car.DtoChargeSummary.HomeBatteryPortionPercent.ToString("0.0") %)
                        </TooltipComponent>
                    </div>
                }

                <div class="d-flex align-items-center mb-1">
                    <MudIcon Class="mr-1" Icon="@Constants.GridPoleIcon"></MudIcon>
                    <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.CarChargedGridEnergy]">
                        @car.DtoChargeSummary.ChargedGridEnergy.ToString("0.00") kWh (@((100 - car.DtoChargeSummary.SolarPortionPercent - car.DtoChargeSummary.HomeBatteryPortionPercent).ToString("0.0")) %)
                    </TooltipComponent>
                </div>
                <div class="d-flex align-items-center mb-1">
                    <span class="material-symbols-outlined">
                        attach_money
                    </span>
                    <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.CarChargeCost]">
                        <a href="HandledCharges/@car.CarId">@car.DtoChargeSummary.ChargeCost.ToString("0.00") (@(car.DtoChargeSummary.AverageEnergyPrice.ToString("0.000")) per kWh)</a>
                    </TooltipComponent>
                </div>
            </div>
            <div>
                <InputComponent ValueId="@($"car{car.CarId}ChargeMode")"
                LabelText="ChargeMode"
                UnitText=""
                HelpText="">
                    <InputFragment>
                        <InputSelect class="form-select" @bind-Value="@_carBaseSettings[car.CarId].ChargeMode" id="@($"car{car.CarId}ChargeMode")">
                            @foreach (var value in Enum.GetValues<ChargeMode>())
                            {
                                <option value="@value">@value.ToFriendlyString()</option>
                            }
                        </InputSelect>
                    </InputFragment>
                </InputComponent>

            </div>

            @if (_carBaseSettings[car.CarId].ChargeMode is ChargeMode.PvAndMinSoc or ChargeMode.PvOnly or ChargeMode.SpotPrice)
            {
                <InputComponent ValueId="@($"car{car.CarId}MinSoc")"
                LabelText="Min SOC"
                UnitText="%"
                HelpText="">
                    <InputFragment>
                        <InputNumber id="maxCombinedCurrent" @bind-Value="_carBaseSettings[car.CarId].MinimumStateOfCharge" class="form-control" min="0" max="100" placeholder=" " />
                    </InputFragment>
                </InputComponent>
            }
            @if (_carBaseSettings[car.CarId].ChargeMode is ChargeMode.PvOnly or ChargeMode.SpotPrice)
            {
                <div class="mb-3 form-check">
                    <input class="form-check-input" type="checkbox"
                    checked="@_carBaseSettings[car.CarId].IgnoreLatestTimeToReachSocDate"
                    id="@($"car{car.CarId}IgnoreLatestTimeToReachSocDate")"
                    @onchange="@(e => UpdateCheckBoxState(car.CarId, "IgnoreLatestTimeToReachSocDate", (bool)((ChangeEventArgs)e).Value))">
                    <label class="form-check-label" for="@($"car{car.CarId}IgnoreLatestTimeToReachSocDate")">
                        Charge every day
                    </label>
                </div>
                <div class="mb-3 form-check">
                    <input class="form-check-input" type="checkbox"
                    checked="@_carBaseSettings[car.CarId].IgnoreLatestTimeToReachSocDateOnWeekend"
                    id="@($"car{car.CarId}IgnoreLatestTimeToReachSocDateOnWeekend")"
                    @onchange="@(e => UpdateCheckBoxState(car.CarId, "IgnoreLatestTimeToReachSocDateOnWeekend", (bool)((ChangeEventArgs)e).Value))">
                    <label class="form-check-label" for="@($"car{car.CarId}IgnoreLatestTimeToReachSocDateOnWeekend")">
                        Charge every weekday
                    </label>
                </div>

                @if (!_carBaseSettings[car.CarId].IgnoreLatestTimeToReachSocDate && !_carBaseSettings[car.CarId].IgnoreLatestTimeToReachSocDateOnWeekend)
                {
                    <InputComponent ValueId="@($"car{car.CarId}LatestTimeToReachStateOfChargeDate")"
                    LabelText="Date"
                    UnitText=""
                    HelpText="">
                        <InputFragment>
                            <input class="form-control" value="@_carBaseSettings[car.CarId].LatestTimeToReachStateOfCharge.Date.ToString("yyyy-MM-dd")" type="date" id="@($"car{car.CarId}LatestTimeToReachStateOfChargeDate")"
                            @onchange="@(e => _carBaseSettings[car.CarId].LatestTimeToReachStateOfCharge = DateTime.Parse(e.Value?.ToString() ?? DateTime.MaxValue.ToString(CultureInfo.CurrentCulture)).Date.AddHours(_carBaseSettings[car.CarId].LatestTimeToReachStateOfCharge.Hour).AddMinutes(_carBaseSettings[car.CarId].LatestTimeToReachStateOfCharge.Minute))">
                        </InputFragment>
                    </InputComponent>
                }

                <InputComponent ValueId="@($"car{car.CarId}LatestTimeToReachStateOfChargeTime")"
                LabelText="Time"
                UnitText=""
                HelpText="">
                    <InputFragment>
                        <input class="form-control" value="@_carBaseSettings[car.CarId].LatestTimeToReachStateOfCharge.ToString("HH:mm")" type="time" id="@($"car{car.CarId}LatestTimeToReachStateOfChargeTime")"
                        @onchange="@(e => _carBaseSettings[car.CarId].LatestTimeToReachStateOfCharge = _carBaseSettings[car.CarId].LatestTimeToReachStateOfCharge.Date.AddHours(TimeSpan.Parse(e.Value?.ToString() ?? "00:00").Hours).AddMinutes(TimeSpan.Parse(e.Value?.ToString() ?? "00:00").Minutes))">
                    </InputFragment>
                </InputComponent>
            }
            @if (car.ChargingNotPlannedDueToNoSpotPricesAvailable)
            {
                <p>Note: Spot prices are published for the next day at 14:00 - 15:00. Charges won't be planned until @_carBaseSettings[car.CarId].LatestTimeToReachStateOfCharge.Date.AddDays(-1).AddHours(15).ToString(CultureInfo.CurrentCulture)</p>
            }

            <div class="d-grid gap-2 mb-3">
                <button class="btn btn-primary" type="button" @onclick="() => UpdateCarSettings(_carBaseSettings[car.CarId])">
                    @if (_savingCarIds.Any(i => i == car.CarId))
                    {
                        <span>
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            Loading...
                        </span>
                    }
                    else
                    {
                        <span>Save</span>
                    }
                </button>
            </div>


            @if (car.ChargeInformation.Count > 0)
            {
                <p>
                    Car will @((car.State == CarStateEnum.Charging && car.IsHome) ? "stop" : "start") charging when following conditions are met:<br />
                    <ul>
                        @foreach (var chargeInfo in car.ChargeInformation)
                        {
                            @*Add one minute so displayed time is the latest time when switched.*@
                            <li>
                                @(string.Format(chargeInfo.InfoText, chargeInfo.TimeToDisplay?.ToLocalTime().DateTime.AddMinutes(1).ToString("g")))
                            </li>
                        }
                    </ul>
                </p>
            }

            @if (car.ChargingSlots is { Count: > 0 })
            {
                <p>
                    <b>Planned Charging Slots:</b>
                    <TableComponent Content="GeneratePlannedChargingSlotsTableContent(car.ChargingSlots)"></TableComponent>
                </p>
            }

            <MudExpansionPanels>
                <MudExpansionPanel Text="More car details:" ExpandedChanged="(state) => OnCollapseChanged(state, car.CarId)">
                    @if (_newCarDetailStates.Any(c => c.Key == car.CarId))
                    {
                        <TableComponent Content="@_newCarDetailStates[car.CarId]"></TableComponent>
                    }
                </MudExpansionPanel>
            </MudExpansionPanels>
        </div>
    }

    <HiddenErrorsComponent></HiddenErrorsComponent>

    <div style="text-align:center">
        Use my referral code for ordering any Tesla product or schedule a Demo Drive: <a href="https://ts.la/patrick63887" target="_blank">https://ts.la/patrick63887</a>
    </div>

    <form action="https://www.paypal.com/donate" method="post" target="_blank">
        <div style="text-align:center">
            <input type="hidden" name="hosted_button_id" value="RJMHGCTVU6TWJ" />
            <input type="image" src="DonateWithPaypal.png" border="0" name="submit" title="PayPal - The safer, easier way to pay online!" alt="Donate with PayPal button" />
            <img alt="" border="0" src="https://www.paypal.com/en_DE/i/scr/pixel.gif" width="1" height="1" />
        </div>
    </form>
}


@code {

    private bool? _isSolarEdgeInstallation;
    private bool? _couldNotRefreshStates;
    private List<DtoCarBaseStates>? _carBaseStates;
    private Dictionary<int, DtoTableContent> _newCarDetailStates = new();
    private Dictionary<int, DtoCarBaseSettings>? _carBaseSettings;
    private Dictionary<string, string>? _toolTipTexts;
    private readonly List<int> _savingCarIds = new();

    private HashSet<int> _collapsedCarDetails = new HashSet<int>();

    private Dictionary<int, bool?> _isFleetApiWorkingForCar = new();
    private readonly HashSet<int> _testingFleetApiCarIds = new();
    private bool _showEnergyData;

    PeriodicTaskHelper? _periodicTaskHelper;


    protected override async Task OnInitializedAsync()
    {
        _toolTipTexts = await HttpClient.GetFromJsonAsync<Dictionary<string, string>>("api/Index/GetToolTipTexts");
        _showEnergyData = await EnergyDataService.ShowEnergyDataOnHome();
        await RefreshCarBaseSettings();
        await RefreshCarBaseStates();
        foreach (var carBaseState in _carBaseStates!)
        {
            _collapsedCarDetails.Add(carBaseState.CarId);
        }

        _periodicTaskHelper = new();
        _periodicTaskHelper.Start(RefreshStates, TimeSpan.FromSeconds(5));
    }

    private async Task RefreshCarBaseStates()
    {
        _carBaseStates = await HttpClient.GetFromJsonAsync<List<DtoCarBaseStates>>("api/Index/GetCarBaseStatesOfEnabledCars").ConfigureAwait(false);
    }

    private async Task RefreshCarBaseSettings()
    {
        _carBaseSettings = await HttpClient
            .GetFromJsonAsync<Dictionary<int, DtoCarBaseSettings>>("api/Index/GetCarBaseSettingsOfEnabledCars")
            .ConfigureAwait(false);
    }



    private async Task UpdateCarSettings(DtoCarBaseSettings dtoCarBaseSettings)
    {
        _savingCarIds.Add(dtoCarBaseSettings.CarId);
        var result = await HttpClient.PostAsJsonAsync("/api/Index/UpdateCarBaseSettings", dtoCarBaseSettings).ConfigureAwait(false);
        if (result.IsSuccessStatusCode)
        {
            Snackbar.Add("Car Configuration updated", Severity.Success);
        }
        else
        {
            Snackbar.Add("Error updating car configuration", Severity.Error);
        }

        await RefreshCarBaseSettings().ConfigureAwait(false);
        await RefreshCarBaseStates().ConfigureAwait(false);
        _savingCarIds.RemoveAll(i => i == dtoCarBaseSettings.CarId);
        StateHasChanged();
    }

    private async Task RefreshAllVisableCarDetails()
    {
        if (_carBaseStates == null)
        {
            return;
        }

        var uncollapsedCarIds = new HashSet<int>();
        foreach (var carId in _carBaseStates.Select(s => s.CarId))
        {
            if (!_collapsedCarDetails.Any(c => c == carId))
            {
                uncollapsedCarIds.Add(carId);
            }
        }

        foreach (var carId in uncollapsedCarIds)
        {
            var dtoCarTopicValues = await HttpClient.GetFromJsonAsync<DtoCarTopicValues>($"api/Index/CarDetails?carId={carId}").ConfigureAwait(false);
            if (dtoCarTopicValues == default)
            {
                continue;
            }

            var dataRows = new List<DtoTableRow>();
            foreach (var dateValue in dtoCarTopicValues.DateValues)
            {
                dataRows.Add(new DtoTableRow()
                    {
                        Elements = new List<string?>()
                    {
                        dateValue.Topic,
                        dateValue.DateTime?.ToString("g"),
                    },
                    });
            }

            foreach (var nonDateValue in dtoCarTopicValues.NonDateValues)
            {
                dataRows.Add(new DtoTableRow()
                    {
                        Elements = new List<string?>()
                    {
                        nonDateValue.Topic,
                        nonDateValue.Value,
                    },
                    });
            }

            var tableContent = new DtoTableContent()
                {
                    TableHeader = new DtoTableRow()
                    {
                        Elements = new List<string?>()
                    {
                        "Topic",
                        "Value",
                    },
                    },
                    TableData = dataRows,
                };
            _newCarDetailStates[carId] = tableContent;
        }
    }

    private async Task OnCollapseChanged(bool changedToExpanded, int carId)
    {
        if (changedToExpanded)
        {
            _collapsedCarDetails.Remove(carId);
            _newCarDetailStates.Remove(carId);
        }
        else
        {
            _collapsedCarDetails.Add(carId);
        }

        await RefreshAllVisableCarDetails().ConfigureAwait(false);
    }

    private DtoTableContent GeneratePlannedChargingSlotsTableContent(List<DtoChargingSlot> chargingSlots)
    {
        var table = new DtoTableContent()
            {
                TableHeader = new DtoTableRow()
                {
                    Elements = new List<string?>()
                {
                    "Start",
                    "End",
                    "Duration",
                },
                },
                TableData = new List<DtoTableRow>(),
            };
        foreach (var chargingSlot in chargingSlots)
        {
            table.TableData.Add(new DtoTableRow()
                {
                    Elements = new List<string?>()
                {
                    chargingSlot.ChargeStart.ToLocalTime().DateTime.ToString("g"),
                    chargingSlot.ChargeEnd.ToLocalTime().DateTime.ToString("g"),
                    chargingSlot.ChargeDuration < TimeSpan.FromDays(1) ? chargingSlot.ChargeDuration.ToString(@"hh\:mm") : string.Empty,
                },
                    IsActive = chargingSlot.IsActive,
                });
        }

        return table;
    }

    private async Task RefreshStates()
    {
        try
        {
            await RefreshCarBaseStates().ConfigureAwait(false);
            await RefreshAllVisableCarDetails().ConfigureAwait(false);
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception)
        {
            _couldNotRefreshStates = true;
        }

        StateHasChanged();
    }

    private async Task OpenRegisterPublicKeyPage(int carId)
    {
        var response = await HttpClient.PostAsync($"api/Index/UpdateCarFleetApiState?carId={carId}&fleetApiState={TeslaCarFleetApiState.OpenedLinkButNotTested}", null).ConfigureAwait(false);
        NavigationManager.NavigateTo("https://tesla.com/_ak/solar4car.com");
    }

    private async Task TestFleetApiAccess(int carId)
    {
        _testingFleetApiCarIds.Add(carId);
        var response = await HttpClient.GetFromJsonAsync<DtoValue<bool>>($"api/FleetApi/TestFleetApiAccess?carId={carId}").ConfigureAwait(false);
        //Try again if non success because first try may result in no success bacause of Fleet API proxy required is only set after first error. So maybe the error is due to fleet api proxy beeing required but not used.
        if (response!.Value == false)
        {
            await Task.Delay(TimeSpan.FromSeconds(1));
            response = await HttpClient.GetFromJsonAsync<DtoValue<bool>>($"api/FleetApi/TestFleetApiAccess?carId={carId}").ConfigureAwait(false);
        }
        if (response != default)
        {
            _isFleetApiWorkingForCar[carId] = response.Value;
        }

        _testingFleetApiCarIds.Remove(carId);
    }

    private string GetBatteryIconBySoc(int? soc)
    {
        if (soc < 10)
        {
            return Icons.Material.Filled.Battery0Bar;
        }
        if (soc < 25)
        {
            return Icons.Material.Filled.Battery1Bar;
        }
        if (soc < 40)
        {
            return Icons.Material.Filled.Battery2Bar;
        }
        if (soc < 60)
        {
            return Icons.Material.Filled.Battery3Bar;
        }
        if (soc < 75)
        {
            return Icons.Material.Filled.Battery4Bar;
        }
        if (soc < 90)
        {
            return Icons.Material.Filled.Battery5Bar;
        }
        if (soc < 100)
        {
            return Icons.Material.Filled.Battery6Bar;
        }
        return Icons.Material.Filled.BatteryFull;
    }

    private void UpdateCheckBoxState(int carId, string checkboxName, bool isChecked)
    {
        if (checkboxName == "IgnoreLatestTimeToReachSocDate")
        {
            _carBaseSettings[carId].IgnoreLatestTimeToReachSocDate = isChecked;
            if (isChecked)
            {
                _carBaseSettings[carId].IgnoreLatestTimeToReachSocDateOnWeekend = false;
            }
        }
        else if (checkboxName == "IgnoreLatestTimeToReachSocDateOnWeekend")
        {
            _carBaseSettings[carId].IgnoreLatestTimeToReachSocDateOnWeekend = isChecked;
            if (isChecked)
            {
                _carBaseSettings[carId].IgnoreLatestTimeToReachSocDate = false;
            }
        }
    }


    public void Dispose()
    {
        _periodicTaskHelper?.Dispose();
    }

}
