@page "/"
@using System.Globalization
@using System.Timers
@using TeslaSolarCharger.Shared
@using TeslaSolarCharger.Shared.Dtos.ChargingCost
@using TeslaSolarCharger.Shared.Dtos.Settings
@using TeslaSolarCharger.Shared.Enums
@inject HttpClient HttpClient
@inject IToastService ToastService

<PageTitle>Tesla Solar Charger</PageTitle>

@if (_settings == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <IssueValidation></IssueValidation>
    <div class="shadow p-3 mb-5 bg-white rounded">
        @if (_settings.InverterPower != null)
        {
            <div><i class="fa-solid fa-solar-panel" style="width: 25px;"></i>@_settings.InverterPower W</div>
        }
        <div class="@(_settings.Overage > 0 ? "text-success" : "text-danger")">
            <i class="fa-solid fa-bolt" style="width: 25px;"></i>
            @if (_settings.Overage != null)
            {
                @Math.Abs((int)_settings.Overage)
            }
            W</div>
        @if (_settings.HomeBatterySoc != null)
        {
            <div><i class="fa-solid fa-battery-full" style="width: 25px;"></i>@_settings.HomeBatterySoc %</div>
        }
        @if (_settings.HomeBatteryPower != null)
        {
            <div class="@(_settings.HomeBatteryPower < 0 ? "text-danger" : "text-success")"><i class="fa-solid fa-battery-full" style="width: 25px;"></i>
                @if (_settings.HomeBatteryPower != null)
                {
                    @Math.Abs((int)_settings.HomeBatteryPower)
                }
                W</div>
        }
        <div><i class="fa-solid fa-car" style="width: 25px;"></i>@_settings.Cars.Sum(c => c.CarState.ChargingPowerAtHome) W</div>
    </div>
    @foreach (var car in _settings.Cars)
    {
        <div class="shadow p-3 mb-5 bg-white rounded">
            <div><b>@(car.CarState.Name)</b>: @(car.CarState.SoC)% (@(car.CarState.SocLimit)%) @car.CarState.ChargingPowerAtHome W</div>
            @if (car.CarState.Healthy != true)
            {
                <i class="fa-solid fa-circle-exclamation"></i>
            }
            @if (_chargeSummaries != null)
            {
                if (_chargeSummaries.Any(c => c.Key == car.Id))
                {
                    <div><i class="fa-solid fa-solar-panel" style="width: 25px;"></i> @_chargeSummaries[car.Id].ChargedSolarEnergy.ToString("0.00") kWh</div>
                    <div><i class="fa-solid fa-bolt" style="width: 25px;"></i> @_chargeSummaries[car.Id].ChargedGridEnergy.ToString("0.00") kWh</div>
                    <div><i class="fa-solid fa-coins" style="width: 25px;"></i> @_chargeSummaries[car.Id].ChargeCost.ToString("0.00")</div>
                }
                else
                {
                    <div>Chargeprices will show up nine minutes after the first charge with at least version 2.6.0</div>
                }

            }
            <label class="col-5 col-sm-4 col-md-3 col-lg-2">@car.CarConfiguration.ChargeMode.ToFriendlyString()</label> <button class="btn btn-primary col-6 col-sm-6 col-md-3 col-lg-2" @onclick="() => ChangeChargeMode(car.Id)">@_chargemodeChangeButtonTexts[car.Id]</button>
            @if (car.CarConfiguration.ChargeMode == ChargeMode.PvAndMinSoc || car.CarConfiguration.ChargeMode == ChargeMode.PvOnly)
            {
                <p>
                    <label class="col-5 col-sm-4 col-md-3 col-lg-2" for="minSoc">Min SOC (%):</label>
                    <input class="col-6 col-sm-6 col-md-3 col-lg-2" value="@car.CarConfiguration.MinimumSoC" type="number" id="minSoc" name="minSoc" min="0" max="100"
                           @onchange="@(e => car.CarConfiguration.MinimumSoC = Int32.Parse(e.Value?.ToString() ?? "0"))">
                </p>
            }
            @if (car.CarConfiguration.ChargeMode == ChargeMode.PvOnly)
            {
                <p>
                    <label class="col-5 col-sm-4 col-md-3 col-lg-2" for="date">Date:</label>
                    <input class="col-6 col-sm-6 col-md-3 col-lg-2" value="@car.CarConfiguration.LatestTimeToReachSoC.Date.ToString("yyyy-MM-dd")" type="date" id="date" name="date"
                           @onchange="@(e => car.CarConfiguration.LatestTimeToReachSoC = DateTime.Parse(e.Value?.ToString() ?? DateTime.MaxValue.ToString(CultureInfo.CurrentCulture)).Date.AddHours(car.CarConfiguration.LatestTimeToReachSoC.Hour).AddMinutes(car.CarConfiguration.LatestTimeToReachSoC.Minute))">
                </p>
                <p>
                    <label class="col-5 col-sm-4 col-md-3 col-lg-2" for="time">Time:</label>
                    <input class="col-6 col-sm-6 col-md-3 col-lg-2" value="@car.CarConfiguration.LatestTimeToReachSoC.ToString("HH:mm")" type="time" id="time" name="time"
                           @onchange="@(e => car.CarConfiguration.LatestTimeToReachSoC = car.CarConfiguration.LatestTimeToReachSoC.Date.AddHours(TimeSpan.Parse(e.Value?.ToString() ?? "00:00").Hours).AddMinutes(TimeSpan.Parse(e.Value?.ToString() ?? "00:00").Minutes))">
                </p>
            }
            @if (car.CarConfiguration.ChargeMode == ChargeMode.PvAndMinSoc || car.CarConfiguration.ChargeMode == ChargeMode.PvOnly)
            {
                <p><button class="btn btn-success col-11 col-sm-10 col-md-6 col-lg-4" @onclick="() => UpdateCarConfiguration(car.Id, car.CarConfiguration)">@_saveButtonTexts[car.Id]</button></p>
            }
        </div>
    }

    <h2>Details: </h2>

    @foreach (var car in _settings.Cars)
    {
        <p>
            <table>
                <tr>
                    <th>
                        Topic
                    </th>
                    <th>
                        Value
                    </th>
                </tr>
                <tr>
                    <td>
                        Id
                    </td>
                    <td>
                        @car.Id
                    </td>
                </tr>
                <tr>
                    <td>
                        Name
                    </td>
                    <td>
                        @car.CarState.Name
                    </td>
                </tr>
                <tr>
                    <td>
                        Actual Current
                    </td>
                    <td>
                        @car.CarState.ChargerActualCurrent
                    </td>
                </tr>
                <tr>
                    <td>
                        Requested Current
                    </td>
                    <td>
                        @car.CarState.ChargerRequestedCurrent
                    </td>
                </tr>
                <tr>
                    <td>
                        Pilot Current
                    </td>
                    <td>
                        @car.CarState.ChargerPilotCurrent
                    </td>
                </tr>
                <tr>
                    <td>
                        StateString
                    </td>
                    <td>
                        @car.CarState.StateString
                    </td>
                </tr>
                <tr>
                    <td>
                        AutoFullspeedCharging
                    </td>
                    <td>
                        @car.CarState.AutoFullSpeedCharge
                    </td>
                </tr>
                <tr>
                    <td>
                        LatestTimeToReachSoC
                    </td>
                    <td>
                        @(car.CarConfiguration.LatestTimeToReachSoC.ToString("HH:mm dd.MM"))
                    </td>
                </tr>
                <tr>
                    <td>
                        Full charge in
                    </td>
                    <td>
                        @if (car.CarState.TimeUntilFullCharge > TimeSpan.Zero)
                        {
                            @((car.CarState.TimeUntilFullCharge?.Days > 0 ? $"{car.CarState.TimeUntilFullCharge?.Days}. " : "") + $"{car.CarState.TimeUntilFullCharge?.Hours:D2}:{car.CarState.TimeUntilFullCharge?.Minutes:D2}")
                        }
                    </td>
                </tr>
                <tr>
                    <td>
                        Full charge at
                    </td>
                    <td>
                        @if(car.CarState.TimeUntilFullCharge > TimeSpan.Zero)
                        {
                            @((DateTime.Now + car.CarState.TimeUntilFullCharge)?.ToString("HH:mm dd.MM"))
                        }
                    </td>
                </tr>
                <tr>
                    <td>
                        SoC
                    </td>
                    <td>
                        @car.CarState.SoC
                    </td>
                </tr>
                <tr>
                    <td>
                        SoC Limit
                    </td>
                    <td>
                        @car.CarState.SocLimit
                    </td>
                </tr>
                <tr>
                    <td>
                        Charge mode
                    </td>
                    <td>
                        @car.CarConfiguration.ChargeMode.ToString()
                    </td>
                </tr>
                <tr>
                    <td>
                        Geofence
                    </td>
                    <td>
                        @car.CarState.Geofence
                    </td>
                </tr>
                <tr>
                    <td>
                        Should start charging since
                    </td>
                    <td>
                        @car.CarState.ShouldStartChargingSince
                    </td>
                </tr>
                <tr>
                    <td>
                        Should stop charging since
                    </td>
                    <td>
                        @car.CarState.ShouldStopChargingSince
                    </td>
                </tr>
                <tr>
                    <td>
                        Car Healthy
                    </td>
                    <td>
                        @car.CarState.Healthy
                    </td>
                </tr>
            </table>
        </p>

    }
    @if (string.IsNullOrWhiteSpace(_version))
    {
        <p><em>Could not load version</em></p>
    }
    else
    {
        <p><em>Version: <a href="https://github.com/pkuehnel/TeslaSolarCharger/releases/tag/v@_version" target="_blank">@_version</a></em></p>
    }
    <form action="https://www.paypal.com/donate" method="post" target="_blank">
        <div style="text-align:center">
            <input type="hidden" name="hosted_button_id" value="RJMHGCTVU6TWJ"/>
            <input type="image" src="DonateWithPaypal.png" border="0" name="submit" title="PayPal - The safer, easier way to pay online!" alt="Donate with PayPal button"/>
            <img alt="" border="0" src="https://www.paypal.com/en_DE/i/scr/pixel.gif" width="1" height="1"/>
        </div>
    </form>
}



@code {
    private Settings? _settings;
    private Dictionary<int, DtoChargeSummary>? _chargeSummaries;
    private Dictionary<int, string> _chargemodeChangeButtonTexts = new Dictionary<int, string>();
    private Dictionary<int, string> _saveButtonTexts = new Dictionary<int, string>();
    private string _version = "";

    private Timer? _timer;

    private readonly string _chargeModeChangeButtonDefaultText = "Change";
    private readonly string _saveButtonDefaultText = "Save";
    private readonly string _buttonLoadingText = "...";

    protected override async Task OnInitializedAsync()
    {
        _settings = await HttpClient.GetFromJsonAsync<Settings>("api/Config/GetSettings").ConfigureAwait(false);
        _version = await HttpClient.GetStringAsync("api/Hello/ProductVersion").ConfigureAwait(false);
        foreach (var car in _settings!.Cars)
        {
            _chargemodeChangeButtonTexts.Add(car.Id, _chargeModeChangeButtonDefaultText);
            _saveButtonTexts.Add(car.Id, _saveButtonDefaultText);
        }

        _chargeSummaries = await HttpClient.GetFromJsonAsync<Dictionary<int, DtoChargeSummary>>("api/ChargingCost/GetChargeSummaries").ConfigureAwait(false);

        _timer = new Timer();
        _timer.Interval = 5000;
        _timer.Elapsed += RefreshStates;
        _timer.Start();
    }

    private async Task ChangeChargeMode(int carId)
    {
        _chargemodeChangeButtonTexts[carId] = _buttonLoadingText;
        var updateBackend = HttpClient.PostAsync($"api/Config/ChangeChargeMode?carId={carId}", new StringContent(string.Empty));
        var car = _settings?.Cars.First(c => c.Id == carId);
        var result = await updateBackend.ConfigureAwait(false);
        if (result.IsSuccessStatusCode)
        {
            ToastService.ShowSuccess("ChargeMode Changed");
            car!.CarConfiguration.ChargeMode = car.CarConfiguration.ChargeMode.Next();
        }
        else
        {
            ToastService.ShowError("Error changing ChargeMode");
        }
        _chargemodeChangeButtonTexts[carId] = _chargeModeChangeButtonDefaultText;
    }

    private async Task UpdateCarConfiguration(int carId, CarConfiguration carConfiguration)
    {
        _saveButtonTexts[carId] = _buttonLoadingText;
        var result = await HttpClient.PutAsJsonAsync($"api/Config/UpdateCarConfiguration?carId={carId}", carConfiguration).ConfigureAwait(false);
        if (result.IsSuccessStatusCode)
        {
            ToastService.ShowSuccess("Car Configuration updated");
        }
        else
        {
            ToastService.ShowError("Error updating car configuration");
        }
        _saveButtonTexts[carId] = _saveButtonDefaultText;
    }

    private async void RefreshStates(object? sender, ElapsedEventArgs elapsedEventArgs)
    {
        var tmpSettings = await HttpClient.GetFromJsonAsync<Settings>("api/Config/GetSettings").ConfigureAwait(false);
        _settings!.InverterPower = tmpSettings!.InverterPower;
        _settings.Overage = tmpSettings.Overage;
        _settings!.HomeBatterySoc = tmpSettings.HomeBatterySoc;
        _settings.HomeBatteryPower = tmpSettings.HomeBatteryPower;
        foreach (var tmpCar in tmpSettings.Cars)
        {
            var car = _settings.Cars.First(c => c.Id == tmpCar.Id);
            car.CarState = tmpCar.CarState;
            car.CarState.SocLimit = tmpCar.CarState.SocLimit;
        }
        this.StateHasChanged();
    }
}