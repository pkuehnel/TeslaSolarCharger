@page "/"
@using System.Globalization
@using System.Timers
@using TeslaSolarCharger.Shared
@using TeslaSolarCharger.Shared.Dtos
@using TeslaSolarCharger.Shared.Dtos.IndexRazor.CarValues
@using TeslaSolarCharger.Shared.Dtos.IndexRazor.PvValues
@using TeslaSolarCharger.Shared.Enums
@using TeslaSolarCharger.Shared.Resources
@using TeslaSolarCharger.Shared.Dtos.Settings
@using TeslaSolarCharger.Shared.Dtos.Table
@using System.Diagnostics
@using TeslaSolarCharger.Shared.Resources.Contracts
@inject HttpClient HttpClient
@inject ISnackbar Snackbar
@inject ToolTipTextKeys ToolTipTextKeys
@inject NavigationManager NavigationManager
@inject IConstants Constants

<PageTitle>Tesla Solar Charger</PageTitle>

@if (_serverTime != default)
{
    if (_serverTime.Value is { Day: 24, Month: 12, Hour: > 15 } or { Day: 25, Month: 12 })
    {
        <div class="alert alert-info" role="alert">
            Merry Christmas! &#127876; &#127877; &#127873;
        </div>
    }

    if (_serverTime.Value is { Day: 31, Month: 12, Hour: > 15 } or { Day: 1, Month: 1 })
    {
        <div class="alert alert-info" role="alert">
            Happy New Year! &#127878; &#127881; &#127882;
        </div>
    }
}

<BackendInformationDisplayComponent></BackendInformationDisplayComponent>
<BackendIssueValidation></BackendIssueValidation>

@if (_pvValues != null)
{
    <div class="shadow p-3 mb-5 bg-white rounded">
        @if (_couldNotRefreshStates == true)
        {
            <small class="form-text text-muted">States could not be refreshed. Are you currently offline?</small>
        }
        @if (_isSolarEdgeInstallation == true)
        {
            <small class="form-text text-muted">As you are using SolarEdge which is rate limited, these values might be delayed or grid power and batterypower might be displayed as zero or your configured Home Battery charging power (W). This is nothing to worry about, it is just a way to handle the rate limitation.</small>
        }
        @{
            var homePower = CalculateHomePower();
        }
        @if (homePower != null)
        {
            <div class="container power-container pt-4 pb-4 ps-lg-5 pe-lg-5">
                <div class="row">
                    <div class="offset-4 col-4 ps-0 pe-0">
                        @if (_pvValues.InverterPower != null)
                        {
                            <div id="solar-power">
                                <MudIcon Class="mr-1" Icon="@Icons.Material.Filled.SolarPower"></MudIcon>
                                <br />
                                <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.InverterPower]">
                                    @_pvValues.InverterPower W
                                </TooltipComponent>
                            </div>
                        }
                    </div>
                    <div class="col-4">
                    </div>
                    <div class="col-4 ps-0 pe-0">
                        @if (_pvValues.GridPower != null)
                        {
                            <div id="grid-power">
                                <div class="@(_pvValues.GridPower > 0 ? "text-success" : (_pvValues.GridPower < 0 ? "text-danger" : ""))">
                                    <MudIcon Class="mr-1" Icon="@Constants.GridPoleIcon"></MudIcon>
                                    <br />
                                    <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.GridPower]">
                                        @Math.Abs((int)_pvValues.GridPower) W
                                    </TooltipComponent>
                                </div>
                            </div>
                        }
                    </div>
                    <div class="col-4 ps-0 pe-0">
                        <div class="row">
                            @* <div class="col-12">
                    @if (IsVisibleBatteryToGridLine())
                    {
                    <div id="battery-to-grid-horizontal-line">
                    @for (int i = 0; i <= animatedSliderCount - 2; i++)
                    {
                    var delay = $"delay{i}";
                    <div class="leftArrowSliding @delay">
                    <div class="left-arrow"></div>
                    </div>
                    }
                    </div>
                    }
                    </div> *@
                            <div class="col-5">
                                <div class="flow-div">
                                    @if (IsVisibleSolarToGridLine())
                                    {
                                        <div id="solar-to-grid-vertical-line">
                                            @for (int i = 0; i <= animatedSliderCount - 1; i++)
                                            {
                                                var delay = $"delay{i}";
                                                <div class="childDownArrowSliding @delay">
                                                    <div class="solar-to-grid-vertical-line-down-arrow"></div>
                                                </div>
                                            }
                                        </div>
                                        <div id="solar-to-grid-horizontal-line">
                                            @for (int i = 0; i <= animatedSliderCount - 2; i++)
                                            {
                                                var delay = $"delay{i}";
                                                <div class="leftArrowSliding @delay">
                                                    <div class="left-arrow"></div>
                                                </div>
                                            }
                                        </div>
                                        <div class="clear"></div>
                                    }
                                </div>
                                <div class="flow-div">
                                    @if (IsVisibleGridToHomeLine())
                                    {
                                        <div id="grid-to-home-horizontal-line"></div>
                                        <div id="grid-to-home-vertical-line">
                                            @for (int i = 0; i <= animatedSliderCount - 1; i++)
                                            {
                                                var delay = $"delay{i}";
                                                <div class="childDownArrowSliding @delay">
                                                    <div class="grid-to-home-vertical-line-down-arrow"></div>
                                                </div>
                                            }
                                        </div>
                                    }
                                </div>
                            </div>
                            <div class="col-2 ps-0 pe-0">
                                <div id="solar-to-home-line" class="@(IsVisibleSolarToHomeLine() is true ? "show" : "hide")">
                                    @for (int i = 0; i <= animatedSliderCount; i++)
                                    {
                                        var delay = $"delay{i}";
                                        <div class="downArrowSliding @delay">
                                            <div class="down-arrow"></div>
                                        </div>
                                    }
                                </div>
                            </div>
                            <div class="col-5">
                                <div class="flow-div">
                                    @if (IsVisibleSolarToBatteryLine())
                                    {
                                        <div id="solar-to-battery-vertical-line">
                                            @for (int i = 0; i <= animatedSliderCount - 1; i++)
                                            {
                                                var delay = $"delay{i}";
                                                <div class="childDownArrowSliding @delay">
                                                    <div class="solar-to-battery-vertical-line-down-arrow"></div>
                                                </div>
                                            }
                                        </div>
                                        <div id="solar-to-battery-horizontal-line">
                                            @for (int i = 0; i <= animatedSliderCount - 2; i++)
                                            {
                                                var delay = $"delay{i}";
                                                <div class="rightArrowSliding @delay">
                                                    <div class="right-arrow"></div>
                                                </div>
                                            }
                                        </div>
                                    }
                                </div>
                                <div class="flow-div">
                                    @if (IsVisibleBatteryToHomeLine())
                                    {
                                        <div id="battery-to-home-horizontal-line"></div>
                                        <div id="battery-to-home-vertical-line">
                                            @for (int i = 0; i <= animatedSliderCount - 1; i++)
                                            {
                                                var delay = $"delay{i}";
                                                <div class="childDownArrowSliding @delay">
                                                    <div class="battery-to-home-vertical-line-down-arrow"></div>
                                                </div>
                                            }
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-4 ps-0 pe-0">
                        @if (_pvValues.HomeBatteryPower != null)
                        {
                            <div id="battery-power">
                                <div class="@(_pvValues.HomeBatteryPower > 0 ? "text-success" : (_pvValues.HomeBatteryPower < 0 ? "text-danger" : ""))">
                                    <div class="row">
                                        <div class="col-3 m-auto pe-0 text-right">
                                            <MudIcon Class="mr-1" Icon="@(Icons.Material.Filled.BatteryChargingFull)"></MudIcon>
                                        </div>
                                        <div class="col-9 text-left">
                                            @if (_pvValues.HomeBatterySoc != null)
                                            {
                                                <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.HomeBatterySoC]">
                                                    @_pvValues.HomeBatterySoc %
                                                </TooltipComponent>
                                                <br />
                                            }
                                            <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.HomeBatteryPower]">
                                                @if (_pvValues.HomeBatteryPower != null)
                                                {
                                                    @Math.Abs((int)_pvValues.HomeBatteryPower)
                                                }
                                                W
                                            </TooltipComponent>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                    <div class="col-4 offset-4 ps-0 pe-0">
                        @if (homePower != null)
                        {
                            <div id="home-power">
                                <span class="material-symbols-outlined me-1">
                                    home
                                </span>
                                <br />
                                <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.PowerBuffer]">
                                    @(homePower) W
                                </TooltipComponent>
                            </div>
                        }
                        @if (IsVisibleHomeToEvStationLine())
                        {
                            <div id="home-to-ev-station-vertical-line">
                                @for (int i = 0; i <= animatedSliderCount - 1; i++)
                                {
                                    var delay = $"delay{i}";
                                    <div class="childDownArrowSliding @delay">
                                        <div class="home-to-ev-station-line-down-arrow"></div>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                    <div class="col-4">
                    </div>
                    <div class="col-4 offset-4 ps-0 pe-0 @(IsVisibleHomeToEvStationLine() is false ? "mt-3" : "")">
                        <div id="ev-station-power">
                            <span class="material-symbols-outlined me-1">
                                ev_station
                            </span>
                            <br />
                            <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.CombinedChargingPower]">
                                @_pvValues.CarCombinedChargingPowerAtHome W
                            </TooltipComponent>
                        </div>
                    </div>
                    <div class="col-4">
                    </div>
                </div>
            </div>
        }
        else
        {
            @if (_pvValues.InverterPower != null)
            {
                <div class="d-flex align-items-center mb-1">
                    <MudIcon Class="mr-1" Icon="@Icons.Material.Filled.SolarPower"></MudIcon>
                    <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.InverterPower]">
                        @_pvValues.InverterPower W
                    </TooltipComponent>
                </div>
            }
            @if (_pvValues.GridPower != null)
            {
                <div class="@(_pvValues.GridPower > 0 ? "text-success" : (_pvValues.GridPower < 0 ? "text-danger" : ""))">
                    <div class="d-flex align-items-center mb-1">
                        <MudIcon Class="mr-1" Icon="@Constants.GridPoleIcon"></MudIcon>
                        <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.GridPower]">
                            @Math.Abs((int)_pvValues.GridPower) W
                        </TooltipComponent>
                    </div>
                </div>
            }

            @if (_pvValues.HomeBatterySoc != null)
            {
                <div class="d-flex align-items-center mb-1">
                    <MudIcon Class="mr-1" Icon="@(GetBatteryIconBySoc(_pvValues.HomeBatterySoc))"></MudIcon>
                    <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.HomeBatterySoC]">
                        @_pvValues.HomeBatterySoc %
                    </TooltipComponent>
                </div>
            }
            @if (_pvValues.HomeBatteryPower != null)
            {
                <div class="@(_pvValues.HomeBatteryPower > 0 ? "text-success" : (_pvValues.HomeBatteryPower < 0 ? "text-danger" : ""))">
                    <div class="d-flex align-items-center mb-1">
                        <MudIcon Class="mr-1" Icon="@(Icons.Material.Filled.BatteryChargingFull)"></MudIcon>
                        <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.HomeBatteryPower]">
                            @if (_pvValues.HomeBatteryPower != null)
                            {
                                @Math.Abs((int)_pvValues.HomeBatteryPower)
                            }
                            W
                        </TooltipComponent>
                    </div>
                </div>
            }
            @if (_pvValues.PowerBuffer != null)
            {
                <div class="d-flex align-items-center mb-1">
                    <span class="material-symbols-outlined me-1">
                        instant_mix
                    </span>
                    <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.PowerBuffer]">
                        @_pvValues.PowerBuffer W
                    </TooltipComponent>
                </div>
            }
            <div class="d-flex align-items-center mb-1">
                <span class="material-symbols-outlined me-1">
                    ev_station
                </span>
                <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.CombinedChargingPower]">
                    @_pvValues.CarCombinedChargingPowerAtHome W
                </TooltipComponent>
            </div>
        }
    </div>
}

@if (_carBaseStates == null || _carBaseSettings == null)
{
    <div class="spinner"></div>
}
else
{
    @if (_carBaseStates.Count < 1)
    {
        <p>
            You need to enable TeslaSolarCharger for at least one car in the <a href="/CarSettings">car settings page</a>.
        </p>
    }

    @foreach (var car in _carBaseStates)
    {
        <div class="shadow p-3 mb-5 bg-white rounded">
            <div class="mb-3">
                <div>
                    <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.CarName]">
                        <b>@(car.Name)</b>
                    </TooltipComponent>
                    <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.CarChargingPowerHome]">@car.HomeChargePower W</TooltipComponent>
                </div>

                @if (DateTime.UtcNow < car.RateLimitedUntil)
                {
                    <div class="alert alert-danger" role="alert">
                        <div>Car currently rate limited.</div>
                        <hr />
                        <p>
                            Your car is rate limited by Tesla and TSC won't be able to set the charging power until @(car.RateLimitedUntil.Value.ToLocalTime().ToString("g")). For now, the only solution for this is to set up a BLE device (see <a href="https://github.com/pkuehnel/TeslaSolarCharger?tab=readme-ov-file#install-and-setup-ble-api" target="_blank">here</a>). Currently there is no option from Tesla's side to pay for more requests per day. So even after the rate limit is over, TSC only has 50 requests for the next day. After the 50 requests within 24 hours, the rate limit is present again for the next 24 hours. Despite setting up the BLE API as a workaround, you can go to basic configuration, scroll down to advanced settings and set the Car power adjustment interval to 1800 seconds. This leads to 50 calls per day max but also means TSC can only adjust the charging power every 30 minutes.<br />
                        </p>

                    </div>
                }

                @if (_usingFleetApi == true && car.VehicleCommandProtocolRequired)
                {
                    @if (_testingFleetApiCarIds.Any(i => i == car.CarId))
                    {
                        <div>
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span class="sr-only">Testing Fleet API access might take about 30 seconds and the chargeport might open...</span>
                        </div>
                    }

                    <div class="p-2 flex-grow-1">
                        @if (_isFleetApiWorkingForCar.Any(d => d.Key == car.CarId))
                        {
                            @if (_isFleetApiWorkingForCar[car.CarId] == true)
                            {
                                <div class="alert alert-success" role="alert">
                                    API access is working
                                </div>
                            }
                            else
                            {
                                <div class="alert alert-danger" role="alert">
                                    <div>API access is not working.</div>
                                    <hr />
                                    <p>
                                        Note: For the test the car needs to be awake. If the car was not awake, wake it up and <button class="btn btn-link" type="button" @onclick="_ => TestFleetApiAccess(car.CarId)">test again</button>. <br />
                                        If it still does not work, go to your car and under Controls -> Locks you can check if a key named "www.teslasolarcharger.de" is present. If not try adding the key again by clicking <button class="btn btn-link" type="button" @onclick="_ => OpenRegisterPublicKeyPage(car.CarId)">here</button>.
                                    </p>

                                </div>
                            }
                        }
                        else
                        {
                            @if (car.FleetApiState is TeslaCarFleetApiState.NotConfigured or TeslaCarFleetApiState.NotWorking)
                            {
                                <div class="alert alert-danger" role="alert">
                                    TSC is not registerd in car, click <button class="btn btn-link" type="button" @onclick="_ => OpenRegisterPublicKeyPage(car.CarId)">here</button> to register the car. <br />
                                    Note: It is not possible to select the correct car. In order to register the correct car you need to select the car in the Tesla App before clicking on the button.
                                </div>
                            }

                            @if (car.FleetApiState == TeslaCarFleetApiState.OpenedLinkButNotTested)
                            {
                                <div class="alert alert-danger" role="alert">
                                    You registerd the car but did not test the connection yet. Click <button class="btn btn-link" type="button" @onclick="_ => TestFleetApiAccess(car.CarId)">here</button> to test the connection.
                                </div>
                            }
                        }
                    </div>
                }

                <div>
                    @if (car.IsHealthy == false)
                    {
                        <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.CarNotHealthy]">
                            <span class="material-symbols-outlined me-1">
                                error
                            </span>
                        </TooltipComponent>
                    }
                    @if (car.IsHome)
                    {
                        <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.CarAtHome]">
                            <span class="material-symbols-outlined me-1">
                                home
                            </span>
                        </TooltipComponent>
                    }
                    @if (car.PluggedIn)
                    {
                        <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.CarPluggedIn]">
                            <span class="material-symbols-outlined me-1">
                                power
                            </span>
                        </TooltipComponent>
                    }

                </div>
                <div class="d-flex align-items-center mb-1">
                    <MudIcon Class="mr-1" Icon="@(GetBatteryIconBySoc(car.StateOfCharge))"></MudIcon>
                    <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.CarSoc]">@(car.StateOfCharge) %</TooltipComponent> <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.CarSocLimit]">(@(car.StateOfChargeLimit) %)</TooltipComponent>
                </div>
                <div>
                </div>

                <div class="d-flex align-items-center mb-1">
                    <MudIcon Class="mr-1" Icon="@Icons.Material.Filled.SolarPower"></MudIcon>
                    <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.CarChargedSolarEnergy]">
                        @car.DtoChargeSummary.ChargedSolarEnergy.ToString("0.00") kWh (@car.DtoChargeSummary.SolarPortionPercent.ToString("0.0") %)
                    </TooltipComponent>
                </div>
                @if (car.DtoChargeSummary.ChargedHomeBatteryEnergy > 0)
                {
                    <div class="d-flex align-items-center mb-1">
                        <MudIcon Class="mr-1" Icon="@Icons.Material.Filled.BatteryFull"></MudIcon>
                        <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.CarChargedHomeBatteryEnergy]">
                            @car.DtoChargeSummary.ChargedHomeBatteryEnergy.ToString("0.00") kWh (@car.DtoChargeSummary.HomeBatteryPortionPercent.ToString("0.0") %)
                        </TooltipComponent>
                    </div>
                }

                <div class="d-flex align-items-center mb-1">
                    <MudIcon Class="mr-1" Icon="@Constants.GridPoleIcon"></MudIcon>
                    <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.CarChargedGridEnergy]">
                        @car.DtoChargeSummary.ChargedGridEnergy.ToString("0.00") kWh (@((100 - car.DtoChargeSummary.SolarPortionPercent - car.DtoChargeSummary.HomeBatteryPortionPercent).ToString("0.0")) %)
                    </TooltipComponent>
                </div>
                <div class="d-flex align-items-center mb-1">
                    <span class="material-symbols-outlined">
                        attach_money
                    </span>
                    <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.CarChargeCost]">
                        <a href="HandledCharges/@car.CarId">@car.DtoChargeSummary.ChargeCost.ToString("0.00") (@(car.DtoChargeSummary.AverageEnergyPrice.ToString("0.000")) per kWh)</a>
                    </TooltipComponent>
                </div>
            </div>
            <div>
                <InputComponent ValueId="@($"car{car.CarId}ChargeMode")"
                                LabelText="ChargeMode"
                                UnitText=""
                                HelpText="">
                    <InputFragment>
                        <InputSelect class="form-select" @bind-Value="@_carBaseSettings[car.CarId].ChargeMode" id="@($"car{car.CarId}ChargeMode")">
                            @foreach (var value in Enum.GetValues<ChargeMode>())
                            {
                                <option value="@value">@value.ToFriendlyString()</option>
                            }
                        </InputSelect>
                    </InputFragment>
                </InputComponent>

            </div>

            @if (_carBaseSettings[car.CarId].ChargeMode is ChargeMode.PvAndMinSoc or ChargeMode.PvOnly or ChargeMode.SpotPrice)
            {
                <InputComponent ValueId="@($"car{car.CarId}MinSoc")"
                                LabelText="Min SOC"
                                UnitText="%"
                                HelpText="">
                    <InputFragment>
                        <InputNumber id="maxCombinedCurrent" @bind-Value="_carBaseSettings[car.CarId].MinimumStateOfCharge" class="form-control" min="0" max="100" placeholder=" " />
                    </InputFragment>
                </InputComponent>
            }
            @if (_carBaseSettings[car.CarId].ChargeMode is ChargeMode.PvOnly or ChargeMode.SpotPrice)
            {
                <div class="mb-3 form-check">
                    <input class="form-check-input" type="checkbox"
                           checked="@_carBaseSettings[car.CarId].IgnoreLatestTimeToReachSocDate"
                           id="@($"car{car.CarId}IgnoreLatestTimeToReachSocDate")"
                           @onchange="@(e => UpdateCheckBoxState(car.CarId, "IgnoreLatestTimeToReachSocDate", (bool)((ChangeEventArgs)e).Value))">
                    <label class="form-check-label" for="@($"car{car.CarId}IgnoreLatestTimeToReachSocDate")">
                        Charge every day
                    </label>
                </div>
                <div class="mb-3 form-check">
                    <input class="form-check-input" type="checkbox"
                           checked="@_carBaseSettings[car.CarId].IgnoreLatestTimeToReachSocDateOnWeekend"
                           id="@($"car{car.CarId}IgnoreLatestTimeToReachSocDateOnWeekend")"
                           @onchange="@(e => UpdateCheckBoxState(car.CarId, "IgnoreLatestTimeToReachSocDateOnWeekend", (bool)((ChangeEventArgs)e).Value))">
                    <label class="form-check-label" for="@($"car{car.CarId}IgnoreLatestTimeToReachSocDateOnWeekend")">
                        Charge every weekday
                    </label>
                </div>

                @if (!_carBaseSettings[car.CarId].IgnoreLatestTimeToReachSocDate && !_carBaseSettings[car.CarId].IgnoreLatestTimeToReachSocDateOnWeekend)
                {
                    <InputComponent ValueId="@($"car{car.CarId}LatestTimeToReachStateOfChargeDate")"
                                    LabelText="Date"
                                    UnitText=""
                                    HelpText="">
                        <InputFragment>
                            <input class="form-control" value="@_carBaseSettings[car.CarId].LatestTimeToReachStateOfCharge.Date.ToString("yyyy-MM-dd")" type="date" id="@($"car{car.CarId}LatestTimeToReachStateOfChargeDate")"
                                   @onchange="@(e => _carBaseSettings[car.CarId].LatestTimeToReachStateOfCharge = DateTime.Parse(e.Value?.ToString() ?? DateTime.MaxValue.ToString(CultureInfo.CurrentCulture)).Date.AddHours(_carBaseSettings[car.CarId].LatestTimeToReachStateOfCharge.Hour).AddMinutes(_carBaseSettings[car.CarId].LatestTimeToReachStateOfCharge.Minute))">
                        </InputFragment>
                    </InputComponent>
                }

                <InputComponent ValueId="@($"car{car.CarId}LatestTimeToReachStateOfChargeTime")"
                                LabelText="Time"
                                UnitText=""
                                HelpText="">
                    <InputFragment>
                        <input class="form-control" value="@_carBaseSettings[car.CarId].LatestTimeToReachStateOfCharge.ToString("HH:mm")" type="time" id="@($"car{car.CarId}LatestTimeToReachStateOfChargeTime")"
                               @onchange="@(e => _carBaseSettings[car.CarId].LatestTimeToReachStateOfCharge = _carBaseSettings[car.CarId].LatestTimeToReachStateOfCharge.Date.AddHours(TimeSpan.Parse(e.Value?.ToString() ?? "00:00").Hours).AddMinutes(TimeSpan.Parse(e.Value?.ToString() ?? "00:00").Minutes))">
                    </InputFragment>
                </InputComponent>
            }
            @if (car.ChargingNotPlannedDueToNoSpotPricesAvailable)
            {
                <p>Note: Spot prices are published for the next day at 14:00 - 15:00. Charges won't be planned until @_carBaseSettings[car.CarId].LatestTimeToReachStateOfCharge.Date.AddDays(-1).AddHours(15).ToString(CultureInfo.CurrentCulture)</p>
            }

            <div class="d-grid gap-2 mb-3">
                <button class="btn btn-primary" type="button" @onclick="() => UpdateCarSettings(_carBaseSettings[car.CarId])">
                    @if (_savingCarIds.Any(i => i == car.CarId))
                    {
                        <span>
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            Loading...
                        </span>
                    }
                    else
                    {
                        <span>Save</span>
                    }
                </button>
            </div>


            @if (car.ChargeInformation.Count > 0)
            {
                <p>
                    Car will @((car.State == CarStateEnum.Charging && car.IsHome) ? "stop" : "start") charging when following conditions are met:<br />
                    <ul>
                        @foreach (var chargeInfo in car.ChargeInformation)
                        {
                            @*Add one minute so displayed time is the latest time when switched.*@
                            <li>
                                @(string.Format(chargeInfo.InfoText, chargeInfo.TimeToDisplay?.ToLocalTime().DateTime.AddMinutes(1).ToString("g")))
                            </li>
                        }
                    </ul>
                </p>
            }

            @if (car.ChargingSlots is { Count: > 0 })
            {
                <p>
                    <b>Planned Charging Slots:</b>
                    <TableComponent Content="GeneratePlannedChargingSlotsTableContent(car.ChargingSlots)"></TableComponent>
                </p>
            }

            <MudExpansionPanels>
                <MudExpansionPanel Text="More car details:" IsExpandedChanged="(state) => OnCollapseChanged(state, car.CarId)">
                    @if (_newCarDetailStates.Any(c => c.Key == car.CarId))
                    {
                        <TableComponent Content="@_newCarDetailStates[car.CarId]"></TableComponent>
                    }
                </MudExpansionPanel>
            </MudExpansionPanels>
        </div>
    }

    <div class="shadow p-3 mb-5 bg-white rounded auto-scroll">
        @if (_serverTimeZoneDisplayName != default)
        {
            <div>
                <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.ServerTimeZone]">
                    Server Timezone: @_serverTimeZoneDisplayName
                </TooltipComponent>
            </div>
        }
        @if (_serverTime != default)
        {
            <div>
                <TooltipComponent Text="@_toolTipTexts?[ToolTipTextKeys.ServerTime]">
                    Current Server Time: @_serverTime?.ToString()
                </TooltipComponent>
            </div>
        }
        @if (string.IsNullOrWhiteSpace(_version))
        {
            <p>
                <em>Could not load version</em>
            </p>
        }
        else
        {
            <p>
                <em>Version: <a href="https://github.com/pkuehnel/TeslaSolarCharger/releases/tag/v@_version" target="_blank">@_version</a></em>
            </p>
        }
        <div>
            <b>Installation ID</b>:
            <TextShortenComponent InputString="@_installationId"
                                  MaxLength="18"
                                  ShouldDisplayTruncatedCharCount="true"
                                  TooltipText="Do not share the complete ID with anyone"
                                  OnCopyClicked="ShowInstallationIdWarning"></TextShortenComponent>
        </div>
        <div>
            <b>Language settings</b>: @CultureInfo.CurrentCulture
        </div>
    </div>

    <div style="text-align:center">
        Use my referral code for ordering any Tesla product or schedule a Demo Drive: <a href="https://ts.la/patrick63887" target="_blank">https://ts.la/patrick63887</a>
    </div>

    <form action="https://www.paypal.com/donate" method="post" target="_blank">
        <div style="text-align:center">
            <input type="hidden" name="hosted_button_id" value="RJMHGCTVU6TWJ" />
            <input type="image" src="DonateWithPaypal.png" border="0" name="submit" title="PayPal - The safer, easier way to pay online!" alt="Donate with PayPal button" />
            <img alt="" border="0" src="https://www.paypal.com/en_DE/i/scr/pixel.gif" width="1" height="1" />
        </div>
    </form>
}


@code {
    private DtoPvValues? _pvValues;
    private bool? _isSolarEdgeInstallation;
    private bool? _couldNotRefreshStates;
    private List<DtoCarBaseStates>? _carBaseStates;
    private Dictionary<int, DtoTableContent> _newCarDetailStates = new();
    private Dictionary<int, DtoCarBaseSettings>? _carBaseSettings;
    private Dictionary<string, string>? _toolTipTexts;
    private readonly List<int> _savingCarIds = new();
    private string _version = "";
    private HashSet<int> _collapsedCarDetails = new HashSet<int>();
    private DateTime? _serverTime;
    private string? _serverTimeZoneDisplayName;
    private string _installationId = "";
    private bool? _usingFleetApi;
    private Dictionary<int, bool?> _isFleetApiWorkingForCar = new();
    private readonly HashSet<int> _testingFleetApiCarIds = new();
    private int animatedSliderCount = 3;

    private Timer? _timer;

    protected override async Task OnInitializedAsync()
    {
        _toolTipTexts = await HttpClient.GetFromJsonAsync<Dictionary<string, string>>("api/Index/GetToolTipTexts").ConfigureAwait(false);
        await RefreshCarBaseSettings().ConfigureAwait(false);
        await RefreshCarBaseStates().ConfigureAwait(false);
        await RefreshPvValues().ConfigureAwait(false);
        await RefreshServerTime().ConfigureAwait(false);
        await RefreshServerTimeZone().ConfigureAwait(false);
        var dtoSolarChargerInstallation = await HttpClient.GetFromJsonAsync<DtoValue<bool>>("api/Hello/IsSolarEdgeInstallation").ConfigureAwait(false);
        _isSolarEdgeInstallation = dtoSolarChargerInstallation?.Value;
        var usingFleetApi = await HttpClient.GetFromJsonAsync<DtoValue<bool>>("api/FleetApi/IsFleetApiEnabled").ConfigureAwait(false);
        _usingFleetApi = usingFleetApi?.Value;
        _version = await HttpClient.GetStringAsync("api/Hello/ProductVersion").ConfigureAwait(false);
        _installationId = await HttpClient.GetStringAsync("api/Hello/GetInstallationId").ConfigureAwait(false);
        foreach (var carBaseState in _carBaseStates!)
        {
            _collapsedCarDetails.Add(carBaseState.CarId);
        }

        _timer = new Timer();
        _timer.Interval = Debugger.IsAttached ? 1000 : 5000;
        _timer.Elapsed += async (_, _) => await RefreshStates().ConfigureAwait(false);
        _timer.Start();
    }

    private async Task RefreshCarBaseStates()
    {
        _carBaseStates = await HttpClient.GetFromJsonAsync<List<DtoCarBaseStates>>("api/Index/GetCarBaseStatesOfEnabledCars").ConfigureAwait(false);
    }

    private async Task RefreshCarBaseSettings()
    {
        _carBaseSettings = await HttpClient
            .GetFromJsonAsync<Dictionary<int, DtoCarBaseSettings>>("api/Index/GetCarBaseSettingsOfEnabledCars")
            .ConfigureAwait(false);
    }

    private async Task RefreshPvValues()
    {
        _pvValues = await HttpClient.GetFromJsonAsync<DtoPvValues>("api/Index/GetPvValues").ConfigureAwait(false);
    }

    private async Task UpdateCarSettings(DtoCarBaseSettings dtoCarBaseSettings)
    {
        _savingCarIds.Add(dtoCarBaseSettings.CarId);
        var result = await HttpClient.PostAsJsonAsync("/api/Index/UpdateCarBaseSettings", dtoCarBaseSettings).ConfigureAwait(false);
        if (result.IsSuccessStatusCode)
        {
            Snackbar.Add("Car Configuration updated", Severity.Success);
        }
        else
        {
            Snackbar.Add("Error updating car configuration", Severity.Error);
        }

        await RefreshCarBaseSettings().ConfigureAwait(false);
        await RefreshCarBaseStates().ConfigureAwait(false);
        _savingCarIds.RemoveAll(i => i == dtoCarBaseSettings.CarId);
        StateHasChanged();
    }

    private async Task RefreshAllVisableCarDetails()
    {
        if (_carBaseStates == null)
        {
            return;
        }

        var uncollapsedCarIds = new HashSet<int>();
        foreach (var carId in _carBaseStates.Select(s => s.CarId))
        {
            if (!_collapsedCarDetails.Any(c => c == carId))
            {
                uncollapsedCarIds.Add(carId);
            }
        }

        foreach (var carId in uncollapsedCarIds)
        {
            var dtoCarTopicValues = await HttpClient.GetFromJsonAsync<DtoCarTopicValues>($"api/Index/CarDetails?carId={carId}").ConfigureAwait(false);
            if (dtoCarTopicValues == default)
            {
                continue;
            }

            var dataRows = new List<DtoTableRow>();
            foreach (var dateValue in dtoCarTopicValues.DateValues)
            {
                dataRows.Add(new DtoTableRow()
                    {
                        Elements = new List<string?>()
                    {
                        dateValue.Topic,
                        dateValue.DateTime?.ToString("g"),
                    },
                    });
            }

            foreach (var nonDateValue in dtoCarTopicValues.NonDateValues)
            {
                dataRows.Add(new DtoTableRow()
                    {
                        Elements = new List<string?>()
                    {
                        nonDateValue.Topic,
                        nonDateValue.Value,
                    },
                    });
            }

            var tableContent = new DtoTableContent()
                {
                    TableHeader = new DtoTableRow()
                    {
                        Elements = new List<string?>()
                    {
                        "Topic",
                        "Value",
                    },
                    },
                    TableData = dataRows,
                };
            _newCarDetailStates[carId] = tableContent;
        }
    }

    private async Task RefreshServerTime()
    {
        var dtoTimeValue = await HttpClient.GetFromJsonAsync<DateTime>("api/Hello/GetServerLocalTime").ConfigureAwait(false);
        _serverTime = dtoTimeValue;
    }

    private async Task RefreshServerTimeZone()
    {
        var dtoServerTimeZoneId = await HttpClient.GetFromJsonAsync<DtoValue<string>>("api/Hello/GetServerTimeZoneDisplayName").ConfigureAwait(false);
        _serverTimeZoneDisplayName = dtoServerTimeZoneId?.Value;
    }

    private async Task OnCollapseChanged(bool changedToExpanded, int carId)
    {
        if (changedToExpanded)
        {
            _collapsedCarDetails.Remove(carId);
            _newCarDetailStates.Remove(carId);
        }
        else
        {
            _collapsedCarDetails.Add(carId);
        }

        await RefreshAllVisableCarDetails().ConfigureAwait(false);
    }

    private DtoTableContent GeneratePlannedChargingSlotsTableContent(List<DtoChargingSlot> chargingSlots)
    {
        var table = new DtoTableContent()
            {
                TableHeader = new DtoTableRow()
                {
                    Elements = new List<string?>()
                {
                    "Start",
                    "End",
                    "Duration",
                },
                },
                TableData = new List<DtoTableRow>(),
            };
        foreach (var chargingSlot in chargingSlots)
        {
            table.TableData.Add(new DtoTableRow()
                {
                    Elements = new List<string?>()
                {
                    chargingSlot.ChargeStart.ToLocalTime().DateTime.ToString("g"),
                    chargingSlot.ChargeEnd.ToLocalTime().DateTime.ToString("g"),
                    chargingSlot.ChargeDuration < TimeSpan.FromDays(1) ? chargingSlot.ChargeDuration.ToString(@"hh\:mm") : string.Empty,
                },
                    IsActive = chargingSlot.IsActive,
                });
        }

        return table;
    }

    private async Task RefreshStates()
    {
        try
        {
            await RefreshPvValues().ConfigureAwait(false);
            await RefreshCarBaseStates().ConfigureAwait(false);
            await RefreshAllVisableCarDetails().ConfigureAwait(false);
            await RefreshServerTime().ConfigureAwait(false);

            _couldNotRefreshStates = false;
        }
        catch (Exception)
        {
            _couldNotRefreshStates = true;
        }

        StateHasChanged();
    }

    private async Task OpenRegisterPublicKeyPage(int carId)
    {
        var response = await HttpClient.PostAsync($"api/Index/UpdateCarFleetApiState?carId={carId}&fleetApiState={TeslaCarFleetApiState.OpenedLinkButNotTested}", null).ConfigureAwait(false);
        NavigationManager.NavigateTo("https://tesla.com/_ak/www.teslasolarcharger.de");
    }

    private async Task TestFleetApiAccess(int carId)
    {
        _testingFleetApiCarIds.Add(carId);
        var response = await HttpClient.GetFromJsonAsync<DtoValue<bool>>($"api/FleetApi/TestFleetApiAccess?carId={carId}").ConfigureAwait(false);
        if (response != default)
        {
            _isFleetApiWorkingForCar[carId] = response.Value;
        }

        _testingFleetApiCarIds.Remove(carId);
    }

    private void ShowInstallationIdWarning()
    {
        Snackbar.Add("Do not share the ID with anyone", Severity.Warning);
    }

    private int? CalculateHomePower()
    {
        if (_pvValues == null)
        {
            return null;
        }

        if (_pvValues.InverterPower == null)
        {
            return null;
        }

        if (_pvValues.GridPower == null)
        {
            return null;
        }
        var homeBatteryPower = _pvValues.HomeBatteryPower ?? 0;
        var chargingPower = _pvValues.CarCombinedChargingPowerAtHome ?? 0;
        var homePower = _pvValues.InverterPower - _pvValues.GridPower - homeBatteryPower - chargingPower;
        return homePower;
    }

    private string GetBatteryIconBySoc(int? soc)
    {
        if (soc < 10)
        {
            return Icons.Material.Filled.Battery0Bar;
        }
        if (soc < 25)
        {
            return Icons.Material.Filled.Battery1Bar;
        }
        if (soc < 40)
        {
            return Icons.Material.Filled.Battery2Bar;
        }
        if (soc < 60)
        {
            return Icons.Material.Filled.Battery3Bar;
        }
        if (soc < 75)
        {
            return Icons.Material.Filled.Battery4Bar;
        }
        if (soc < 90)
        {
            return Icons.Material.Filled.Battery5Bar;
        }
        if (soc < 100)
        {
            return Icons.Material.Filled.Battery6Bar;
        }
        return Icons.Material.Filled.BatteryFull;
    }

    private void UpdateCheckBoxState(int carId, string checkboxName, bool isChecked)
    {
        if (checkboxName == "IgnoreLatestTimeToReachSocDate")
        {
            _carBaseSettings[carId].IgnoreLatestTimeToReachSocDate = isChecked;
            if (isChecked)
            {
                _carBaseSettings[carId].IgnoreLatestTimeToReachSocDateOnWeekend = false;
            }
        }
        else if (checkboxName == "IgnoreLatestTimeToReachSocDateOnWeekend")
        {
            _carBaseSettings[carId].IgnoreLatestTimeToReachSocDateOnWeekend = isChecked;
            if (isChecked)
            {
                _carBaseSettings[carId].IgnoreLatestTimeToReachSocDate = false;
            }
        }
    }




    #region Electricity Flow Control Methods

    private bool IsVisibleSolarToHomeLine()
    {
        if (_pvValues?.InverterPower > 0 && CalculateHomePower() > 0)
        {
            return true;
        }
        return false;
    }

    private bool IsVisibleSolarToGridLine()
    {
        if (_pvValues?.InverterPower > 0 && _pvValues?.GridPower > 0)
        {
            return true;
        }
        return false;
    }

    private bool IsVisibleSolarToBatteryLine()
    {
        if (_pvValues?.InverterPower > 0 && _pvValues?.HomeBatteryPower > 0)
        {
            return true;
        }
        return false;
    }

    private bool IsVisibleGridToHomeLine()
    {
        if (CalculateHomePower() > 0 && _pvValues?.GridPower < 0)
        {
            return true;
        }
        return false;
    }

    private bool IsVisibleBatteryToHomeLine()
    {
        if (CalculateHomePower() > 0 && _pvValues?.HomeBatteryPower < 0)
        {
            return true;
        }
        return false;
    }

    private bool IsVisibleBatteryToGridLine()
    {
        if (_pvValues?.GridPower > 0 && _pvValues?.HomeBatteryPower < 0 && _pvValues?.InverterPower <= 0)
        {
            return true;
        }
        return false;
    }

    private bool IsVisibleGridToBatteryLine()
    {
        if (_pvValues?.GridPower < 0 && _pvValues?.HomeBatteryPower > 0 && _pvValues?.InverterPower <= 0)
        {
            return true;
        }
        return false;
    }

    private bool IsVisibleHomeToEvStationLine()
    {
        if (CalculateHomePower() > 0 && _pvValues?.CarCombinedChargingPowerAtHome > 0)
        {
            return true;
        }
        return false;
    }

    #endregion
}
