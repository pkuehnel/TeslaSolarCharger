@page "/HandledCharges"
@using TeslaSolarCharger.Shared.Dtos.ChargingCost
@using TeslaSolarCharger.Shared.Helper.Contracts
@inject HttpClient HttpClient
@inject IStringHelper StringHelper
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager

<h1>Handled Charges</h1>

@if (_handledCharges == null)
{
    <LoadingSpinnerComponent />
}
else
{
    <MudDataGrid Items="_handledCharges" Groupable="true" Filterable="true"
                 Hover="true" Dense="true" Striped="true" Virtualize="true" FixedHeader="true" FixedFooter="true"
                 Height="@_datagridHeight" Breakpoint="Breakpoint.None">
        <Columns>
            <PropertyColumn Property="x => x.StartTime"
                            Title="@StringHelper.GenerateFriendlyStringWithOutIdSuffix(nameof(DtoHandledCharge.StartTime))">
                <CellTemplate>
                    @if (context.Item.EndTime.HasValue && false)
                    {
                        <MudLink Href="@($"/TimeSeries/{CarId}/{((DateTimeOffset)context.Item.StartTime.ToUniversalTime()).ToUnixTimeSeconds()}/{((DateTimeOffset)context.Item.EndTime.Value.ToUniversalTime()).ToUnixTimeSeconds()}")">@context.Item.StartTime</MudLink>
                    }
                    else
                    {
                        @context.Item.StartTime.ToString("g")
                    }
                </CellTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.EndTime"
                            Title="@StringHelper.GenerateFriendlyStringWithOutIdSuffix(nameof(DtoHandledCharge.EndTime))">
                <CellTemplate>
                    @if (context.Item.EndTime.HasValue)
                    {
                        @context.Item.EndTime.Value.ToString("t");
                    }
                    else
                    {
                        <div></div>
                    }
                </CellTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.CalculatedPrice"
                            Title="@StringHelper.GenerateFriendlyStringWithOutIdSuffix(nameof(DtoHandledCharge.CalculatedPrice))"
                            AggregateDefinition="_calculatedPriceAggregation">
            </PropertyColumn>
            <PropertyColumn Property="x => x.PricePerKwh"
                            Title="@StringHelper.GenerateFriendlyStringWithOutIdSuffix(nameof(DtoHandledCharge.PricePerKwh))"
                            AggregateDefinition="_pricePerKwhAggregation"></PropertyColumn>
            <PropertyColumn Property="x => x.UsedGridEnergy"
                            Title="@StringHelper.GenerateFriendlyStringWithOutIdSuffix(nameof(DtoHandledCharge.UsedGridEnergy))"
                            AggregateDefinition="_usedEnergyAggrregation"></PropertyColumn>
            <PropertyColumn Property="x => x.UsedHomeBatteryEnergy"
                            Title="@StringHelper.GenerateFriendlyStringWithOutIdSuffix(nameof(DtoHandledCharge.UsedHomeBatteryEnergy))"
                            AggregateDefinition="_usedEnergyAggrregation"></PropertyColumn>
            <PropertyColumn Property="x => x.UsedSolarEnergy"
                            Title="@StringHelper.GenerateFriendlyStringWithOutIdSuffix(nameof(DtoHandledCharge.UsedSolarEnergy))"
                            AggregateDefinition="_usedEnergyAggrregation"></PropertyColumn>
        </Columns>
    </MudDataGrid>
}

@code {
    [Parameter]
    public int? CarId { get; set; }

    [Parameter]
    public int? ChargingConnectorId { get; set; }

    public int ViewportWidth { get; set; }
    public int ViewportHeight { get; set; }

    private string _datagridHeight = "calc(100vh - 10rem);";

    private List<DtoHandledCharge>? _handledCharges;
    private AggregateDefinition<DtoHandledCharge> _calculatedPriceAggregation = new AggregateDefinition<DtoHandledCharge>()
    {
        Type = AggregateType.Sum,
        DisplayFormat = "\u2211: {value}",
    };

    private AggregateDefinition<DtoHandledCharge> _pricePerKwhAggregation = new AggregateDefinition<DtoHandledCharge>()
    {
        Type = AggregateType.Custom,
        CustomAggregate = x =>
        {
            var averagePricePerKwh = x.Average(z => z.PricePerKwh);
            var resultString = $"\u2300: {averagePricePerKwh:F3}";
            return resultString;
        },
    };

    private AggregateDefinition<DtoHandledCharge> _usedEnergyAggrregation = new AggregateDefinition<DtoHandledCharge>()
    {
        Type = AggregateType.Sum,
        DisplayFormat = "\u2211: {value}",
    };

    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (Microsoft.AspNetCore.WebUtilities
            .QueryHelpers.ParseQuery(uri.Query)
            .TryGetValue("carId", out var c)
            && int.TryParse(c, out var parsedCarId))
        {
            CarId = parsedCarId;
        }
        else
        {
            CarId = default;
        }
        if (Microsoft.AspNetCore.WebUtilities
            .QueryHelpers.ParseQuery(uri.Query)
            .TryGetValue("chargingConnectorId", out var cc)
            && int.TryParse(cc, out var parsedChargingConnectorId))
        {
            ChargingConnectorId = parsedChargingConnectorId;
        }
        else
        {
            ChargingConnectorId = default;
        }
        _handledCharges = await HttpClient.GetFromJsonAsync<List<DtoHandledCharge>>($"api/ChargingCost/GetHandledCharges?carId={CarId}&chargingConnectorId={ChargingConnectorId}").ConfigureAwait(false) ?? new List<DtoHandledCharge>();
    }

    [JSInvokable]
    public void OnResize(int width, int height)
    {
        if (ViewportWidth == width && ViewportHeight == height) return;
        _datagridHeight = height < 430 ? "300px" : "calc(100vh - 10rem);";
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeVoidAsync("window.registerViewportChangeCallback", DotNetObjectReference.Create(this));
        }
    }
}
