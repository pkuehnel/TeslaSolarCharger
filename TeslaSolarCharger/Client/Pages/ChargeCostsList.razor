@page "/ChargePrices"
@using TeslaSolarCharger.Shared.Dtos.ChargingCost
@using TeslaSolarCharger.Shared.Localization.Contracts
@using TeslaSolarCharger.Shared.Localization.Registries
@using TeslaSolarCharger.Shared.Localization.Registries.Pages
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject ITextLocalizationService TextLocalizer
<h1>@T("Charge Prices")</h1>

<button class="btn btn-primary" @onclick="NavigateToNew">@T("New")</button>

@if (_chargePrices == null)
{
    <LoadingSpinnerComponent />
}
else
{
    <table class="table table-hover">
        <thead>
        <tr>
            <th scope="col">@T("Id")</th>
            <th scope="col">@T("Valid since")</th>
            <th scope="col">@T("Solar price per kWh")</th>
            <th scope="col">@T("Grid price per kWh")</th>
            <th scope="col">@T("Delete")</th>
        </tr>
        </thead>
        <tbody>
            @foreach (var chargePrice in _chargePrices)
        {
            <tr>
                <td><a href="/ChargePrice/detail/@chargePrice.Id">@chargePrice.Id</a></td>
                <td>@chargePrice.ValidSince</td>
                    <td>@(chargePrice.SolarPrice != null ? ((decimal)chargePrice.SolarPrice).ToString("0.00") : "")</td>
                    <td>@(chargePrice.GridPrice != null ? ((decimal)chargePrice.GridPrice).ToString("0.00") : "")</td>
                <td>
                    <button class="btn btn-danger" @onclick="(_ => Delete(chargePrice.Id))">
                        @if (_deletingChargePriceIds.Any(i => i == chargePrice.Id))
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span class="sr-only">@T("Loading...")</span>
                        }
                        else
                        {
                            <span class="oi oi-trash" aria-hidden="true"></span>
                        }
                    </button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private List<DtoChargePrice>? _chargePrices;

    private readonly List<int> _deletingChargePriceIds = new();

    private string T(string key) =>
        TextLocalizer.Get<ChargeCostsListPageLocalizationRegistry>(key, typeof(SharedComponentLocalizationRegistry))
        ?? key;

    protected override async Task OnInitializedAsync()
    {
        _chargePrices = await HttpClient.GetFromJsonAsync<List<DtoChargePrice>>("api/ChargingCost/GetChargePrices").ConfigureAwait(false);
    }

    void NavigateToNew()
    {
        NavigationManager.NavigateTo("/ChargePrice/new");
    }

    async Task Delete(int? id)
    {
        if (id == default)
        {
            return;
        }
        _deletingChargePriceIds.Add((int) id);
        await HttpClient.DeleteAsync($"api/ChargingCost/DeleteChargePriceById?id={id}").ConfigureAwait(false);
        _chargePrices?.RemoveAll(c => c.Id == id);
        _deletingChargePriceIds.RemoveAll(i => i == id);
    }
}
