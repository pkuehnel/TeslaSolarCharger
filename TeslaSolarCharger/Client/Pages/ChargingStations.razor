@page "/ChargingStations"
@using TeslaSolarCharger.Client.Services.Contracts
@using TeslaSolarCharger.Shared.Dtos.ChargingStation
@using TeslaSolarCharger.Shared.Localization.Contracts
@using TeslaSolarCharger.Shared.Localization.Registries
@using TeslaSolarCharger.Shared.Localization.Registries.Pages
@using Microsoft.AspNetCore.Components

@inject IChargingStationsService ChargingStationsService
@inject ITextLocalizationService TextLocalizer

<h1>@T("Charging Stations")</h1>

<MudAlert Severity="Severity.Info"
          NoIcon="true"
          ContentAlignment="HorizontalAlignment.Left">
    <h5>@T("How to connect a new Charging station")</h5>
    <div>@T("Charging stations are added automatically as soon as they connect via OCPP.")</div>
    <div>@((MarkupString)T("To connect, set the OCPP URL to the following: <code>ws://YOUR-TSC-IP:7190/api/Ocpp/</code> followed by a charging point ID."))</div>
    <div>@((MarkupString)T("Note: Many charging stations automatically add a charging point ID to the url, just make sure, that the resulting URL looks similar to the following example. Mind the single <code>/</code> after <code>Ocpp</code>"))</div>
    <div>@((MarkupString)T("<code>ws://192.168.178.36:7190/api/Ocpp/C00485L</code>"))</div>
</MudAlert>

@if (_chargingStations == default)
{

    <PlaceholderComponent Count="5"></PlaceholderComponent>
}
else if (_chargingStations.Count == 0)
{
    <h3>@T("No charging stations found")</h3>
}
else
{
    foreach (var chargingStation in _chargingStations)
    {
        <div class="shadow p-3 mb-5 bg-white rounded">
            <MudText Typo="Typo.h6" GutterBottom="true">
                @chargingStation.ChargepointId
                @if (chargingStation.IsConnected)
                {
                    <MudChip T="string" Text='@T("Connected via OCPP")' Color="Color.Success" Size="Size.Small" Class="ml-2" />
                }
                else
                {
                    <MudChip T="string" Text='@T("Not connected via OCPP")' Color="Color.Error" Size="Size.Small" Class="ml-2" />
                }
            </MudText>
            <ChargingStationConnectorsComponent ChargingStationId="chargingStation.Id"
                                                AutoPhaseSwitchingSupported="@(chargingStation.CanSwitchBetween1And3Phases == true)"></ChargingStationConnectorsComponent>
        </div>
    }
}


@code {
    private List<DtoChargingStation>? _chargingStations;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await RefreshChargingStations();

    }

    private async Task RefreshChargingStations()
    {
        _chargingStations = await ChargingStationsService.GetChargingStations();
    }

    private string T(string key) =>
        TextLocalizer.Get<ChargingStationsPageLocalizationRegistry>(key, typeof(SharedComponentLocalizationRegistry))
        ?? key;
}
